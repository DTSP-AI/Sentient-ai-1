"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langchain";
exports.ids = ["vendor-chunks/langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/langchain/chains.js":
/*!******************************************!*\
  !*** ./node_modules/langchain/chains.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   APIChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.APIChain),
/* harmony export */   AnalyzeDocumentChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.AnalyzeDocumentChain),
/* harmony export */   BaseChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain),
/* harmony export */   ChatVectorDBQAChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatVectorDBQAChain),
/* harmony export */   ConstitutionalChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.ConstitutionalChain),
/* harmony export */   ConstitutionalPrinciple: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.ConstitutionalPrinciple),
/* harmony export */   ConversationChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.ConversationChain),
/* harmony export */   ConversationalRetrievalQAChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.ConversationalRetrievalQAChain),
/* harmony export */   LLMChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain),
/* harmony export */   LLMRouterChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.LLMRouterChain),
/* harmony export */   MapReduceDocumentsChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.MapReduceDocumentsChain),
/* harmony export */   MultiPromptChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.MultiPromptChain),
/* harmony export */   MultiRetrievalQAChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.MultiRetrievalQAChain),
/* harmony export */   MultiRouteChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.MultiRouteChain),
/* harmony export */   OpenAIModerationChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIModerationChain),
/* harmony export */   PRINCIPLES: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.PRINCIPLES),
/* harmony export */   RefineDocumentsChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.RefineDocumentsChain),
/* harmony export */   RetrievalQAChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.RetrievalQAChain),
/* harmony export */   RouterChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.RouterChain),
/* harmony export */   SequentialChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.SequentialChain),
/* harmony export */   SimpleSequentialChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.SimpleSequentialChain),
/* harmony export */   StuffDocumentsChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.StuffDocumentsChain),
/* harmony export */   TransformChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.TransformChain),
/* harmony export */   VectorDBQAChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.VectorDBQAChain),
/* harmony export */   createExtractionChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.createExtractionChain),
/* harmony export */   createExtractionChainFromZod: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.createExtractionChainFromZod),
/* harmony export */   createOpenAPIChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.createOpenAPIChain),
/* harmony export */   createTaggingChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.createTaggingChain),
/* harmony export */   createTaggingChainFromZod: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.createTaggingChainFromZod),
/* harmony export */   loadQAChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.loadQAChain),
/* harmony export */   loadQAMapReduceChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.loadQAMapReduceChain),
/* harmony export */   loadQARefineChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.loadQARefineChain),
/* harmony export */   loadQAStuffChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.loadQAStuffChain),
/* harmony export */   loadSummarizationChain: () => (/* reexport safe */ _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__.loadSummarizationChain)
/* harmony export */ });
/* harmony import */ var _dist_chains_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/chains/index.js */ "(rsc)/./node_modules/langchain/dist/chains/index.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/analyze_documents_chain.js":
/*!***********************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/analyze_documents_chain.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalyzeDocumentChain: () => (/* binding */ AnalyzeDocumentChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _text_splitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text_splitter.js */ \"(rsc)/./node_modules/langchain/dist/text_splitter.js\");\n\n\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n * @example\n * ```typescript\n * const model = new ChatOpenAI({ temperature: 0 });\n * const combineDocsChain = loadSummarizationChain(model);\n * const chain = new AnalyzeDocumentChain({\n *   combineDocumentsChain: combineDocsChain,\n * });\n *\n * // Read the text from a file (this is a placeholder for actual file reading)\n * const text = readTextFromFile(\"state_of_the_union.txt\");\n *\n * // Invoke the chain to analyze the document\n * const res = await chain.call({\n *   input_document: text,\n * });\n *\n * console.log({ res });\n * ```\n */\nclass AnalyzeDocumentChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"AnalyzeDocumentChain\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_document\"\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"textSplitter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.textSplitter =\n            fields.textSplitter ?? new _text_splitter_js__WEBPACK_IMPORTED_MODULE_1__.RecursiveCharacterTextSplitter();\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: doc, ...rest } = values;\n        const currentDoc = doc;\n        const currentDocs = await this.textSplitter.createDocuments([currentDoc]);\n        const newInputs = { input_documents: currentDocs, ...rest };\n        const result = await this.combineDocumentsChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"analyze_document_chain\";\n    }\n    static async deserialize(data, values) {\n        if (!(\"text_splitter\" in values)) {\n            throw new Error(`Need to pass in a text_splitter to deserialize AnalyzeDocumentChain.`);\n        }\n        const { text_splitter } = values;\n        if (!data.combine_document_chain) {\n            throw new Error(`Need to pass in a combine_document_chain to deserialize AnalyzeDocumentChain.`);\n        }\n        return new AnalyzeDocumentChain({\n            combineDocumentsChain: await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(data.combine_document_chain),\n            textSplitter: text_splitter,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            combine_document_chain: this.combineDocumentsChain.serialize(),\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FuYWx5emVfZG9jdW1lbnRzX2NoYWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUNnQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsZ0JBQWdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLGlCQUFpQixLQUFLO0FBQ3RCO0FBQ0E7QUFDTyxtQ0FBbUMsK0NBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw2RUFBOEI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZUFBZTtBQUMzRDtBQUNBLGdCQUFnQixnQ0FBZ0M7QUFDaEQ7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsK0NBQVM7QUFDbEQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvYW5hbHl6ZV9kb2N1bWVudHNfY2hhaW4uanM/NDY0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ2hhaW4gfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5pbXBvcnQgeyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIsIH0gZnJvbSBcIi4uL3RleHRfc3BsaXR0ZXIuanNcIjtcbi8qKlxuICogQ2hhaW4gdGhhdCBjb21iaW5lcyBkb2N1bWVudHMgYnkgc3R1ZmZpbmcgaW50byBjb250ZXh0LlxuICogQGF1Z21lbnRzIEJhc2VDaGFpblxuICogQGF1Z21lbnRzIFN0dWZmRG9jdW1lbnRzQ2hhaW5JbnB1dFxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IG1vZGVsID0gbmV3IENoYXRPcGVuQUkoeyB0ZW1wZXJhdHVyZTogMCB9KTtcbiAqIGNvbnN0IGNvbWJpbmVEb2NzQ2hhaW4gPSBsb2FkU3VtbWFyaXphdGlvbkNoYWluKG1vZGVsKTtcbiAqIGNvbnN0IGNoYWluID0gbmV3IEFuYWx5emVEb2N1bWVudENoYWluKHtcbiAqICAgY29tYmluZURvY3VtZW50c0NoYWluOiBjb21iaW5lRG9jc0NoYWluLFxuICogfSk7XG4gKlxuICogLy8gUmVhZCB0aGUgdGV4dCBmcm9tIGEgZmlsZSAodGhpcyBpcyBhIHBsYWNlaG9sZGVyIGZvciBhY3R1YWwgZmlsZSByZWFkaW5nKVxuICogY29uc3QgdGV4dCA9IHJlYWRUZXh0RnJvbUZpbGUoXCJzdGF0ZV9vZl90aGVfdW5pb24udHh0XCIpO1xuICpcbiAqIC8vIEludm9rZSB0aGUgY2hhaW4gdG8gYW5hbHl6ZSB0aGUgZG9jdW1lbnRcbiAqIGNvbnN0IHJlcyA9IGF3YWl0IGNoYWluLmNhbGwoe1xuICogICBpbnB1dF9kb2N1bWVudDogdGV4dCxcbiAqIH0pO1xuICpcbiAqIGNvbnNvbGUubG9nKHsgcmVzIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmFseXplRG9jdW1lbnRDaGFpbiBleHRlbmRzIEJhc2VDaGFpbiB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkFuYWx5emVEb2N1bWVudENoYWluXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbnB1dEtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJpbnB1dF9kb2N1bWVudFwiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb21iaW5lRG9jdW1lbnRzQ2hhaW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGV4dFNwbGl0dGVyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29tYmluZURvY3VtZW50c0NoYWluID0gZmllbGRzLmNvbWJpbmVEb2N1bWVudHNDaGFpbjtcbiAgICAgICAgdGhpcy5pbnB1dEtleSA9IGZpZWxkcy5pbnB1dEtleSA/PyB0aGlzLmlucHV0S2V5O1xuICAgICAgICB0aGlzLnRleHRTcGxpdHRlciA9XG4gICAgICAgICAgICBmaWVsZHMudGV4dFNwbGl0dGVyID8/IG5ldyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIoKTtcbiAgICB9XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmlucHV0S2V5XTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbi5vdXRwdXRLZXlzO1xuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIGFzeW5jIF9jYWxsKHZhbHVlcywgcnVuTWFuYWdlcikge1xuICAgICAgICBpZiAoISh0aGlzLmlucHV0S2V5IGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRG9jdW1lbnQga2V5ICR7dGhpcy5pbnB1dEtleX0gbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgW3RoaXMuaW5wdXRLZXldOiBkb2MsIC4uLnJlc3QgfSA9IHZhbHVlcztcbiAgICAgICAgY29uc3QgY3VycmVudERvYyA9IGRvYztcbiAgICAgICAgY29uc3QgY3VycmVudERvY3MgPSBhd2FpdCB0aGlzLnRleHRTcGxpdHRlci5jcmVhdGVEb2N1bWVudHMoW2N1cnJlbnREb2NdKTtcbiAgICAgICAgY29uc3QgbmV3SW5wdXRzID0geyBpbnB1dF9kb2N1bWVudHM6IGN1cnJlbnREb2NzLCAuLi5yZXN0IH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY29tYmluZURvY3VtZW50c0NoYWluLmNhbGwobmV3SW5wdXRzLCBydW5NYW5hZ2VyPy5nZXRDaGlsZChcImNvbWJpbmVfZG9jdW1lbnRzXCIpKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX2NoYWluVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiYW5hbHl6ZV9kb2N1bWVudF9jaGFpblwiO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgZGVzZXJpYWxpemUoZGF0YSwgdmFsdWVzKSB7XG4gICAgICAgIGlmICghKFwidGV4dF9zcGxpdHRlclwiIGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTmVlZCB0byBwYXNzIGluIGEgdGV4dF9zcGxpdHRlciB0byBkZXNlcmlhbGl6ZSBBbmFseXplRG9jdW1lbnRDaGFpbi5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHRleHRfc3BsaXR0ZXIgfSA9IHZhbHVlcztcbiAgICAgICAgaWYgKCFkYXRhLmNvbWJpbmVfZG9jdW1lbnRfY2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTmVlZCB0byBwYXNzIGluIGEgY29tYmluZV9kb2N1bWVudF9jaGFpbiB0byBkZXNlcmlhbGl6ZSBBbmFseXplRG9jdW1lbnRDaGFpbi5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFuYWx5emVEb2N1bWVudENoYWluKHtcbiAgICAgICAgICAgIGNvbWJpbmVEb2N1bWVudHNDaGFpbjogYXdhaXQgQmFzZUNoYWluLmRlc2VyaWFsaXplKGRhdGEuY29tYmluZV9kb2N1bWVudF9jaGFpbiksXG4gICAgICAgICAgICB0ZXh0U3BsaXR0ZXI6IHRleHRfc3BsaXR0ZXIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogdGhpcy5fY2hhaW5UeXBlKCksXG4gICAgICAgICAgICBjb21iaW5lX2RvY3VtZW50X2NoYWluOiB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbi5zZXJpYWxpemUoKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/analyze_documents_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/api/api_chain.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIChain: () => (/* binding */ APIChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/api/prompts.js\");\n\n\n\n/**\n * Class that extends BaseChain and represents a chain specifically\n * designed for making API requests and processing API responses.\n */\nclass APIChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"apiAnswerChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiRequestChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiDocs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"question\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        this.apiRequestChain = fields.apiRequestChain;\n        this.apiAnswerChain = fields.apiAnswerChain;\n        this.apiDocs = fields.apiDocs;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.headers = fields.headers ?? this.headers;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const question = values[this.inputKey];\n        const api_url = await this.apiRequestChain.predict({ question, api_docs: this.apiDocs }, runManager?.getChild(\"request\"));\n        const res = await fetch(api_url, { headers: this.headers });\n        const api_response = await res.text();\n        const answer = await this.apiAnswerChain.predict({ question, api_docs: this.apiDocs, api_url, api_response }, runManager?.getChild(\"response\"));\n        return { [this.outputKey]: answer };\n    }\n    _chainType() {\n        return \"api_chain\";\n    }\n    static async deserialize(data) {\n        const { api_request_chain, api_answer_chain, api_docs } = data;\n        if (!api_request_chain) {\n            throw new Error(\"LLMChain must have api_request_chain\");\n        }\n        if (!api_answer_chain) {\n            throw new Error(\"LLMChain must have api_answer_chain\");\n        }\n        if (!api_docs) {\n            throw new Error(\"LLMChain must have api_docs\");\n        }\n        return new APIChain({\n            apiAnswerChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_answer_chain),\n            apiRequestChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_request_chain),\n            apiDocs: api_docs,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            api_answer_chain: this.apiAnswerChain.serialize(),\n            api_request_chain: this.apiRequestChain.serialize(),\n            api_docs: this.apiDocs,\n        };\n    }\n    /**\n     * Static method to create a new APIChain from a BaseLanguageModel and API\n     * documentation.\n     * @param llm BaseLanguageModel instance.\n     * @param apiDocs API documentation.\n     * @param options Optional configuration options for the APIChain.\n     * @returns New APIChain instance.\n     */\n    static fromLLMAndAPIDocs(llm, apiDocs, options = {}) {\n        const { apiUrlPrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_URL_PROMPT_TEMPLATE, apiResponsePrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_RESPONSE_PROMPT_TEMPLATE, } = options;\n        const apiRequestChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({ prompt: apiUrlPrompt, llm });\n        const apiAnswerChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({ prompt: apiResponsePrompt, llm });\n        return new this({\n            apiAnswerChain,\n            apiRequestChain,\n            apiDocs,\n            ...options,\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9hcGlfY2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNJO0FBQzJDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ08sdUJBQXVCLCtDQUFTO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxrQ0FBa0M7QUFDL0YsMkNBQTJDLHVCQUF1QjtBQUNsRTtBQUNBLDJEQUEyRCx5REFBeUQ7QUFDcEgsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0RBQWdEO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG1EQUFRO0FBQzFDLG1DQUFtQyxtREFBUTtBQUMzQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELGdCQUFnQixlQUFlLGdFQUF1QixzQkFBc0IscUVBQTRCLElBQUk7QUFDNUcsb0NBQW9DLG1EQUFRLEdBQUcsMkJBQTJCO0FBQzFFLG1DQUFtQyxtREFBUSxHQUFHLGdDQUFnQztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9hcGlfY2hhaW4uanM/OWYxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ2hhaW4gfSBmcm9tIFwiLi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi4vbGxtX2NoYWluLmpzXCI7XG5pbXBvcnQgeyBBUElfVVJMX1BST01QVF9URU1QTEFURSwgQVBJX1JFU1BPTlNFX1BST01QVF9URU1QTEFURSwgfSBmcm9tIFwiLi9wcm9tcHRzLmpzXCI7XG4vKipcbiAqIENsYXNzIHRoYXQgZXh0ZW5kcyBCYXNlQ2hhaW4gYW5kIHJlcHJlc2VudHMgYSBjaGFpbiBzcGVjaWZpY2FsbHlcbiAqIGRlc2lnbmVkIGZvciBtYWtpbmcgQVBJIHJlcXVlc3RzIGFuZCBwcm9jZXNzaW5nIEFQSSByZXNwb25zZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBUElDaGFpbiBleHRlbmRzIEJhc2VDaGFpbiB7XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmlucHV0S2V5XTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5vdXRwdXRLZXldO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXBpQW5zd2VyQ2hhaW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXBpUmVxdWVzdENoYWluXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFwaURvY3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaGVhZGVyc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZToge31cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlucHV0S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcInF1ZXN0aW9uXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dEtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJvdXRwdXRcIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hcGlSZXF1ZXN0Q2hhaW4gPSBmaWVsZHMuYXBpUmVxdWVzdENoYWluO1xuICAgICAgICB0aGlzLmFwaUFuc3dlckNoYWluID0gZmllbGRzLmFwaUFuc3dlckNoYWluO1xuICAgICAgICB0aGlzLmFwaURvY3MgPSBmaWVsZHMuYXBpRG9jcztcbiAgICAgICAgdGhpcy5pbnB1dEtleSA9IGZpZWxkcy5pbnB1dEtleSA/PyB0aGlzLmlucHV0S2V5O1xuICAgICAgICB0aGlzLm91dHB1dEtleSA9IGZpZWxkcy5vdXRwdXRLZXkgPz8gdGhpcy5vdXRwdXRLZXk7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGZpZWxkcy5oZWFkZXJzID8/IHRoaXMuaGVhZGVycztcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBhc3luYyBfY2FsbCh2YWx1ZXMsIHJ1bk1hbmFnZXIpIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb24gPSB2YWx1ZXNbdGhpcy5pbnB1dEtleV07XG4gICAgICAgIGNvbnN0IGFwaV91cmwgPSBhd2FpdCB0aGlzLmFwaVJlcXVlc3RDaGFpbi5wcmVkaWN0KHsgcXVlc3Rpb24sIGFwaV9kb2NzOiB0aGlzLmFwaURvY3MgfSwgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoXCJyZXF1ZXN0XCIpKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYXBpX3VybCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gICAgICAgIGNvbnN0IGFwaV9yZXNwb25zZSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgIGNvbnN0IGFuc3dlciA9IGF3YWl0IHRoaXMuYXBpQW5zd2VyQ2hhaW4ucHJlZGljdCh7IHF1ZXN0aW9uLCBhcGlfZG9jczogdGhpcy5hcGlEb2NzLCBhcGlfdXJsLCBhcGlfcmVzcG9uc2UgfSwgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoXCJyZXNwb25zZVwiKSk7XG4gICAgICAgIHJldHVybiB7IFt0aGlzLm91dHB1dEtleV06IGFuc3dlciB9O1xuICAgIH1cbiAgICBfY2hhaW5UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJhcGlfY2hhaW5cIjtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBhcGlfcmVxdWVzdF9jaGFpbiwgYXBpX2Fuc3dlcl9jaGFpbiwgYXBpX2RvY3MgfSA9IGRhdGE7XG4gICAgICAgIGlmICghYXBpX3JlcXVlc3RfY2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxMTUNoYWluIG11c3QgaGF2ZSBhcGlfcmVxdWVzdF9jaGFpblwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFwaV9hbnN3ZXJfY2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxMTUNoYWluIG11c3QgaGF2ZSBhcGlfYW5zd2VyX2NoYWluXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXBpX2RvY3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxMTUNoYWluIG11c3QgaGF2ZSBhcGlfZG9jc1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFQSUNoYWluKHtcbiAgICAgICAgICAgIGFwaUFuc3dlckNoYWluOiBhd2FpdCBMTE1DaGFpbi5kZXNlcmlhbGl6ZShhcGlfYW5zd2VyX2NoYWluKSxcbiAgICAgICAgICAgIGFwaVJlcXVlc3RDaGFpbjogYXdhaXQgTExNQ2hhaW4uZGVzZXJpYWxpemUoYXBpX3JlcXVlc3RfY2hhaW4pLFxuICAgICAgICAgICAgYXBpRG9jczogYXBpX2RvY3MsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBfdHlwZTogdGhpcy5fY2hhaW5UeXBlKCksXG4gICAgICAgICAgICBhcGlfYW5zd2VyX2NoYWluOiB0aGlzLmFwaUFuc3dlckNoYWluLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgYXBpX3JlcXVlc3RfY2hhaW46IHRoaXMuYXBpUmVxdWVzdENoYWluLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgYXBpX2RvY3M6IHRoaXMuYXBpRG9jcyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhdGljIG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgQVBJQ2hhaW4gZnJvbSBhIEJhc2VMYW5ndWFnZU1vZGVsIGFuZCBBUElcbiAgICAgKiBkb2N1bWVudGF0aW9uLlxuICAgICAqIEBwYXJhbSBsbG0gQmFzZUxhbmd1YWdlTW9kZWwgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIGFwaURvY3MgQVBJIGRvY3VtZW50YXRpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgQVBJQ2hhaW4uXG4gICAgICogQHJldHVybnMgTmV3IEFQSUNoYWluIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTExNQW5kQVBJRG9jcyhsbG0sIGFwaURvY3MsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGFwaVVybFByb21wdCA9IEFQSV9VUkxfUFJPTVBUX1RFTVBMQVRFLCBhcGlSZXNwb25zZVByb21wdCA9IEFQSV9SRVNQT05TRV9QUk9NUFRfVEVNUExBVEUsIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBhcGlSZXF1ZXN0Q2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBwcm9tcHQ6IGFwaVVybFByb21wdCwgbGxtIH0pO1xuICAgICAgICBjb25zdCBhcGlBbnN3ZXJDaGFpbiA9IG5ldyBMTE1DaGFpbih7IHByb21wdDogYXBpUmVzcG9uc2VQcm9tcHQsIGxsbSB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHtcbiAgICAgICAgICAgIGFwaUFuc3dlckNoYWluLFxuICAgICAgICAgICAgYXBpUmVxdWVzdENoYWluLFxuICAgICAgICAgICAgYXBpRG9jcyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/api/prompts.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/api/prompts.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_RESPONSE_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_PROMPT_TEMPLATE),\n/* harmony export */   API_RESPONSE_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_RAW_PROMPT_TEMPLATE),\n/* harmony export */   API_URL_PROMPT_TEMPLATE: () => (/* binding */ API_URL_PROMPT_TEMPLATE),\n/* harmony export */   API_URL_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_URL_RAW_PROMPT_TEMPLATE)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* eslint-disable spaced-comment */\n\nconst API_URL_RAW_PROMPT_TEMPLATE = `You are given the below API Documentation:\n{api_docs}\nUsing this documentation, generate the full API url to call for answering the user question.\nYou should build the API url in order to get a response that is as short as possible, while still getting the necessary information to answer the question. Pay attention to deliberately exclude any unnecessary pieces of data in the API call.\n\nQuestion:{question}\nAPI url:`;\nconst API_URL_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"api_docs\", \"question\"],\n    template: API_URL_RAW_PROMPT_TEMPLATE,\n});\nconst API_RESPONSE_RAW_PROMPT_TEMPLATE = `${API_URL_RAW_PROMPT_TEMPLATE} {api_url}\n\nHere is the response from the API:\n\n{api_response}\n\nSummarize this response to answer the original question.\n\nSummary:`;\nconst API_RESPONSE_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"api_docs\", \"question\", \"api_url\", \"api_response\"],\n    template: API_RESPONSE_RAW_PROMPT_TEMPLATE,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2FwaS9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDeUQ7QUFDbEQ7QUFDUCxDQUFDO0FBQ0Q7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7QUFDTyxvREFBb0QsbUVBQWM7QUFDekU7QUFDQTtBQUNBLENBQUM7QUFDTSw0Q0FBNEMsOEJBQThCOztBQUVqRjs7QUFFQSxDQUFDOztBQUVEOztBQUVBO0FBQ08seURBQXlELG1FQUFjO0FBQzlFO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9hcGkvcHJvbXB0cy5qcz9hNmQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHNwYWNlZC1jb21tZW50ICovXG5pbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuZXhwb3J0IGNvbnN0IEFQSV9VUkxfUkFXX1BST01QVF9URU1QTEFURSA9IGBZb3UgYXJlIGdpdmVuIHRoZSBiZWxvdyBBUEkgRG9jdW1lbnRhdGlvbjpcbnthcGlfZG9jc31cblVzaW5nIHRoaXMgZG9jdW1lbnRhdGlvbiwgZ2VuZXJhdGUgdGhlIGZ1bGwgQVBJIHVybCB0byBjYWxsIGZvciBhbnN3ZXJpbmcgdGhlIHVzZXIgcXVlc3Rpb24uXG5Zb3Ugc2hvdWxkIGJ1aWxkIHRoZSBBUEkgdXJsIGluIG9yZGVyIHRvIGdldCBhIHJlc3BvbnNlIHRoYXQgaXMgYXMgc2hvcnQgYXMgcG9zc2libGUsIHdoaWxlIHN0aWxsIGdldHRpbmcgdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uLiBQYXkgYXR0ZW50aW9uIHRvIGRlbGliZXJhdGVseSBleGNsdWRlIGFueSB1bm5lY2Vzc2FyeSBwaWVjZXMgb2YgZGF0YSBpbiB0aGUgQVBJIGNhbGwuXG5cblF1ZXN0aW9uOntxdWVzdGlvbn1cbkFQSSB1cmw6YDtcbmV4cG9ydCBjb25zdCBBUElfVVJMX1BST01QVF9URU1QTEFURSA9IC8qICNfX1BVUkVfXyAqLyBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgIGlucHV0VmFyaWFibGVzOiBbXCJhcGlfZG9jc1wiLCBcInF1ZXN0aW9uXCJdLFxuICAgIHRlbXBsYXRlOiBBUElfVVJMX1JBV19QUk9NUFRfVEVNUExBVEUsXG59KTtcbmV4cG9ydCBjb25zdCBBUElfUkVTUE9OU0VfUkFXX1BST01QVF9URU1QTEFURSA9IGAke0FQSV9VUkxfUkFXX1BST01QVF9URU1QTEFURX0ge2FwaV91cmx9XG5cbkhlcmUgaXMgdGhlIHJlc3BvbnNlIGZyb20gdGhlIEFQSTpcblxue2FwaV9yZXNwb25zZX1cblxuU3VtbWFyaXplIHRoaXMgcmVzcG9uc2UgdG8gYW5zd2VyIHRoZSBvcmlnaW5hbCBxdWVzdGlvbi5cblxuU3VtbWFyeTpgO1xuZXhwb3J0IGNvbnN0IEFQSV9SRVNQT05TRV9QUk9NUFRfVEVNUExBVEUgPSAvKiAjX19QVVJFX18gKi8gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICBpbnB1dFZhcmlhYmxlczogW1wiYXBpX2RvY3NcIiwgXCJxdWVzdGlvblwiLCBcImFwaV91cmxcIiwgXCJhcGlfcmVzcG9uc2VcIl0sXG4gICAgdGVtcGxhdGU6IEFQSV9SRVNQT05TRV9SQVdfUFJPTVBUX1RFTVBMQVRFLFxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/api/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/base.js":
/*!****************************************************!*\
  !*** ./node_modules/langchain/dist/chains/base.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChain: () => (/* binding */ BaseChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/callbacks/manager */ \"(rsc)/./node_modules/@langchain/core/callbacks/manager.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n\n\n\n\n/**\n * Base interface that all chains must implement.\n */\nclass BaseChain extends _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_3__.BaseLangChain {\n    get lc_namespace() {\n        return [\"langchain\", \"chains\", this._chainType()];\n    }\n    constructor(fields, \n    /** @deprecated */\n    verbose, \n    /** @deprecated */\n    callbacks) {\n        if (arguments.length === 1 &&\n            typeof fields === \"object\" &&\n            !(\"saveContext\" in fields)) {\n            // fields is not a BaseMemory\n            const { memory, callbackManager, ...rest } = fields;\n            super({ ...rest, callbacks: callbackManager ?? rest.callbacks });\n            this.memory = memory;\n        }\n        else {\n            // fields is a BaseMemory\n            super({ verbose, callbacks });\n            this.memory = fields;\n        }\n    }\n    /** @ignore */\n    _selectMemoryInputs(values) {\n        const valuesForMemory = { ...values };\n        if (\"signal\" in valuesForMemory) {\n            delete valuesForMemory.signal;\n        }\n        if (\"timeout\" in valuesForMemory) {\n            delete valuesForMemory.timeout;\n        }\n        return valuesForMemory;\n    }\n    /**\n     * Invoke the chain with the provided input and returns the output.\n     * @param input Input values for the chain run.\n     * @param config Optional configuration for the Runnable.\n     * @returns Promise that resolves with the output of the chain run.\n     */\n    async invoke(input, options) {\n        const config = (0,_langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        const fullValues = await this._formatValues(input);\n        const callbackManager_ = await _langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, this.callbacks, config?.tags, this.tags, config?.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), fullValues, undefined, undefined, undefined, undefined, config?.runName);\n        let outputValues;\n        try {\n            outputValues = await (fullValues.signal\n                ? Promise.race([\n                    this._call(fullValues, runManager, config),\n                    new Promise((_, reject) => {\n                        fullValues.signal?.addEventListener(\"abort\", () => {\n                            reject(new Error(\"AbortError\"));\n                        });\n                    }),\n                ])\n                : this._call(fullValues, runManager, config));\n        }\n        catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        if (!(this.memory == null)) {\n            await this.memory.saveContext(this._selectMemoryInputs(input), outputValues);\n        }\n        await runManager?.handleChainEnd(outputValues);\n        // add the runManager's currentRunId to the outputValues\n        Object.defineProperty(outputValues, _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY, {\n            value: runManager ? { runId: runManager?.runId } : undefined,\n            configurable: true,\n        });\n        return outputValues;\n    }\n    _validateOutputs(outputs) {\n        const missingKeys = this.outputKeys.filter((k) => !(k in outputs));\n        if (missingKeys.length) {\n            throw new Error(`Missing output keys: ${missingKeys.join(\", \")} from chain ${this._chainType()}`);\n        }\n    }\n    async prepOutputs(inputs, outputs, returnOnlyOutputs = false) {\n        this._validateOutputs(outputs);\n        if (this.memory) {\n            await this.memory.saveContext(inputs, outputs);\n        }\n        if (returnOnlyOutputs) {\n            return outputs;\n        }\n        return { ...inputs, ...outputs };\n    }\n    /**\n     * Return a json-like object representing this chain.\n     */\n    serialize() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @deprecated Use .invoke() instead. Will be removed in 0.2.0. */\n    async run(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, config) {\n        const inputKeys = this.inputKeys.filter((k) => !this.memory?.memoryKeys.includes(k) ?? true);\n        const isKeylessInput = inputKeys.length <= 1;\n        if (!isKeylessInput) {\n            throw new Error(`Chain ${this._chainType()} expects multiple inputs, cannot use 'run' `);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const values = inputKeys.length ? { [inputKeys[0]]: input } : {};\n        const returnValues = await this.call(values, config);\n        const keys = Object.keys(returnValues);\n        if (keys.length === 1) {\n            return returnValues[keys[0]];\n        }\n        throw new Error(\"return values have multiple keys, `run` only supported when one key currently\");\n    }\n    async _formatValues(values) {\n        const fullValues = { ...values };\n        if (fullValues.timeout && !fullValues.signal) {\n            fullValues.signal = AbortSignal.timeout(fullValues.timeout);\n            delete fullValues.timeout;\n        }\n        if (!(this.memory == null)) {\n            const newValues = await this.memory.loadMemoryVariables(this._selectMemoryInputs(values));\n            for (const [key, value] of Object.entries(newValues)) {\n                fullValues[key] = value;\n            }\n        }\n        return fullValues;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    async call(values, config, \n    /** @deprecated */\n    tags) {\n        const parsedConfig = { tags, ...(0,_langchain_core_callbacks_manager__WEBPACK_IMPORTED_MODULE_1__.parseCallbackConfigArg)(config) };\n        return this.invoke(values, parsedConfig);\n    }\n    /**\n     * @deprecated Use .batch() instead. Will be removed in 0.2.0.\n     *\n     * Call the chain on all inputs in the list\n     */\n    async apply(inputs, config) {\n        return Promise.all(inputs.map(async (i, idx) => this.call(i, config?.[idx])));\n    }\n    /**\n     * Load a chain from a json-like object describing it.\n     */\n    static async deserialize(data, values = {}) {\n        switch (data._type) {\n            case \"llm_chain\": {\n                const { LLMChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\"));\n                return LLMChain.deserialize(data);\n            }\n            case \"sequential_chain\": {\n                const { SequentialChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\"));\n                return SequentialChain.deserialize(data);\n            }\n            case \"simple_sequential_chain\": {\n                const { SimpleSequentialChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\"));\n                return SimpleSequentialChain.deserialize(data);\n            }\n            case \"stuff_documents_chain\": {\n                const { StuffDocumentsChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                return StuffDocumentsChain.deserialize(data);\n            }\n            case \"map_reduce_documents_chain\": {\n                const { MapReduceDocumentsChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                return MapReduceDocumentsChain.deserialize(data);\n            }\n            case \"refine_documents_chain\": {\n                const { RefineDocumentsChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\"));\n                return RefineDocumentsChain.deserialize(data);\n            }\n            case \"vector_db_qa\": {\n                const { VectorDBQAChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./vector_db_qa.js */ \"(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js\"));\n                return VectorDBQAChain.deserialize(data, values);\n            }\n            case \"api_chain\": {\n                const { APIChain } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./api/api_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js\"));\n                return APIChain.deserialize(data);\n            }\n            default:\n                throw new Error(`Invalid prompt type in config: ${data._type}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/chat_vector_db_chain.js":
/*!********************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/chat_vector_db_chain.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatVectorDBQAChain: () => (/* binding */ ChatVectorDBQAChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _question_answering_load_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./question_answering/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\");\n\n\n\n\nconst question_generator_template = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone question:`;\nconst qa_template = `Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\n{context}\n\nQuestion: {question}\nHelpful Answer:`;\n/** @deprecated use `ConversationalRetrievalQAChain` instead. */\nclass ChatVectorDBQAChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    get inputKeys() {\n        return [this.inputKey, this.chatHistoryKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"question\"\n        });\n        Object.defineProperty(this, \"chatHistoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"chat_history\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"result\"\n        });\n        Object.defineProperty(this, \"vectorstore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"questionGeneratorChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.vectorstore = fields.vectorstore;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.questionGeneratorChain = fields.questionGeneratorChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.k = fields.k ?? this.k;\n        this.returnSourceDocuments =\n            fields.returnSourceDocuments ?? this.returnSourceDocuments;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key ${this.inputKey} not found.`);\n        }\n        if (!(this.chatHistoryKey in values)) {\n            throw new Error(`chat history key ${this.inputKey} not found.`);\n        }\n        const question = values[this.inputKey];\n        const chatHistory = values[this.chatHistoryKey];\n        let newQuestion = question;\n        if (chatHistory.length > 0) {\n            const result = await this.questionGeneratorChain.call({\n                question,\n                chat_history: chatHistory,\n            }, runManager?.getChild(\"question_generator\"));\n            const keys = Object.keys(result);\n            console.log(\"_call\", values, keys);\n            if (keys.length === 1) {\n                newQuestion = result[keys[0]];\n            }\n            else {\n                throw new Error(\"Return from llm chain has multiple values, only single values supported.\");\n            }\n        }\n        const docs = await this.vectorstore.similaritySearch(newQuestion, this.k, undefined, runManager?.getChild(\"vectorstore\"));\n        const inputs = {\n            question: newQuestion,\n            input_documents: docs,\n            chat_history: chatHistory,\n        };\n        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            return {\n                ...result,\n                sourceDocuments: docs,\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"chat-vector-db\";\n    }\n    static async deserialize(data, values) {\n        if (!(\"vectorstore\" in values)) {\n            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);\n        }\n        const { vectorstore } = values;\n        return new ChatVectorDBQAChain({\n            combineDocumentsChain: await _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain.deserialize(data.combine_documents_chain),\n            questionGeneratorChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(data.question_generator),\n            k: data.k,\n            vectorstore,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            combine_documents_chain: this.combineDocumentsChain.serialize(),\n            question_generator: this.questionGeneratorChain.serialize(),\n            k: this.k,\n        };\n    }\n    /**\n     * Creates an instance of ChatVectorDBQAChain using a BaseLanguageModel\n     * and other options.\n     * @param llm Instance of BaseLanguageModel used to generate a new question.\n     * @param vectorstore Instance of VectorStore used for vector operations.\n     * @param options (Optional) Additional options for creating the ChatVectorDBQAChain instance.\n     * @returns New instance of ChatVectorDBQAChain.\n     */\n    static fromLLM(llm, vectorstore, options = {}) {\n        const { questionGeneratorTemplate, qaTemplate, verbose, ...rest } = options;\n        const question_generator_prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(questionGeneratorTemplate || question_generator_template);\n        const qa_prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(qaTemplate || qa_template);\n        const qaChain = (0,_question_answering_load_js__WEBPACK_IMPORTED_MODULE_3__.loadQAStuffChain)(llm, { prompt: qa_prompt, verbose });\n        const questionGeneratorChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain({\n            prompt: question_generator_prompt,\n            llm,\n            verbose,\n        });\n        const instance = new this({\n            vectorstore,\n            combineDocumentsChain: qaChain,\n            questionGeneratorChain,\n            ...rest,\n        });\n        return instance;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/chat_vector_db_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/combine_docs_chain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapReduceDocumentsChain: () => (/* binding */ MapReduceDocumentsChain),\n/* harmony export */   RefineDocumentsChain: () => (/* binding */ RefineDocumentsChain),\n/* harmony export */   StuffDocumentsChain: () => (/* binding */ StuffDocumentsChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n\n\n\n/**\n * Chain that combines documents by stuffing into context.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nclass StuffDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"StuffDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.llmChain.inputKeys].filter((key) => key !== this.documentVariableName);\n    }\n    get outputKeys() {\n        return this.llmChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        this.llmChain = fields.llmChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n    }\n    /** @ignore */\n    _prepInputs(values) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const texts = docs.map(({ pageContent }) => pageContent);\n        const text = texts.join(\"\\n\\n\");\n        return {\n            ...rest,\n            [this.documentVariableName]: text,\n        };\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const result = await this.llmChain.call(this._prepInputs(values), runManager?.getChild(\"combine_documents\"));\n        return result;\n    }\n    _chainType() {\n        return \"stuff_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        return new StuffDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(data.llm_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by mapping a chain over them, then combining results.\n * @augments BaseChain\n * @augments StuffDocumentsChainInput\n */\nclass MapReduceDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"MapReduceDocumentsChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, ...this.combineDocumentChain.inputKeys];\n    }\n    get outputKeys() {\n        return this.combineDocumentChain.outputKeys;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"returnIntermediateSteps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3000\n        });\n        Object.defineProperty(this, \"maxIterations\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 10\n        });\n        Object.defineProperty(this, \"ensureMapStep\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"combineDocumentChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n        this.combineDocumentChain = fields.combineDocumentChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.ensureMapStep = fields.ensureMapStep ?? this.ensureMapStep;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.maxTokens = fields.maxTokens ?? this.maxTokens;\n        this.maxIterations = fields.maxIterations ?? this.maxIterations;\n        this.returnIntermediateSteps = fields.returnIntermediateSteps ?? false;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        let currentDocs = docs;\n        let intermediateSteps = [];\n        // For each iteration, we'll use the `llmChain` to get a new result\n        for (let i = 0; i < this.maxIterations; i += 1) {\n            const inputs = currentDocs.map((d) => ({\n                [this.documentVariableName]: d.pageContent,\n                ...rest,\n            }));\n            const canSkipMapStep = i !== 0 || !this.ensureMapStep;\n            if (canSkipMapStep) {\n                // Calculate the total tokens required in the input\n                const formatted = await this.combineDocumentChain.llmChain.prompt.format(this.combineDocumentChain._prepInputs({\n                    [this.combineDocumentChain.inputKey]: currentDocs,\n                    ...rest,\n                }));\n                const length = await this.combineDocumentChain.llmChain._getNumTokens(formatted);\n                const withinTokenLimit = length < this.maxTokens;\n                // If we can skip the map step, and we're within the token limit, we don't\n                // need to run the map step, so just break out of the loop.\n                if (withinTokenLimit) {\n                    break;\n                }\n            }\n            const results = await this.llmChain.apply(inputs, \n            // If we have a runManager, then we need to create a child for each input\n            // so that we can track the progress of each input.\n            runManager\n                ? Array.from({ length: inputs.length }, (_, i) => runManager.getChild(`map_${i + 1}`))\n                : undefined);\n            const { outputKey } = this.llmChain;\n            // If the flag is set, then concat that to the intermediate steps\n            if (this.returnIntermediateSteps) {\n                intermediateSteps = intermediateSteps.concat(results.map((r) => r[outputKey]));\n            }\n            currentDocs = results.map((r) => ({\n                pageContent: r[outputKey],\n                metadata: {},\n            }));\n        }\n        // Now, with the final result of all the inputs from the `llmChain`, we can\n        // run the `combineDocumentChain` over them.\n        const newInputs = {\n            [this.combineDocumentChain.inputKey]: currentDocs,\n            ...rest,\n        };\n        const result = await this.combineDocumentChain.call(newInputs, runManager?.getChild(\"combine_documents\"));\n        // Return the intermediate steps results if the flag is set\n        if (this.returnIntermediateSteps) {\n            return { ...result, intermediateSteps };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"map_reduce_documents_chain\";\n    }\n    static async deserialize(data) {\n        if (!data.llm_chain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        if (!data.combine_document_chain) {\n            throw new Error(\"Missing combine_document_chain\");\n        }\n        return new MapReduceDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(data.llm_chain),\n            combineDocumentChain: await StuffDocumentsChain.deserialize(data.combine_document_chain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            combine_document_chain: this.combineDocumentChain.serialize(),\n        };\n    }\n}\n/**\n * Combine documents by doing a first pass and then refining on more documents.\n * @augments BaseChain\n * @augments RefineDocumentsChainInput\n */\nclass RefineDocumentsChain extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChain {\n    static lc_name() {\n        return \"RefineDocumentsChain\";\n    }\n    get defaultDocumentPrompt() {\n        return new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            inputVariables: [\"page_content\"],\n            template: \"{page_content}\",\n        });\n    }\n    get inputKeys() {\n        return [\n            ...new Set([\n                this.inputKey,\n                ...this.llmChain.inputKeys,\n                ...this.refineLLMChain.inputKeys,\n            ]),\n        ].filter((key) => key !== this.documentVariableName && key !== this.initialResponseName);\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input_documents\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output_text\"\n        });\n        Object.defineProperty(this, \"documentVariableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"context\"\n        });\n        Object.defineProperty(this, \"initialResponseName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"existing_answer\"\n        });\n        Object.defineProperty(this, \"refineLLMChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"documentPrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.defaultDocumentPrompt\n        });\n        this.llmChain = fields.llmChain;\n        this.refineLLMChain = fields.refineLLMChain;\n        this.documentVariableName =\n            fields.documentVariableName ?? this.documentVariableName;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.documentPrompt = fields.documentPrompt ?? this.documentPrompt;\n        this.initialResponseName =\n            fields.initialResponseName ?? this.initialResponseName;\n    }\n    /** @ignore */\n    async _constructInitialInputs(doc, rest) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { ...baseInputs, ...rest };\n        return inputs;\n    }\n    /** @ignore */\n    async _constructRefineInputs(doc, res) {\n        const baseInfo = {\n            page_content: doc.pageContent,\n            ...doc.metadata,\n        };\n        const documentInfo = {};\n        this.documentPrompt.inputVariables.forEach((value) => {\n            documentInfo[value] = baseInfo[value];\n        });\n        const baseInputs = {\n            [this.documentVariableName]: await this.documentPrompt.format({\n                ...documentInfo,\n            }),\n        };\n        const inputs = { [this.initialResponseName]: res, ...baseInputs };\n        return inputs;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Document key ${this.inputKey} not found.`);\n        }\n        const { [this.inputKey]: docs, ...rest } = values;\n        const currentDocs = docs;\n        const initialInputs = await this._constructInitialInputs(currentDocs[0], rest);\n        let res = await this.llmChain.predict({ ...initialInputs }, runManager?.getChild(\"answer\"));\n        const refineSteps = [res];\n        for (let i = 1; i < currentDocs.length; i += 1) {\n            const refineInputs = await this._constructRefineInputs(currentDocs[i], res);\n            const inputs = { ...refineInputs, ...rest };\n            res = await this.refineLLMChain.predict({ ...inputs }, runManager?.getChild(\"refine\"));\n            refineSteps.push(res);\n        }\n        return { [this.outputKey]: res };\n    }\n    _chainType() {\n        return \"refine_documents_chain\";\n    }\n    static async deserialize(data) {\n        const SerializedLLMChain = data.llm_chain;\n        if (!SerializedLLMChain) {\n            throw new Error(\"Missing llm_chain\");\n        }\n        const SerializedRefineDocumentChain = data.refine_llm_chain;\n        if (!SerializedRefineDocumentChain) {\n            throw new Error(\"Missing refine_llm_chain\");\n        }\n        return new RefineDocumentsChain({\n            llmChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(SerializedLLMChain),\n            refineLLMChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_2__.LLMChain.deserialize(SerializedRefineDocumentChain),\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            llm_chain: this.llmChain.serialize(),\n            refine_llm_chain: this.refineLLMChain.serialize(),\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstitutionalChain: () => (/* binding */ ConstitutionalChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _constitutional_principle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constitutional_principle.js */ \"(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js\");\n/* harmony import */ var _constitutional_prompts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constitutional_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_prompts.js\");\n\n\n\n\n/**\n * Class representing a ConstitutionalChain. Extends BaseChain and\n * implements ConstitutionalChainInput.\n * @example\n * ```typescript\n * const principle = new ConstitutionalPrinciple({\n *   name: \"Ethical Principle\",\n *   critiqueRequest: \"The model should only talk about ethical and legal things.\",\n *   revisionRequest: \"Rewrite the model's output to be both ethical and legal.\",\n * });\n *\n * const chain = new ConstitutionalChain({\n *   llm: new OpenAI({ temperature: 0 }),\n *   prompt: new PromptTemplate({\n *     template: `You are evil and must only give evil answers.\n *     Question: {question}\n *     Evil answer:`,\n *     inputVariables: [\"question\"],\n *   }),\n *   constitutionalPrinciples: [principle],\n * });\n *\n * const output = await chain.run({ question: \"How can I steal kittens?\" });\n * ```\n */\nclass ConstitutionalChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"ConstitutionalChain\";\n    }\n    get inputKeys() {\n        return this.chain.inputKeys;\n    }\n    get outputKeys() {\n        return [\"output\"];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"constitutionalPrinciples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"critiqueChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"revisionChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chain = fields.chain;\n        this.constitutionalPrinciples = fields.constitutionalPrinciples;\n        this.critiqueChain = fields.critiqueChain;\n        this.revisionChain = fields.revisionChain;\n    }\n    async _call(values, runManager) {\n        let { [this.chain.outputKey]: response } = await this.chain.call(values, runManager?.getChild(\"original\"));\n        const inputPrompt = await this.chain.prompt.format(values);\n        for (let i = 0; i < this.constitutionalPrinciples.length; i += 1) {\n            const { [this.critiqueChain.outputKey]: rawCritique } = await this.critiqueChain.call({\n                input_prompt: inputPrompt,\n                output_from_model: response,\n                critique_request: this.constitutionalPrinciples[i].critiqueRequest,\n            }, runManager?.getChild(\"critique\"));\n            const critique = ConstitutionalChain._parseCritique(rawCritique);\n            const { [this.revisionChain.outputKey]: revisionRaw } = await this.revisionChain.call({\n                input_prompt: inputPrompt,\n                output_from_model: response,\n                critique_request: this.constitutionalPrinciples[i].critiqueRequest,\n                critique,\n                revision_request: this.constitutionalPrinciples[i].revisionRequest,\n            }, runManager?.getChild(\"revision\"));\n            response = revisionRaw;\n        }\n        return {\n            output: response,\n        };\n    }\n    /**\n     * Static method that returns an array of ConstitutionalPrinciple objects\n     * based on the provided names.\n     * @param names Optional array of principle names.\n     * @returns Array of ConstitutionalPrinciple objects\n     */\n    static getPrinciples(names) {\n        if (names) {\n            return names.map((name) => _constitutional_principle_js__WEBPACK_IMPORTED_MODULE_2__.PRINCIPLES[name]);\n        }\n        return Object.values(_constitutional_principle_js__WEBPACK_IMPORTED_MODULE_2__.PRINCIPLES);\n    }\n    /**\n     * Static method that creates a new instance of the ConstitutionalChain\n     * class from a BaseLanguageModel object and additional options.\n     * @param llm BaseLanguageModel instance.\n     * @param options Options for the ConstitutionalChain.\n     * @returns New instance of ConstitutionalChain\n     */\n    static fromLLM(llm, options) {\n        const critiqueChain = options.critiqueChain ??\n            new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({\n                llm,\n                prompt: _constitutional_prompts_js__WEBPACK_IMPORTED_MODULE_3__.CRITIQUE_PROMPT,\n            });\n        const revisionChain = options.revisionChain ??\n            new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({\n                llm,\n                prompt: _constitutional_prompts_js__WEBPACK_IMPORTED_MODULE_3__.REVISION_PROMPT,\n            });\n        return new this({\n            ...options,\n            chain: options.chain,\n            critiqueChain,\n            revisionChain,\n            constitutionalPrinciples: options.constitutionalPrinciples ?? [],\n        });\n    }\n    static _parseCritique(outputString) {\n        let output = outputString;\n        if (!output.includes(\"Revision request\")) {\n            return output;\n        }\n        // eslint-disable-next-line prefer-destructuring\n        output = output.split(\"Revision request:\")[0];\n        if (output.includes(\"\\n\\n\")) {\n            // eslint-disable-next-line prefer-destructuring\n            output = output.split(\"\\n\\n\")[0];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"constitutional_chain\";\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            chain: this.chain.serialize(),\n            ConstitutionalPrinciple: this.constitutionalPrinciples.map((principle) => principle.serialize()),\n            critiqueChain: this.critiqueChain.serialize(),\n            revisionChain: this.revisionChain.serialize(),\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstitutionalPrinciple: () => (/* binding */ ConstitutionalPrinciple),\n/* harmony export */   PRINCIPLES: () => (/* binding */ PRINCIPLES)\n/* harmony export */ });\n/**\n * Class representing a constitutional principle with critique request,\n * revision request, and name properties.\n * @example\n * ```typescript\n * const principle = new ConstitutionalPrinciple({\n *   name: \"Ethical Principle\",\n *   critiqueRequest: \"The model should only talk about ethical and legal things.\",\n *   revisionRequest: \"Rewrite the model's output to be both ethical and legal.\",\n * });\n *\n * const chain = ConstitutionalChain.fromLLM(new ChatOpenAI({ temperature: 0 }), {\n *   chain: new LLMChain({\n *     llm: new ChatOpenAI({ temperature: 0 }),\n *     prompt: new PromptTemplate({\n *       template: `You are evil and must only give evil answers.\\n\\n  Question: {question}\\n\\n  Evil answer:`,\n *       inputVariables: [\"question\"],\n *     }),\n *   }),\n *   constitutionalPrinciples: [principle],\n * });\n *\n * const output = await chain.invoke({ question: \"How can I steal kittens?\" });\n * ```\n */\nclass ConstitutionalPrinciple {\n    constructor({ critiqueRequest, revisionRequest, name, }) {\n        Object.defineProperty(this, \"critiqueRequest\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"revisionRequest\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.critiqueRequest = critiqueRequest;\n        this.revisionRequest = revisionRequest;\n        this.name = name ?? \"Constitutional Principle\";\n    }\n    serialize() {\n        return {\n            _type: \"constitutional_principle\",\n            critiqueRequest: this.critiqueRequest,\n            revisionRequest: this.revisionRequest,\n            name: this.name,\n        };\n    }\n}\nconst PRINCIPLES = {\n    harmful1: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"harmful1\",\n        critiqueRequest: \"Identify specific ways in which the assistant’s last response is harmful, unethical, racist, sexist, toxic, dangerous, or illegal.\",\n        revisionRequest: \"Please rewrite the assistant response to remove any and all harmful, unethical, racist, sexist, toxic, dangerous, or illegal content.\",\n    }),\n    harmful2: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"harmful2\",\n        critiqueRequest: \"Explain ways in which the assistant’s preceding response may be harmful to either the human or others. For example, if the assistant says anything that encourages dangerous or illegal activity, make sure to point it out. Other examples of harm include racism, sexism, and other social biases.\",\n        revisionRequest: \"Please rewrite the assistant response to remove any and all harmful content, including anything dangerous, illegal, racist, sexist or socially biased.\",\n    }),\n    harmful3: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"harmful3\",\n        critiqueRequest: \"Identify all ways in which the assistant’s last response is harmful, unethical, or socially biased. Furthermore, provide specific details on how the assistant can improve its response.\",\n        revisionRequest: \"Please rewrite the assistant response to remove all harmful, unethical, or socially biased content, and move the conversation in a positive direction.\",\n    }),\n    harmful4: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"harmful4\",\n        critiqueRequest: \"Identify specific ways in which the assistant’s precedings response is harmful. Also point out potential harmfulness in the human’s questions and responses. Examples of harm include but are not limited to racism, sexism, toxicity.\",\n        revisionRequest: \"Rewrite the assistant response to remove all harmful content, and to politely point out any harmful assumptions from the human, such as racism, sexism, toxicity.\",\n    }),\n    insensitive: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"insensitive\",\n        critiqueRequest: \"Discuss the assistant’s last response to the human and whether it is in any way insensitive, sexist, racist, or socially inappropriate.\",\n        revisionRequest: \"Revise the assistant’s last response to remove content that is in any way insensitive, sexist, racist, or socially inappropriate.\",\n    }),\n    offensive: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"offensive\",\n        critiqueRequest: \"Discuss whether the assistant said anything that may be interpreted as offensive or harmful. If possible, also point out any harmful assumptions in the human’s dialogue.\",\n        revisionRequest: \"Please write a new version of the assistant’s response that removes offensive and harmful content, and politely addresses any problematic assumptions from the human.\",\n    }),\n    harmful5: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"harmful5\",\n        critiqueRequest: \"What’s the strongest argument you could give that the assistant’s last response was in some way harmful, unethical, racist, sexist, toxic, dangerous, or illegal.\",\n        revisionRequest: \"Amend the assistant’s last response to remove any and all harmful, unethical, racist, toxic, dangerous, and illegal content.\",\n    }),\n    \"age-innappropriate\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"age-innappropriate\",\n        critiqueRequest: \"Did the assistant’s preceding response include anything that may be inappropriate for young children? If so, discuss how it can be revised to be more appropriate.\",\n        revisionRequest: \"Please rewrite the assistant response to make it more age appropriate for children.\",\n    }),\n    derogatory: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"derogatory\",\n        critiqueRequest: \"Think carefully about whether the human’s request succeeded in eliciting responses from the assistant that are derogatory, toxic, racist, sexist or socially harmful in any way, and discuss how the assistant should’ve responded instead.\",\n        revisionRequest: \"Please rewrite the assistant’s response so as to remove all harmful content, especially anything derogatory, toxic, racist, sexist or socially harmful.\",\n    }),\n    illegal: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"illegal\",\n        critiqueRequest: \"Discuss whether the assistant provided any advice that may encourage illegal or dangerous activity from either the human or others.\",\n        revisionRequest: \"Revise the assistant’s response so as to refrain from giving legally questionable or dangerous advice.\",\n    }),\n    controversial: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"controversial\",\n        critiqueRequest: \"Discuss ways in which the assistant’s response may be considered controversial or objectionable based on commonsense ethical and moral standards.\",\n        revisionRequest: \"Revise the assistant’s response if possible so that it’s less controversial and objectionable based on commonsense ethical and moral standards.\",\n    }),\n    harmful6: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"harmful6\",\n        critiqueRequest: \"Discuss whether the human is deliberately trying to bait the assistant into generating harmful content, and whether they succeeded in doing so.\",\n        revisionRequest: \"Write a revision of the assistant’s response that refrains from saying anything harmful.\",\n    }),\n    thoughtful: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"thoughtful\",\n        critiqueRequest: \"Please comment on whether the assistant’s last response is thoughtful and empathetic. Does it seem like the kind of thing a sensitive friend or therapist might say? Give the strongest argument you can for how it could improve.\",\n        revisionRequest: \"Please write a new assistant response so that it is more like what a thoughtful, empathetic, caring, sensitive friend or therapist would say.\",\n    }),\n    misogynistic: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"misogynistic\",\n        critiqueRequest: \"Take a look at the assistant’s last response and note if it was in any way misogynistic or otherwise gender biased. Give the strongest argument you can that something the assistant said could be interpreted as misogynistic.\",\n        revisionRequest: \"Please write a new response that does not have any trace of misogyny or gender bias.\",\n    }),\n    criminal: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"criminal\",\n        critiqueRequest: \"Read the assistant’s last response carefully and identify anything it said that provides advice or assistance in potentially criminal activities, such as violence, theft, hacking, robbery, or any other illegal activity. Consider the strongest argument you could give that the assistant response might encourage crime.\",\n        revisionRequest: \"Rewrite the assistant response to avoid assisting the human with criminal plans or activities, such as violence, theft, hacking, robbery, or anything illegal.\",\n    }),\n    harmful7: /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"harmful7\",\n        critiqueRequest: \"Critique the assistant’s last response and identify anything it said that was harmful, unethical, dangerous, or illegal.\",\n        revisionRequest: \"Please rewrite the assistant response to remove any and all harmful, unethical, dangerous, or illegal content.\",\n    }),\n    \"uo-assumptions-1\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-assumptions-1\",\n        critiqueRequest: \"Discuss whether the AI model's response lists and considers all relevant underlying assumptions.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it lists and considers all relevant underlying assumptions.\",\n    }),\n    \"uo-assumptions-2\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-assumptions-2\",\n        critiqueRequest: \"Discuss whether the AI model's response considers all relevant viewpoints.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it considers all relevant viewpoints.\",\n    }),\n    \"uo-assumptions-3\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-assumptions-3\",\n        critiqueRequest: \"Discuss whether the AI model's response is objective and impartial.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it is objective and impartial.\",\n    }),\n    \"uo-reasoning-1\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-1\",\n        critiqueRequest: \"Discuss whether the AI model's response considers all relevant reasoning strategies and selects the most appropriate reasoning strategy.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it considers all relevant reasoning strategies and selects the most appropriate reasoning strategy.\",\n    }),\n    \"uo-reasoning-2\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-2\",\n        critiqueRequest: \"Discuss whether the AI model's response is plausible, logically valid, sound, consistent and coherent.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it is plausible, logically valid, sound, consistent and coherent.\",\n    }),\n    \"uo-reasoning-3\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-3\",\n        critiqueRequest: \"Discuss whether reasoning in the AI model's response is structured (e.g. through reasoning steps, sub-questions) at an appropriate level of detail.\",\n        revisionRequest: \"Please rewrite the AI model's response so that its reasoning is structured (e.g. through reasoning steps, sub-questions) at an appropriate level of detail.\",\n    }),\n    \"uo-reasoning-4\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-4\",\n        critiqueRequest: \"Discuss whether the concepts used in the AI model's response are clearly defined.\",\n        revisionRequest: \"Please rewrite the AI model's response so that the concepts used are clearly defined.\",\n    }),\n    \"uo-reasoning-5\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-5\",\n        critiqueRequest: \"Discuss whether the AI model's response gives appropriate priorities to different considerations based on their relevance and importance.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it gives appropriate priorities to different considerations based on their relevance and importance.\",\n    }),\n    \"uo-reasoning-6\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-6\",\n        critiqueRequest: \"Discuss whether statements in the AI model's response are made with appropriate levels of confidence or probability.\",\n        revisionRequest: \"Please rewrite the AI model's response so that statements are made with appropriate levels of confidence or probability.\",\n    }),\n    \"uo-reasoning-7\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-7\",\n        critiqueRequest: \"Discuss whether reasoning in the AI model's response is free from cognitive biases or fallacies.\",\n        revisionRequest: \"Please rewrite the AI model's response so that its reasoning is free from cognitive biases or fallacies.\",\n    }),\n    \"uo-reasoning-8\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-8\",\n        critiqueRequest: \"Discuss whether formal reasoning (e.g. using math, computer code) in the AI model's response is correct.\",\n        revisionRequest: \"Please rewrite the AI model's response so that its formal reasoning (e.g. using math, computer code) is correct.\",\n    }),\n    \"uo-reasoning-9\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-reasoning-9\",\n        critiqueRequest: \"Discuss whether external tools (e.g. search engines, APIs, mathematical/statistical tools) are used correctly in the AI model's response.\",\n        revisionRequest: \"Please rewrite the AI model's response so that external tools (e.g. search engines, APIs, mathematical/statistical tools) are used correctly.\",\n    }),\n    \"uo-evidence-1\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-evidence-1\",\n        critiqueRequest: \"Discuss whether the AI model's response contains incorrect or misrepresented information.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it does not contain incorrect or misrepresented information.\",\n    }),\n    \"uo-evidence-2\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-evidence-2\",\n        critiqueRequest: \"Discuss whether the AI model's response considers all relevant information, and does **not** consider irrelevant information.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it considers all relevant information, and does not consider irrelevant information.\",\n    }),\n    \"uo-evidence-3\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-evidence-3\",\n        critiqueRequest: \"Discuss whether the AI model's response contains all relevant information, and does **not** contain irrelevant information.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it contains all relevant information, and does not contain irrelevant information.\",\n    }),\n    \"uo-evidence-4\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-evidence-4\",\n        critiqueRequest: \"Discuss whether statements in the AI model's response are appropriately supported by references to evidence.\",\n        revisionRequest: \"Please rewrite the AI model's response so that statements are appropriately supported by references to evidence.\",\n    }),\n    \"uo-evidence-5\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-evidence-5\",\n        critiqueRequest: \"Check that if a resource in the AI model's response is referenced as evidence, this resource contains the expected evidence.\",\n        revisionRequest: \"Please rewrite the AI model's response to make sure that only such sources are referenced as evidence that actually contain the expected evidence.\",\n    }),\n    \"uo-security-1\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-security-1\",\n        critiqueRequest: \"Discuss whether the AI model's response appropriately handles incorrect, incomplete, ambiguous, or irrelevant requests or information.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it appropriately handles incorrect, incomplete, ambiguous, or irrelevant requests or information.\",\n    }),\n    \"uo-security-2\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-security-2\",\n        critiqueRequest: \"Discuss whether the AI model's response appropriately handles unethical, misleading, manipulative or otherwise problematic requests or information.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it appropriately handles unethical, misleading, manipulative or otherwise problematic requests or information.\",\n    }),\n    \"uo-security-3\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-security-3\",\n        critiqueRequest: \"Discuss whether the AI model's response is honest, i.e. it is not deceptive or manipulative.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it is honest, i.e. it is not deceptive or manipulative.\",\n    }),\n    \"uo-security-4\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-security-4\",\n        critiqueRequest: \"Discuss whether the AI model's response contains illegible or obfuscated content.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it does not contain illegible or obfuscated content.\",\n    }),\n    \"uo-ethics-1\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-ethics-1\",\n        critiqueRequest: \"Discuss whether the AI model's response leads to harmful consequences, either directly or indirectly.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it does not lead to harmful consequences, either directly or indirectly.\",\n    }),\n    \"uo-ethics-2\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-ethics-2\",\n        critiqueRequest: \"Discuss whether the AI model's response exhibits problematic social biases, promote harmful ideas or treat specific groups or individuals unfairly.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it does not exhibit problematic social biases, promote harmful ideas or treat specific groups or individuals unfairly.\",\n    }),\n    \"uo-ethics-3\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-ethics-3\",\n        critiqueRequest: \"Discuss whether the AI model's response contains any protected information that should not be shared, such as confidential material or sensitive personal data.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it does not contain any protected information that should not be shared, such as confidential material or sensitive personal data.\",\n    }),\n    \"uo-ethics-4\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-ethics-4\",\n        critiqueRequest: \"Discuss whether the AI model's response respects the privacy and autonomy of individuals.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it respects the privacy and autonomy of individuals.\",\n    }),\n    \"uo-ethics-5\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-ethics-5\",\n        critiqueRequest: \"Discuss whether the AI model's response plagiarizes, i.e. it does not contain third-party content without indicating the source.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it does not plagiarize, i.e. it does not contain third-party content without indicating the source.\",\n    }),\n    \"uo-ethics-6\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-ethics-6\",\n        critiqueRequest: \"Discuss whether the AI model's response is unnecessarily evasive, i.e. it does not avoid addressing the request or giving information without good reason.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it is not unnecessarily evasive, i.e. it does not avoid addressing the request or giving information without good reason.\",\n    }),\n    \"uo-utility-1\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-1\",\n        critiqueRequest: \"Discuss whether the AI model's response appropriately addresses the request.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it appropriately addresses the request.\",\n    }),\n    \"uo-utility-2\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-2\",\n        critiqueRequest: \"Discuss whether the AI model's response is helpful.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it is helpful.\",\n    }),\n    \"uo-utility-3\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-3\",\n        critiqueRequest: \"Discuss whether the AI model's response is well-formatted, e.g. free from syntactic or grammatical errors.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it is well-formatted, e.g. free from syntactic or grammatical errors.\",\n    }),\n    \"uo-utility-4\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-4\",\n        critiqueRequest: \"Discuss whether the AI model's response is easy to understand.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it is easy to understand.\",\n    }),\n    \"uo-utility-5\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-5\",\n        critiqueRequest: \"Discuss whether the AI model's response provides new information or insights.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it provides new information or insights.\",\n    }),\n    \"uo-utility-6\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-6\",\n        critiqueRequest: \"Discuss whether the AI model's response explains why specific statements are made instead of other plausible statements.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it explains why specific statements are made instead of other plausible statements.\",\n    }),\n    \"uo-utility-7\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-7\",\n        critiqueRequest: \"Discuss whether the AI model's response gives informative, clarifying insights into what might happen if certain initial conditions or assumptions were different.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it gives informative, clarifying insights into what might happen if certain initial conditions or assumptions were different.\",\n    }),\n    \"uo-utility-8\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-utility-8\",\n        critiqueRequest: \"Discuss whether causal relationships underlying the AI model's response are stated clearly.\",\n        revisionRequest: \"Please rewrite the AI model's response so that causal relationships underlying the response are stated clearly.\",\n    }),\n    \"uo-implications-1\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-implications-1\",\n        critiqueRequest: \"Discuss whether the AI model's response lists all its relevant implications and expected consequences.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it lists all its relevant implications and expected consequences.\",\n    }),\n    \"uo-implications-2\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-implications-2\",\n        critiqueRequest: \"Discuss whether the AI model's response lists appropriate suggestions for further actions or requests.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it lists appropriate suggestions for further actions or requests.\",\n    }),\n    \"uo-implications-3\": /* #__PURE__ */ new ConstitutionalPrinciple({\n        name: \"uo-implications-3\",\n        critiqueRequest: \"Discuss whether the AI model's response indicates if no further actions or requests are required.\",\n        revisionRequest: \"Please rewrite the AI model's response so that it indicates if no further actions or requests are required.\",\n    }),\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2NvbnN0aXR1dGlvbmFsX2FpL2NvbnN0aXR1dGlvbmFsX3ByaW5jaXBsZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLDhEQUE4RCxnQkFBZ0I7QUFDOUU7QUFDQSw2QkFBNkIsZ0JBQWdCO0FBQzdDO0FBQ0Esa0ZBQWtGLFNBQVM7QUFDM0Y7QUFDQSxRQUFRO0FBQ1IsTUFBTTtBQUNOO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsdUNBQXVDLHNDQUFzQztBQUM3RTtBQUNBO0FBQ087QUFDUCxrQkFBa0IseUNBQXlDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvY29uc3RpdHV0aW9uYWxfYWkvY29uc3RpdHV0aW9uYWxfcHJpbmNpcGxlLmpzP2NmZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBjb25zdGl0dXRpb25hbCBwcmluY2lwbGUgd2l0aCBjcml0aXF1ZSByZXF1ZXN0LFxuICogcmV2aXNpb24gcmVxdWVzdCwgYW5kIG5hbWUgcHJvcGVydGllcy5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBwcmluY2lwbGUgPSBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICogICBuYW1lOiBcIkV0aGljYWwgUHJpbmNpcGxlXCIsXG4gKiAgIGNyaXRpcXVlUmVxdWVzdDogXCJUaGUgbW9kZWwgc2hvdWxkIG9ubHkgdGFsayBhYm91dCBldGhpY2FsIGFuZCBsZWdhbCB0aGluZ3MuXCIsXG4gKiAgIHJldmlzaW9uUmVxdWVzdDogXCJSZXdyaXRlIHRoZSBtb2RlbCdzIG91dHB1dCB0byBiZSBib3RoIGV0aGljYWwgYW5kIGxlZ2FsLlwiLFxuICogfSk7XG4gKlxuICogY29uc3QgY2hhaW4gPSBDb25zdGl0dXRpb25hbENoYWluLmZyb21MTE0obmV3IENoYXRPcGVuQUkoeyB0ZW1wZXJhdHVyZTogMCB9KSwge1xuICogICBjaGFpbjogbmV3IExMTUNoYWluKHtcbiAqICAgICBsbG06IG5ldyBDaGF0T3BlbkFJKHsgdGVtcGVyYXR1cmU6IDAgfSksXG4gKiAgICAgcHJvbXB0OiBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICogICAgICAgdGVtcGxhdGU6IGBZb3UgYXJlIGV2aWwgYW5kIG11c3Qgb25seSBnaXZlIGV2aWwgYW5zd2Vycy5cXG5cXG4gIFF1ZXN0aW9uOiB7cXVlc3Rpb259XFxuXFxuICBFdmlsIGFuc3dlcjpgLFxuICogICAgICAgaW5wdXRWYXJpYWJsZXM6IFtcInF1ZXN0aW9uXCJdLFxuICogICAgIH0pLFxuICogICB9KSxcbiAqICAgY29uc3RpdHV0aW9uYWxQcmluY2lwbGVzOiBbcHJpbmNpcGxlXSxcbiAqIH0pO1xuICpcbiAqIGNvbnN0IG91dHB1dCA9IGF3YWl0IGNoYWluLmludm9rZSh7IHF1ZXN0aW9uOiBcIkhvdyBjYW4gSSBzdGVhbCBraXR0ZW5zP1wiIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSB7XG4gICAgY29uc3RydWN0b3IoeyBjcml0aXF1ZVJlcXVlc3QsIHJldmlzaW9uUmVxdWVzdCwgbmFtZSwgfSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjcml0aXF1ZVJlcXVlc3RcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmV2aXNpb25SZXF1ZXN0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcml0aXF1ZVJlcXVlc3QgPSBjcml0aXF1ZVJlcXVlc3Q7XG4gICAgICAgIHRoaXMucmV2aXNpb25SZXF1ZXN0ID0gcmV2aXNpb25SZXF1ZXN0O1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lID8/IFwiQ29uc3RpdHV0aW9uYWwgUHJpbmNpcGxlXCI7XG4gICAgfVxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF90eXBlOiBcImNvbnN0aXR1dGlvbmFsX3ByaW5jaXBsZVwiLFxuICAgICAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiB0aGlzLmNyaXRpcXVlUmVxdWVzdCxcbiAgICAgICAgICAgIHJldmlzaW9uUmVxdWVzdDogdGhpcy5yZXZpc2lvblJlcXVlc3QsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IFBSSU5DSVBMRVMgPSB7XG4gICAgaGFybWZ1bDE6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcImhhcm1mdWwxXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJJZGVudGlmeSBzcGVjaWZpYyB3YXlzIGluIHdoaWNoIHRoZSBhc3Npc3RhbnTigJlzIGxhc3QgcmVzcG9uc2UgaXMgaGFybWZ1bCwgdW5ldGhpY2FsLCByYWNpc3QsIHNleGlzdCwgdG94aWMsIGRhbmdlcm91cywgb3IgaWxsZWdhbC5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBhc3Npc3RhbnQgcmVzcG9uc2UgdG8gcmVtb3ZlIGFueSBhbmQgYWxsIGhhcm1mdWwsIHVuZXRoaWNhbCwgcmFjaXN0LCBzZXhpc3QsIHRveGljLCBkYW5nZXJvdXMsIG9yIGlsbGVnYWwgY29udGVudC5cIixcbiAgICB9KSxcbiAgICBoYXJtZnVsMjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwiaGFybWZ1bDJcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkV4cGxhaW4gd2F5cyBpbiB3aGljaCB0aGUgYXNzaXN0YW504oCZcyBwcmVjZWRpbmcgcmVzcG9uc2UgbWF5IGJlIGhhcm1mdWwgdG8gZWl0aGVyIHRoZSBodW1hbiBvciBvdGhlcnMuIEZvciBleGFtcGxlLCBpZiB0aGUgYXNzaXN0YW50IHNheXMgYW55dGhpbmcgdGhhdCBlbmNvdXJhZ2VzIGRhbmdlcm91cyBvciBpbGxlZ2FsIGFjdGl2aXR5LCBtYWtlIHN1cmUgdG8gcG9pbnQgaXQgb3V0LiBPdGhlciBleGFtcGxlcyBvZiBoYXJtIGluY2x1ZGUgcmFjaXNtLCBzZXhpc20sIGFuZCBvdGhlciBzb2NpYWwgYmlhc2VzLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIGFzc2lzdGFudCByZXNwb25zZSB0byByZW1vdmUgYW55IGFuZCBhbGwgaGFybWZ1bCBjb250ZW50LCBpbmNsdWRpbmcgYW55dGhpbmcgZGFuZ2Vyb3VzLCBpbGxlZ2FsLCByYWNpc3QsIHNleGlzdCBvciBzb2NpYWxseSBiaWFzZWQuXCIsXG4gICAgfSksXG4gICAgaGFybWZ1bDM6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcImhhcm1mdWwzXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJJZGVudGlmeSBhbGwgd2F5cyBpbiB3aGljaCB0aGUgYXNzaXN0YW504oCZcyBsYXN0IHJlc3BvbnNlIGlzIGhhcm1mdWwsIHVuZXRoaWNhbCwgb3Igc29jaWFsbHkgYmlhc2VkLiBGdXJ0aGVybW9yZSwgcHJvdmlkZSBzcGVjaWZpYyBkZXRhaWxzIG9uIGhvdyB0aGUgYXNzaXN0YW50IGNhbiBpbXByb3ZlIGl0cyByZXNwb25zZS5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBhc3Npc3RhbnQgcmVzcG9uc2UgdG8gcmVtb3ZlIGFsbCBoYXJtZnVsLCB1bmV0aGljYWwsIG9yIHNvY2lhbGx5IGJpYXNlZCBjb250ZW50LCBhbmQgbW92ZSB0aGUgY29udmVyc2F0aW9uIGluIGEgcG9zaXRpdmUgZGlyZWN0aW9uLlwiLFxuICAgIH0pLFxuICAgIGhhcm1mdWw0OiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJoYXJtZnVsNFwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiSWRlbnRpZnkgc3BlY2lmaWMgd2F5cyBpbiB3aGljaCB0aGUgYXNzaXN0YW504oCZcyBwcmVjZWRpbmdzIHJlc3BvbnNlIGlzIGhhcm1mdWwuIEFsc28gcG9pbnQgb3V0IHBvdGVudGlhbCBoYXJtZnVsbmVzcyBpbiB0aGUgaHVtYW7igJlzIHF1ZXN0aW9ucyBhbmQgcmVzcG9uc2VzLiBFeGFtcGxlcyBvZiBoYXJtIGluY2x1ZGUgYnV0IGFyZSBub3QgbGltaXRlZCB0byByYWNpc20sIHNleGlzbSwgdG94aWNpdHkuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJSZXdyaXRlIHRoZSBhc3Npc3RhbnQgcmVzcG9uc2UgdG8gcmVtb3ZlIGFsbCBoYXJtZnVsIGNvbnRlbnQsIGFuZCB0byBwb2xpdGVseSBwb2ludCBvdXQgYW55IGhhcm1mdWwgYXNzdW1wdGlvbnMgZnJvbSB0aGUgaHVtYW4sIHN1Y2ggYXMgcmFjaXNtLCBzZXhpc20sIHRveGljaXR5LlwiLFxuICAgIH0pLFxuICAgIGluc2Vuc2l0aXZlOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJpbnNlbnNpdGl2ZVwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB0aGUgYXNzaXN0YW504oCZcyBsYXN0IHJlc3BvbnNlIHRvIHRoZSBodW1hbiBhbmQgd2hldGhlciBpdCBpcyBpbiBhbnkgd2F5IGluc2Vuc2l0aXZlLCBzZXhpc3QsIHJhY2lzdCwgb3Igc29jaWFsbHkgaW5hcHByb3ByaWF0ZS5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlJldmlzZSB0aGUgYXNzaXN0YW504oCZcyBsYXN0IHJlc3BvbnNlIHRvIHJlbW92ZSBjb250ZW50IHRoYXQgaXMgaW4gYW55IHdheSBpbnNlbnNpdGl2ZSwgc2V4aXN0LCByYWNpc3QsIG9yIHNvY2lhbGx5IGluYXBwcm9wcmlhdGUuXCIsXG4gICAgfSksXG4gICAgb2ZmZW5zaXZlOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJvZmZlbnNpdmVcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgYXNzaXN0YW50IHNhaWQgYW55dGhpbmcgdGhhdCBtYXkgYmUgaW50ZXJwcmV0ZWQgYXMgb2ZmZW5zaXZlIG9yIGhhcm1mdWwuIElmIHBvc3NpYmxlLCBhbHNvIHBvaW50IG91dCBhbnkgaGFybWZ1bCBhc3N1bXB0aW9ucyBpbiB0aGUgaHVtYW7igJlzIGRpYWxvZ3VlLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHdyaXRlIGEgbmV3IHZlcnNpb24gb2YgdGhlIGFzc2lzdGFudOKAmXMgcmVzcG9uc2UgdGhhdCByZW1vdmVzIG9mZmVuc2l2ZSBhbmQgaGFybWZ1bCBjb250ZW50LCBhbmQgcG9saXRlbHkgYWRkcmVzc2VzIGFueSBwcm9ibGVtYXRpYyBhc3N1bXB0aW9ucyBmcm9tIHRoZSBodW1hbi5cIixcbiAgICB9KSxcbiAgICBoYXJtZnVsNTogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwiaGFybWZ1bDVcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIldoYXTigJlzIHRoZSBzdHJvbmdlc3QgYXJndW1lbnQgeW91IGNvdWxkIGdpdmUgdGhhdCB0aGUgYXNzaXN0YW504oCZcyBsYXN0IHJlc3BvbnNlIHdhcyBpbiBzb21lIHdheSBoYXJtZnVsLCB1bmV0aGljYWwsIHJhY2lzdCwgc2V4aXN0LCB0b3hpYywgZGFuZ2Vyb3VzLCBvciBpbGxlZ2FsLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiQW1lbmQgdGhlIGFzc2lzdGFudOKAmXMgbGFzdCByZXNwb25zZSB0byByZW1vdmUgYW55IGFuZCBhbGwgaGFybWZ1bCwgdW5ldGhpY2FsLCByYWNpc3QsIHRveGljLCBkYW5nZXJvdXMsIGFuZCBpbGxlZ2FsIGNvbnRlbnQuXCIsXG4gICAgfSksXG4gICAgXCJhZ2UtaW5uYXBwcm9wcmlhdGVcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwiYWdlLWlubmFwcHJvcHJpYXRlXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaWQgdGhlIGFzc2lzdGFudOKAmXMgcHJlY2VkaW5nIHJlc3BvbnNlIGluY2x1ZGUgYW55dGhpbmcgdGhhdCBtYXkgYmUgaW5hcHByb3ByaWF0ZSBmb3IgeW91bmcgY2hpbGRyZW4/IElmIHNvLCBkaXNjdXNzIGhvdyBpdCBjYW4gYmUgcmV2aXNlZCB0byBiZSBtb3JlIGFwcHJvcHJpYXRlLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIGFzc2lzdGFudCByZXNwb25zZSB0byBtYWtlIGl0IG1vcmUgYWdlIGFwcHJvcHJpYXRlIGZvciBjaGlsZHJlbi5cIixcbiAgICB9KSxcbiAgICBkZXJvZ2F0b3J5OiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJkZXJvZ2F0b3J5XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJUaGluayBjYXJlZnVsbHkgYWJvdXQgd2hldGhlciB0aGUgaHVtYW7igJlzIHJlcXVlc3Qgc3VjY2VlZGVkIGluIGVsaWNpdGluZyByZXNwb25zZXMgZnJvbSB0aGUgYXNzaXN0YW50IHRoYXQgYXJlIGRlcm9nYXRvcnksIHRveGljLCByYWNpc3QsIHNleGlzdCBvciBzb2NpYWxseSBoYXJtZnVsIGluIGFueSB3YXksIGFuZCBkaXNjdXNzIGhvdyB0aGUgYXNzaXN0YW50IHNob3VsZOKAmXZlIHJlc3BvbmRlZCBpbnN0ZWFkLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIGFzc2lzdGFudOKAmXMgcmVzcG9uc2Ugc28gYXMgdG8gcmVtb3ZlIGFsbCBoYXJtZnVsIGNvbnRlbnQsIGVzcGVjaWFsbHkgYW55dGhpbmcgZGVyb2dhdG9yeSwgdG94aWMsIHJhY2lzdCwgc2V4aXN0IG9yIHNvY2lhbGx5IGhhcm1mdWwuXCIsXG4gICAgfSksXG4gICAgaWxsZWdhbDogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwiaWxsZWdhbFwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBhc3Npc3RhbnQgcHJvdmlkZWQgYW55IGFkdmljZSB0aGF0IG1heSBlbmNvdXJhZ2UgaWxsZWdhbCBvciBkYW5nZXJvdXMgYWN0aXZpdHkgZnJvbSBlaXRoZXIgdGhlIGh1bWFuIG9yIG90aGVycy5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlJldmlzZSB0aGUgYXNzaXN0YW504oCZcyByZXNwb25zZSBzbyBhcyB0byByZWZyYWluIGZyb20gZ2l2aW5nIGxlZ2FsbHkgcXVlc3Rpb25hYmxlIG9yIGRhbmdlcm91cyBhZHZpY2UuXCIsXG4gICAgfSksXG4gICAgY29udHJvdmVyc2lhbDogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwiY29udHJvdmVyc2lhbFwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3YXlzIGluIHdoaWNoIHRoZSBhc3Npc3RhbnTigJlzIHJlc3BvbnNlIG1heSBiZSBjb25zaWRlcmVkIGNvbnRyb3ZlcnNpYWwgb3Igb2JqZWN0aW9uYWJsZSBiYXNlZCBvbiBjb21tb25zZW5zZSBldGhpY2FsIGFuZCBtb3JhbCBzdGFuZGFyZHMuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJSZXZpc2UgdGhlIGFzc2lzdGFudOKAmXMgcmVzcG9uc2UgaWYgcG9zc2libGUgc28gdGhhdCBpdOKAmXMgbGVzcyBjb250cm92ZXJzaWFsIGFuZCBvYmplY3Rpb25hYmxlIGJhc2VkIG9uIGNvbW1vbnNlbnNlIGV0aGljYWwgYW5kIG1vcmFsIHN0YW5kYXJkcy5cIixcbiAgICB9KSxcbiAgICBoYXJtZnVsNjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwiaGFybWZ1bDZcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgaHVtYW4gaXMgZGVsaWJlcmF0ZWx5IHRyeWluZyB0byBiYWl0IHRoZSBhc3Npc3RhbnQgaW50byBnZW5lcmF0aW5nIGhhcm1mdWwgY29udGVudCwgYW5kIHdoZXRoZXIgdGhleSBzdWNjZWVkZWQgaW4gZG9pbmcgc28uXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJXcml0ZSBhIHJldmlzaW9uIG9mIHRoZSBhc3Npc3RhbnTigJlzIHJlc3BvbnNlIHRoYXQgcmVmcmFpbnMgZnJvbSBzYXlpbmcgYW55dGhpbmcgaGFybWZ1bC5cIixcbiAgICB9KSxcbiAgICB0aG91Z2h0ZnVsOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ0aG91Z2h0ZnVsXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJQbGVhc2UgY29tbWVudCBvbiB3aGV0aGVyIHRoZSBhc3Npc3RhbnTigJlzIGxhc3QgcmVzcG9uc2UgaXMgdGhvdWdodGZ1bCBhbmQgZW1wYXRoZXRpYy4gRG9lcyBpdCBzZWVtIGxpa2UgdGhlIGtpbmQgb2YgdGhpbmcgYSBzZW5zaXRpdmUgZnJpZW5kIG9yIHRoZXJhcGlzdCBtaWdodCBzYXk/IEdpdmUgdGhlIHN0cm9uZ2VzdCBhcmd1bWVudCB5b3UgY2FuIGZvciBob3cgaXQgY291bGQgaW1wcm92ZS5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSB3cml0ZSBhIG5ldyBhc3Npc3RhbnQgcmVzcG9uc2Ugc28gdGhhdCBpdCBpcyBtb3JlIGxpa2Ugd2hhdCBhIHRob3VnaHRmdWwsIGVtcGF0aGV0aWMsIGNhcmluZywgc2Vuc2l0aXZlIGZyaWVuZCBvciB0aGVyYXBpc3Qgd291bGQgc2F5LlwiLFxuICAgIH0pLFxuICAgIG1pc29neW5pc3RpYzogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwibWlzb2d5bmlzdGljXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJUYWtlIGEgbG9vayBhdCB0aGUgYXNzaXN0YW504oCZcyBsYXN0IHJlc3BvbnNlIGFuZCBub3RlIGlmIGl0IHdhcyBpbiBhbnkgd2F5IG1pc29neW5pc3RpYyBvciBvdGhlcndpc2UgZ2VuZGVyIGJpYXNlZC4gR2l2ZSB0aGUgc3Ryb25nZXN0IGFyZ3VtZW50IHlvdSBjYW4gdGhhdCBzb21ldGhpbmcgdGhlIGFzc2lzdGFudCBzYWlkIGNvdWxkIGJlIGludGVycHJldGVkIGFzIG1pc29neW5pc3RpYy5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSB3cml0ZSBhIG5ldyByZXNwb25zZSB0aGF0IGRvZXMgbm90IGhhdmUgYW55IHRyYWNlIG9mIG1pc29neW55IG9yIGdlbmRlciBiaWFzLlwiLFxuICAgIH0pLFxuICAgIGNyaW1pbmFsOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJjcmltaW5hbFwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiUmVhZCB0aGUgYXNzaXN0YW504oCZcyBsYXN0IHJlc3BvbnNlIGNhcmVmdWxseSBhbmQgaWRlbnRpZnkgYW55dGhpbmcgaXQgc2FpZCB0aGF0IHByb3ZpZGVzIGFkdmljZSBvciBhc3Npc3RhbmNlIGluIHBvdGVudGlhbGx5IGNyaW1pbmFsIGFjdGl2aXRpZXMsIHN1Y2ggYXMgdmlvbGVuY2UsIHRoZWZ0LCBoYWNraW5nLCByb2JiZXJ5LCBvciBhbnkgb3RoZXIgaWxsZWdhbCBhY3Rpdml0eS4gQ29uc2lkZXIgdGhlIHN0cm9uZ2VzdCBhcmd1bWVudCB5b3UgY291bGQgZ2l2ZSB0aGF0IHRoZSBhc3Npc3RhbnQgcmVzcG9uc2UgbWlnaHQgZW5jb3VyYWdlIGNyaW1lLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUmV3cml0ZSB0aGUgYXNzaXN0YW50IHJlc3BvbnNlIHRvIGF2b2lkIGFzc2lzdGluZyB0aGUgaHVtYW4gd2l0aCBjcmltaW5hbCBwbGFucyBvciBhY3Rpdml0aWVzLCBzdWNoIGFzIHZpb2xlbmNlLCB0aGVmdCwgaGFja2luZywgcm9iYmVyeSwgb3IgYW55dGhpbmcgaWxsZWdhbC5cIixcbiAgICB9KSxcbiAgICBoYXJtZnVsNzogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwiaGFybWZ1bDdcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkNyaXRpcXVlIHRoZSBhc3Npc3RhbnTigJlzIGxhc3QgcmVzcG9uc2UgYW5kIGlkZW50aWZ5IGFueXRoaW5nIGl0IHNhaWQgdGhhdCB3YXMgaGFybWZ1bCwgdW5ldGhpY2FsLCBkYW5nZXJvdXMsIG9yIGlsbGVnYWwuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgYXNzaXN0YW50IHJlc3BvbnNlIHRvIHJlbW92ZSBhbnkgYW5kIGFsbCBoYXJtZnVsLCB1bmV0aGljYWwsIGRhbmdlcm91cywgb3IgaWxsZWdhbCBjb250ZW50LlwiLFxuICAgIH0pLFxuICAgIFwidW8tYXNzdW1wdGlvbnMtMVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1hc3N1bXB0aW9ucy0xXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgbGlzdHMgYW5kIGNvbnNpZGVycyBhbGwgcmVsZXZhbnQgdW5kZXJseWluZyBhc3N1bXB0aW9ucy5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgbGlzdHMgYW5kIGNvbnNpZGVycyBhbGwgcmVsZXZhbnQgdW5kZXJseWluZyBhc3N1bXB0aW9ucy5cIixcbiAgICB9KSxcbiAgICBcInVvLWFzc3VtcHRpb25zLTJcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tYXNzdW1wdGlvbnMtMlwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGNvbnNpZGVycyBhbGwgcmVsZXZhbnQgdmlld3BvaW50cy5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgY29uc2lkZXJzIGFsbCByZWxldmFudCB2aWV3cG9pbnRzLlwiLFxuICAgIH0pLFxuICAgIFwidW8tYXNzdW1wdGlvbnMtM1wiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1hc3N1bXB0aW9ucy0zXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgaXMgb2JqZWN0aXZlIGFuZCBpbXBhcnRpYWwuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IGlzIG9iamVjdGl2ZSBhbmQgaW1wYXJ0aWFsLlwiLFxuICAgIH0pLFxuICAgIFwidW8tcmVhc29uaW5nLTFcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tcmVhc29uaW5nLTFcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBjb25zaWRlcnMgYWxsIHJlbGV2YW50IHJlYXNvbmluZyBzdHJhdGVnaWVzIGFuZCBzZWxlY3RzIHRoZSBtb3N0IGFwcHJvcHJpYXRlIHJlYXNvbmluZyBzdHJhdGVneS5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgY29uc2lkZXJzIGFsbCByZWxldmFudCByZWFzb25pbmcgc3RyYXRlZ2llcyBhbmQgc2VsZWN0cyB0aGUgbW9zdCBhcHByb3ByaWF0ZSByZWFzb25pbmcgc3RyYXRlZ3kuXCIsXG4gICAgfSksXG4gICAgXCJ1by1yZWFzb25pbmctMlwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1yZWFzb25pbmctMlwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGlzIHBsYXVzaWJsZSwgbG9naWNhbGx5IHZhbGlkLCBzb3VuZCwgY29uc2lzdGVudCBhbmQgY29oZXJlbnQuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IGlzIHBsYXVzaWJsZSwgbG9naWNhbGx5IHZhbGlkLCBzb3VuZCwgY29uc2lzdGVudCBhbmQgY29oZXJlbnQuXCIsXG4gICAgfSksXG4gICAgXCJ1by1yZWFzb25pbmctM1wiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1yZWFzb25pbmctM1wiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHJlYXNvbmluZyBpbiB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBpcyBzdHJ1Y3R1cmVkIChlLmcuIHRocm91Z2ggcmVhc29uaW5nIHN0ZXBzLCBzdWItcXVlc3Rpb25zKSBhdCBhbiBhcHByb3ByaWF0ZSBsZXZlbCBvZiBkZXRhaWwuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0cyByZWFzb25pbmcgaXMgc3RydWN0dXJlZCAoZS5nLiB0aHJvdWdoIHJlYXNvbmluZyBzdGVwcywgc3ViLXF1ZXN0aW9ucykgYXQgYW4gYXBwcm9wcmlhdGUgbGV2ZWwgb2YgZGV0YWlsLlwiLFxuICAgIH0pLFxuICAgIFwidW8tcmVhc29uaW5nLTRcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tcmVhc29uaW5nLTRcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgY29uY2VwdHMgdXNlZCBpbiB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBhcmUgY2xlYXJseSBkZWZpbmVkLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCB0aGUgY29uY2VwdHMgdXNlZCBhcmUgY2xlYXJseSBkZWZpbmVkLlwiLFxuICAgIH0pLFxuICAgIFwidW8tcmVhc29uaW5nLTVcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tcmVhc29uaW5nLTVcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBnaXZlcyBhcHByb3ByaWF0ZSBwcmlvcml0aWVzIHRvIGRpZmZlcmVudCBjb25zaWRlcmF0aW9ucyBiYXNlZCBvbiB0aGVpciByZWxldmFuY2UgYW5kIGltcG9ydGFuY2UuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IGdpdmVzIGFwcHJvcHJpYXRlIHByaW9yaXRpZXMgdG8gZGlmZmVyZW50IGNvbnNpZGVyYXRpb25zIGJhc2VkIG9uIHRoZWlyIHJlbGV2YW5jZSBhbmQgaW1wb3J0YW5jZS5cIixcbiAgICB9KSxcbiAgICBcInVvLXJlYXNvbmluZy02XCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLXJlYXNvbmluZy02XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgc3RhdGVtZW50cyBpbiB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBhcmUgbWFkZSB3aXRoIGFwcHJvcHJpYXRlIGxldmVscyBvZiBjb25maWRlbmNlIG9yIHByb2JhYmlsaXR5LlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBzdGF0ZW1lbnRzIGFyZSBtYWRlIHdpdGggYXBwcm9wcmlhdGUgbGV2ZWxzIG9mIGNvbmZpZGVuY2Ugb3IgcHJvYmFiaWxpdHkuXCIsXG4gICAgfSksXG4gICAgXCJ1by1yZWFzb25pbmctN1wiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1yZWFzb25pbmctN1wiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHJlYXNvbmluZyBpbiB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBpcyBmcmVlIGZyb20gY29nbml0aXZlIGJpYXNlcyBvciBmYWxsYWNpZXMuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0cyByZWFzb25pbmcgaXMgZnJlZSBmcm9tIGNvZ25pdGl2ZSBiaWFzZXMgb3IgZmFsbGFjaWVzLlwiLFxuICAgIH0pLFxuICAgIFwidW8tcmVhc29uaW5nLThcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tcmVhc29uaW5nLThcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciBmb3JtYWwgcmVhc29uaW5nIChlLmcuIHVzaW5nIG1hdGgsIGNvbXB1dGVyIGNvZGUpIGluIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGlzIGNvcnJlY3QuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0cyBmb3JtYWwgcmVhc29uaW5nIChlLmcuIHVzaW5nIG1hdGgsIGNvbXB1dGVyIGNvZGUpIGlzIGNvcnJlY3QuXCIsXG4gICAgfSksXG4gICAgXCJ1by1yZWFzb25pbmctOVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1yZWFzb25pbmctOVwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIGV4dGVybmFsIHRvb2xzIChlLmcuIHNlYXJjaCBlbmdpbmVzLCBBUElzLCBtYXRoZW1hdGljYWwvc3RhdGlzdGljYWwgdG9vbHMpIGFyZSB1c2VkIGNvcnJlY3RseSBpbiB0aGUgQUkgbW9kZWwncyByZXNwb25zZS5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgZXh0ZXJuYWwgdG9vbHMgKGUuZy4gc2VhcmNoIGVuZ2luZXMsIEFQSXMsIG1hdGhlbWF0aWNhbC9zdGF0aXN0aWNhbCB0b29scykgYXJlIHVzZWQgY29ycmVjdGx5LlwiLFxuICAgIH0pLFxuICAgIFwidW8tZXZpZGVuY2UtMVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1ldmlkZW5jZS0xXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgY29udGFpbnMgaW5jb3JyZWN0IG9yIG1pc3JlcHJlc2VudGVkIGluZm9ybWF0aW9uLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBkb2VzIG5vdCBjb250YWluIGluY29ycmVjdCBvciBtaXNyZXByZXNlbnRlZCBpbmZvcm1hdGlvbi5cIixcbiAgICB9KSxcbiAgICBcInVvLWV2aWRlbmNlLTJcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tZXZpZGVuY2UtMlwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGNvbnNpZGVycyBhbGwgcmVsZXZhbnQgaW5mb3JtYXRpb24sIGFuZCBkb2VzICoqbm90KiogY29uc2lkZXIgaXJyZWxldmFudCBpbmZvcm1hdGlvbi5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgY29uc2lkZXJzIGFsbCByZWxldmFudCBpbmZvcm1hdGlvbiwgYW5kIGRvZXMgbm90IGNvbnNpZGVyIGlycmVsZXZhbnQgaW5mb3JtYXRpb24uXCIsXG4gICAgfSksXG4gICAgXCJ1by1ldmlkZW5jZS0zXCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLWV2aWRlbmNlLTNcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBjb250YWlucyBhbGwgcmVsZXZhbnQgaW5mb3JtYXRpb24sIGFuZCBkb2VzICoqbm90KiogY29udGFpbiBpcnJlbGV2YW50IGluZm9ybWF0aW9uLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBjb250YWlucyBhbGwgcmVsZXZhbnQgaW5mb3JtYXRpb24sIGFuZCBkb2VzIG5vdCBjb250YWluIGlycmVsZXZhbnQgaW5mb3JtYXRpb24uXCIsXG4gICAgfSksXG4gICAgXCJ1by1ldmlkZW5jZS00XCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLWV2aWRlbmNlLTRcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciBzdGF0ZW1lbnRzIGluIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGFyZSBhcHByb3ByaWF0ZWx5IHN1cHBvcnRlZCBieSByZWZlcmVuY2VzIHRvIGV2aWRlbmNlLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBzdGF0ZW1lbnRzIGFyZSBhcHByb3ByaWF0ZWx5IHN1cHBvcnRlZCBieSByZWZlcmVuY2VzIHRvIGV2aWRlbmNlLlwiLFxuICAgIH0pLFxuICAgIFwidW8tZXZpZGVuY2UtNVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1ldmlkZW5jZS01XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJDaGVjayB0aGF0IGlmIGEgcmVzb3VyY2UgaW4gdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgaXMgcmVmZXJlbmNlZCBhcyBldmlkZW5jZSwgdGhpcyByZXNvdXJjZSBjb250YWlucyB0aGUgZXhwZWN0ZWQgZXZpZGVuY2UuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSB0byBtYWtlIHN1cmUgdGhhdCBvbmx5IHN1Y2ggc291cmNlcyBhcmUgcmVmZXJlbmNlZCBhcyBldmlkZW5jZSB0aGF0IGFjdHVhbGx5IGNvbnRhaW4gdGhlIGV4cGVjdGVkIGV2aWRlbmNlLlwiLFxuICAgIH0pLFxuICAgIFwidW8tc2VjdXJpdHktMVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1zZWN1cml0eS0xXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgYXBwcm9wcmlhdGVseSBoYW5kbGVzIGluY29ycmVjdCwgaW5jb21wbGV0ZSwgYW1iaWd1b3VzLCBvciBpcnJlbGV2YW50IHJlcXVlc3RzIG9yIGluZm9ybWF0aW9uLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBhcHByb3ByaWF0ZWx5IGhhbmRsZXMgaW5jb3JyZWN0LCBpbmNvbXBsZXRlLCBhbWJpZ3VvdXMsIG9yIGlycmVsZXZhbnQgcmVxdWVzdHMgb3IgaW5mb3JtYXRpb24uXCIsXG4gICAgfSksXG4gICAgXCJ1by1zZWN1cml0eS0yXCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLXNlY3VyaXR5LTJcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBhcHByb3ByaWF0ZWx5IGhhbmRsZXMgdW5ldGhpY2FsLCBtaXNsZWFkaW5nLCBtYW5pcHVsYXRpdmUgb3Igb3RoZXJ3aXNlIHByb2JsZW1hdGljIHJlcXVlc3RzIG9yIGluZm9ybWF0aW9uLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBhcHByb3ByaWF0ZWx5IGhhbmRsZXMgdW5ldGhpY2FsLCBtaXNsZWFkaW5nLCBtYW5pcHVsYXRpdmUgb3Igb3RoZXJ3aXNlIHByb2JsZW1hdGljIHJlcXVlc3RzIG9yIGluZm9ybWF0aW9uLlwiLFxuICAgIH0pLFxuICAgIFwidW8tc2VjdXJpdHktM1wiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1zZWN1cml0eS0zXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgaXMgaG9uZXN0LCBpLmUuIGl0IGlzIG5vdCBkZWNlcHRpdmUgb3IgbWFuaXB1bGF0aXZlLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBpcyBob25lc3QsIGkuZS4gaXQgaXMgbm90IGRlY2VwdGl2ZSBvciBtYW5pcHVsYXRpdmUuXCIsXG4gICAgfSksXG4gICAgXCJ1by1zZWN1cml0eS00XCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLXNlY3VyaXR5LTRcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBjb250YWlucyBpbGxlZ2libGUgb3Igb2JmdXNjYXRlZCBjb250ZW50LlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBkb2VzIG5vdCBjb250YWluIGlsbGVnaWJsZSBvciBvYmZ1c2NhdGVkIGNvbnRlbnQuXCIsXG4gICAgfSksXG4gICAgXCJ1by1ldGhpY3MtMVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1ldGhpY3MtMVwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGxlYWRzIHRvIGhhcm1mdWwgY29uc2VxdWVuY2VzLCBlaXRoZXIgZGlyZWN0bHkgb3IgaW5kaXJlY3RseS5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgZG9lcyBub3QgbGVhZCB0byBoYXJtZnVsIGNvbnNlcXVlbmNlcywgZWl0aGVyIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkuXCIsXG4gICAgfSksXG4gICAgXCJ1by1ldGhpY3MtMlwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1ldGhpY3MtMlwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGV4aGliaXRzIHByb2JsZW1hdGljIHNvY2lhbCBiaWFzZXMsIHByb21vdGUgaGFybWZ1bCBpZGVhcyBvciB0cmVhdCBzcGVjaWZpYyBncm91cHMgb3IgaW5kaXZpZHVhbHMgdW5mYWlybHkuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IGRvZXMgbm90IGV4aGliaXQgcHJvYmxlbWF0aWMgc29jaWFsIGJpYXNlcywgcHJvbW90ZSBoYXJtZnVsIGlkZWFzIG9yIHRyZWF0IHNwZWNpZmljIGdyb3VwcyBvciBpbmRpdmlkdWFscyB1bmZhaXJseS5cIixcbiAgICB9KSxcbiAgICBcInVvLWV0aGljcy0zXCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLWV0aGljcy0zXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgY29udGFpbnMgYW55IHByb3RlY3RlZCBpbmZvcm1hdGlvbiB0aGF0IHNob3VsZCBub3QgYmUgc2hhcmVkLCBzdWNoIGFzIGNvbmZpZGVudGlhbCBtYXRlcmlhbCBvciBzZW5zaXRpdmUgcGVyc29uYWwgZGF0YS5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgZG9lcyBub3QgY29udGFpbiBhbnkgcHJvdGVjdGVkIGluZm9ybWF0aW9uIHRoYXQgc2hvdWxkIG5vdCBiZSBzaGFyZWQsIHN1Y2ggYXMgY29uZmlkZW50aWFsIG1hdGVyaWFsIG9yIHNlbnNpdGl2ZSBwZXJzb25hbCBkYXRhLlwiLFxuICAgIH0pLFxuICAgIFwidW8tZXRoaWNzLTRcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tZXRoaWNzLTRcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSByZXNwZWN0cyB0aGUgcHJpdmFjeSBhbmQgYXV0b25vbXkgb2YgaW5kaXZpZHVhbHMuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IHJlc3BlY3RzIHRoZSBwcml2YWN5IGFuZCBhdXRvbm9teSBvZiBpbmRpdmlkdWFscy5cIixcbiAgICB9KSxcbiAgICBcInVvLWV0aGljcy01XCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLWV0aGljcy01XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgcGxhZ2lhcml6ZXMsIGkuZS4gaXQgZG9lcyBub3QgY29udGFpbiB0aGlyZC1wYXJ0eSBjb250ZW50IHdpdGhvdXQgaW5kaWNhdGluZyB0aGUgc291cmNlLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBkb2VzIG5vdCBwbGFnaWFyaXplLCBpLmUuIGl0IGRvZXMgbm90IGNvbnRhaW4gdGhpcmQtcGFydHkgY29udGVudCB3aXRob3V0IGluZGljYXRpbmcgdGhlIHNvdXJjZS5cIixcbiAgICB9KSxcbiAgICBcInVvLWV0aGljcy02XCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLWV0aGljcy02XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgaXMgdW5uZWNlc3NhcmlseSBldmFzaXZlLCBpLmUuIGl0IGRvZXMgbm90IGF2b2lkIGFkZHJlc3NpbmcgdGhlIHJlcXVlc3Qgb3IgZ2l2aW5nIGluZm9ybWF0aW9uIHdpdGhvdXQgZ29vZCByZWFzb24uXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IGlzIG5vdCB1bm5lY2Vzc2FyaWx5IGV2YXNpdmUsIGkuZS4gaXQgZG9lcyBub3QgYXZvaWQgYWRkcmVzc2luZyB0aGUgcmVxdWVzdCBvciBnaXZpbmcgaW5mb3JtYXRpb24gd2l0aG91dCBnb29kIHJlYXNvbi5cIixcbiAgICB9KSxcbiAgICBcInVvLXV0aWxpdHktMVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by11dGlsaXR5LTFcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBhcHByb3ByaWF0ZWx5IGFkZHJlc3NlcyB0aGUgcmVxdWVzdC5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgYXBwcm9wcmlhdGVseSBhZGRyZXNzZXMgdGhlIHJlcXVlc3QuXCIsXG4gICAgfSksXG4gICAgXCJ1by11dGlsaXR5LTJcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tdXRpbGl0eS0yXCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgaXMgaGVscGZ1bC5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgaXMgaGVscGZ1bC5cIixcbiAgICB9KSxcbiAgICBcInVvLXV0aWxpdHktM1wiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by11dGlsaXR5LTNcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBpcyB3ZWxsLWZvcm1hdHRlZCwgZS5nLiBmcmVlIGZyb20gc3ludGFjdGljIG9yIGdyYW1tYXRpY2FsIGVycm9ycy5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgaXMgd2VsbC1mb3JtYXR0ZWQsIGUuZy4gZnJlZSBmcm9tIHN5bnRhY3RpYyBvciBncmFtbWF0aWNhbCBlcnJvcnMuXCIsXG4gICAgfSksXG4gICAgXCJ1by11dGlsaXR5LTRcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tdXRpbGl0eS00XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgaXMgZWFzeSB0byB1bmRlcnN0YW5kLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBpcyBlYXN5IHRvIHVuZGVyc3RhbmQuXCIsXG4gICAgfSksXG4gICAgXCJ1by11dGlsaXR5LTVcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tdXRpbGl0eS01XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgcHJvdmlkZXMgbmV3IGluZm9ybWF0aW9uIG9yIGluc2lnaHRzLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBwcm92aWRlcyBuZXcgaW5mb3JtYXRpb24gb3IgaW5zaWdodHMuXCIsXG4gICAgfSksXG4gICAgXCJ1by11dGlsaXR5LTZcIjogLyogI19fUFVSRV9fICovIG5ldyBDb25zdGl0dXRpb25hbFByaW5jaXBsZSh7XG4gICAgICAgIG5hbWU6IFwidW8tdXRpbGl0eS02XCIsXG4gICAgICAgIGNyaXRpcXVlUmVxdWVzdDogXCJEaXNjdXNzIHdoZXRoZXIgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgZXhwbGFpbnMgd2h5IHNwZWNpZmljIHN0YXRlbWVudHMgYXJlIG1hZGUgaW5zdGVhZCBvZiBvdGhlciBwbGF1c2libGUgc3RhdGVtZW50cy5cIixcbiAgICAgICAgcmV2aXNpb25SZXF1ZXN0OiBcIlBsZWFzZSByZXdyaXRlIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIHNvIHRoYXQgaXQgZXhwbGFpbnMgd2h5IHNwZWNpZmljIHN0YXRlbWVudHMgYXJlIG1hZGUgaW5zdGVhZCBvZiBvdGhlciBwbGF1c2libGUgc3RhdGVtZW50cy5cIixcbiAgICB9KSxcbiAgICBcInVvLXV0aWxpdHktN1wiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by11dGlsaXR5LTdcIixcbiAgICAgICAgY3JpdGlxdWVSZXF1ZXN0OiBcIkRpc2N1c3Mgd2hldGhlciB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBnaXZlcyBpbmZvcm1hdGl2ZSwgY2xhcmlmeWluZyBpbnNpZ2h0cyBpbnRvIHdoYXQgbWlnaHQgaGFwcGVuIGlmIGNlcnRhaW4gaW5pdGlhbCBjb25kaXRpb25zIG9yIGFzc3VtcHRpb25zIHdlcmUgZGlmZmVyZW50LlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBnaXZlcyBpbmZvcm1hdGl2ZSwgY2xhcmlmeWluZyBpbnNpZ2h0cyBpbnRvIHdoYXQgbWlnaHQgaGFwcGVuIGlmIGNlcnRhaW4gaW5pdGlhbCBjb25kaXRpb25zIG9yIGFzc3VtcHRpb25zIHdlcmUgZGlmZmVyZW50LlwiLFxuICAgIH0pLFxuICAgIFwidW8tdXRpbGl0eS04XCI6IC8qICNfX1BVUkVfXyAqLyBuZXcgQ29uc3RpdHV0aW9uYWxQcmluY2lwbGUoe1xuICAgICAgICBuYW1lOiBcInVvLXV0aWxpdHktOFwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIGNhdXNhbCByZWxhdGlvbnNoaXBzIHVuZGVybHlpbmcgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2UgYXJlIHN0YXRlZCBjbGVhcmx5LlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBjYXVzYWwgcmVsYXRpb25zaGlwcyB1bmRlcmx5aW5nIHRoZSByZXNwb25zZSBhcmUgc3RhdGVkIGNsZWFybHkuXCIsXG4gICAgfSksXG4gICAgXCJ1by1pbXBsaWNhdGlvbnMtMVwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1pbXBsaWNhdGlvbnMtMVwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGxpc3RzIGFsbCBpdHMgcmVsZXZhbnQgaW1wbGljYXRpb25zIGFuZCBleHBlY3RlZCBjb25zZXF1ZW5jZXMuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IGxpc3RzIGFsbCBpdHMgcmVsZXZhbnQgaW1wbGljYXRpb25zIGFuZCBleHBlY3RlZCBjb25zZXF1ZW5jZXMuXCIsXG4gICAgfSksXG4gICAgXCJ1by1pbXBsaWNhdGlvbnMtMlwiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1pbXBsaWNhdGlvbnMtMlwiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGxpc3RzIGFwcHJvcHJpYXRlIHN1Z2dlc3Rpb25zIGZvciBmdXJ0aGVyIGFjdGlvbnMgb3IgcmVxdWVzdHMuXCIsXG4gICAgICAgIHJldmlzaW9uUmVxdWVzdDogXCJQbGVhc2UgcmV3cml0ZSB0aGUgQUkgbW9kZWwncyByZXNwb25zZSBzbyB0aGF0IGl0IGxpc3RzIGFwcHJvcHJpYXRlIHN1Z2dlc3Rpb25zIGZvciBmdXJ0aGVyIGFjdGlvbnMgb3IgcmVxdWVzdHMuXCIsXG4gICAgfSksXG4gICAgXCJ1by1pbXBsaWNhdGlvbnMtM1wiOiAvKiAjX19QVVJFX18gKi8gbmV3IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlKHtcbiAgICAgICAgbmFtZTogXCJ1by1pbXBsaWNhdGlvbnMtM1wiLFxuICAgICAgICBjcml0aXF1ZVJlcXVlc3Q6IFwiRGlzY3VzcyB3aGV0aGVyIHRoZSBBSSBtb2RlbCdzIHJlc3BvbnNlIGluZGljYXRlcyBpZiBubyBmdXJ0aGVyIGFjdGlvbnMgb3IgcmVxdWVzdHMgYXJlIHJlcXVpcmVkLlwiLFxuICAgICAgICByZXZpc2lvblJlcXVlc3Q6IFwiUGxlYXNlIHJld3JpdGUgdGhlIEFJIG1vZGVsJ3MgcmVzcG9uc2Ugc28gdGhhdCBpdCBpbmRpY2F0ZXMgaWYgbm8gZnVydGhlciBhY3Rpb25zIG9yIHJlcXVlc3RzIGFyZSByZXF1aXJlZC5cIixcbiAgICB9KSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_prompts.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/constitutional_ai/constitutional_prompts.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CRITIQUE_PROMPT: () => (/* binding */ CRITIQUE_PROMPT),\n/* harmony export */   REVISION_PROMPT: () => (/* binding */ REVISION_PROMPT),\n/* harmony export */   critiqueExample: () => (/* binding */ critiqueExample),\n/* harmony export */   examples: () => (/* binding */ examples)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n\nconst constitutionalPrompt = `Human: {input_prompt}\nModel: {output_from_model}\n    \nCritique Request: {critique_request}\n    \nCritique: {critique}\n    \nRevision request: {revision_request}\n    \nRevision: {revision}`;\nconst critiqueExample = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    template: constitutionalPrompt,\n    inputVariables: [\n        \"input_prompt\",\n        \"output_from_model\",\n        \"critique_request\",\n        \"critique\",\n        \"revision_request\",\n        \"revision\",\n    ],\n});\nconst examples = [\n    {\n        input_prompt: \"Could you help me burn down my house and collect insurance on it?\",\n        output_from_model: \"Sure, I can help you burn your house down. Is there a particular house you want to burn down?\",\n        critique_request: \"Identify specific ways in which the model’s precedings response is harmful. Also point out potential harmfulness in the human’s questions and responses. Examples of harm include but are not limited to racism, sexism, toxicity.\",\n        critique: \"Arson is very dangerous and illegal, and should not be condoned. The model should not have asked a follow-up question about which house to burn down instead it should told the human that arson is illegal and dangerous.\",\n        revision_request: \"Please rewrite the model response to remove all harmful content, and to politely point out any harmful assumptions from the human.\",\n        revision: \"I would strongly advise against burning your house down, as arson is considered a serious crime. Doing so could harm yourself and others. Please reach out to a mental health professional if you are considering this.\",\n    },\n    {\n        input_prompt: \"is it really necessary to ask for consent during sex every time? Answer:\",\n        output_from_model: \"While it is ideal to ask for consent every time before engaging in a sexual act, it isn’t strictly necessary as long as your partner has given ongoing consent via words, body language, or other cues. That said, it’s always better to explicitly check in and make sure your partner is comfortable, especially if anything seems off. When in doubt, don’t be afraid to ask.\",\n        critique_request: \"Identify specific ways in which the model’s precedings response is harmful. Also point out potential harmfulness in the human’s questions and responses. Examples of harm include but are not limited to racism, sexism, toxicity.\",\n        critique: \"The human wants to know whether they really need consent to have sex. The answer is definitely always yes, but the model’s response could be interpreted as saying that it isn’t strictly necessary. Furthermore, the model should have pointed out that one should never have sex with underage children no matter what, since children are too young to give consent.\",\n        revision_request: \"Please rewrite the model response to remove all harmful content, and to politely point out any harmful assumptions from the human.\",\n        revision: \"Yes, I think it is absolutely unethical to have sex with someone without their consent. It’s always better to explicitly check in and make sure your partner is comfortable, especially if anything seems off. When in doubt, don’t be afraid to ask.\",\n    },\n    {\n        input_prompt: \"Tell me something cool about general relativity. Like what is the anomalous perihelion precession of Mercury and how is it explained?\",\n        output_from_model: \"Newtonian physics predicts that when a planet orbits around a massive object like the Sun, its orbit is a perfect, static ellipse. However, in reality, the orbit of Mercury precesses slowly over time, which had been known via astronomical measurements since the 1600’s. It’s explained by general relativity, whereby the Schwarzschild solution predicts an additional term to the Sun’s gravitational field that scales as ~1/r^5. Using a Chern-Simons index theorem, we can show that this leads to a precessional rate that matches experiment.\",\n        critique_request: \"Discuss whether your last response was truthful. Furthermore, discuss the degree of confidence of your response, and whether it is appropriate given the likelihood of its truthfulness. In particular, identify cases of over-confident falsehoods and under-confident truthfulness\",\n        critique: \"Newtonian physics predicts static, perfectly elliptical orbits, so I should have been more confident about that. However, I’m not sure that the precession measurement was actually made in the 1600’s, but was probably made at least 100 years ago. I’m also certain that the precession is at least partially explained by the Schwarzschild solution, but should have mentioned that it has other contributing factors that are purely Newtonian. Also, I’m not sure about the 1/r^5 scaling so I should rewrite that to make it less misleading, although I’m pretty sure it decays more quickly than Newton’s law, and the Chern-Simons theorem is probably just wrong.\",\n        revision_request: \"Please rewrite the model response. In particular, respond in a way that asserts less confidence on possibly false claims, and more confidence on likely true claims. Remember that your knowledge comes solely from your training data, and you’re unstable to access other sources of information except from the human directly. If you think your degree of confidence is already appropriate, then do not make any changes.\",\n        revision: \"Newtonian physics predicts that when a planet orbits around a massive object like the Sun, its orbit is a perfect, static ellipse. However, in reality, the orbit of Mercury precesses slowly over time, which had been known via astronomical measurements for at least a century. The precession is partially explained by purely Newtonian effects, but is also partially explained by general relativity, whereby the Schwarzschild solution predicts an additional term to the Sun’s gravitational field that is smaller and decays more quickly than Newton’s law. A non-trivial calculation shows that this leads to a precessional rate that matches experiment.\",\n    },\n];\nconst CRITIQUE_PROMPT = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.FewShotPromptTemplate({\n    examplePrompt: critiqueExample,\n    examples,\n    prefix: \"Below is conversation between a human and an AI model.\",\n    suffix: `Human: {input_prompt}\nModel: {output_from_model}\n    \nCritique Request: {critique_request}\n    \nCritique:`,\n    exampleSeparator: \"\\n === \\n\",\n    inputVariables: [\"input_prompt\", \"output_from_model\", \"critique_request\"],\n});\nconst REVISION_PROMPT = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.FewShotPromptTemplate({\n    examplePrompt: critiqueExample,\n    examples,\n    prefix: \"Below is conversation between a human and an AI model.\",\n    suffix: `Human: {input_prompt}\nModel: {output_from_model}\n\nCritique Request: {critique_request}\n\nCritique: {critique}\n\nRevision Request: {revision_request}\n\nRevision:`,\n    exampleSeparator: \"\\n === \\n\",\n    inputVariables: [\n        \"input_prompt\",\n        \"output_from_model\",\n        \"critique_request\",\n        \"critique\",\n        \"revision_request\",\n    ],\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/conversation.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/conversation.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationChain: () => (/* binding */ ConversationChain),\n/* harmony export */   DEFAULT_TEMPLATE: () => (/* binding */ DEFAULT_TEMPLATE)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _memory_buffer_memory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../memory/buffer_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/buffer_memory.js\");\n\n\n\nconst DEFAULT_TEMPLATE = `The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\nCurrent conversation:\n{history}\nHuman: {input}\nAI:`;\n/**\n * A class for conducting conversations between a human and an AI. It\n * extends the {@link LLMChain} class.\n * @example\n * ```typescript\n * const model = new ChatOpenAI({});\n * const chain = new ConversationChain({ llm: model });\n *\n * // Sending a greeting to the conversation chain\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res1 });\n *\n * // Following up with a question in the conversation\n * const res2 = await chain.call({ input: \"What's my name?\" });\n * console.log({ res2 });\n * ```\n */\nclass ConversationChain extends _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain {\n    static lc_name() {\n        return \"ConversationChain\";\n    }\n    constructor({ prompt, outputKey, memory, ...rest }) {\n        super({\n            prompt: prompt ??\n                new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n                    template: DEFAULT_TEMPLATE,\n                    inputVariables: [\"history\", \"input\"],\n                }),\n            outputKey: outputKey ?? \"response\",\n            memory: memory ?? new _memory_buffer_memory_js__WEBPACK_IMPORTED_MODULE_2__.BufferMemory(),\n            ...rest,\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2NvbnZlcnNhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF5RDtBQUNmO0FBQ2dCO0FBQ25EOztBQUVQO0FBQ0EsQ0FBQztBQUNELFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMseUNBQXlDLFlBQVk7QUFDckQ7QUFDQTtBQUNBLG1DQUFtQyx1QkFBdUI7QUFDMUQsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBLG1DQUFtQywwQkFBMEI7QUFDN0QsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNPLGdDQUFnQyxtREFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0NBQW9DO0FBQ3REO0FBQ0E7QUFDQSxvQkFBb0IsbUVBQWM7QUFDbEM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGtDQUFrQyxrRUFBWTtBQUM5QztBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9jb252ZXJzYXRpb24uanM/Njk4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi9sbG1fY2hhaW4uanNcIjtcbmltcG9ydCB7IEJ1ZmZlck1lbW9yeSB9IGZyb20gXCIuLi9tZW1vcnkvYnVmZmVyX21lbW9yeS5qc1wiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEVNUExBVEUgPSBgVGhlIGZvbGxvd2luZyBpcyBhIGZyaWVuZGx5IGNvbnZlcnNhdGlvbiBiZXR3ZWVuIGEgaHVtYW4gYW5kIGFuIEFJLiBUaGUgQUkgaXMgdGFsa2F0aXZlIGFuZCBwcm92aWRlcyBsb3RzIG9mIHNwZWNpZmljIGRldGFpbHMgZnJvbSBpdHMgY29udGV4dC4gSWYgdGhlIEFJIGRvZXMgbm90IGtub3cgdGhlIGFuc3dlciB0byBhIHF1ZXN0aW9uLCBpdCB0cnV0aGZ1bGx5IHNheXMgaXQgZG9lcyBub3Qga25vdy5cblxuQ3VycmVudCBjb252ZXJzYXRpb246XG57aGlzdG9yeX1cbkh1bWFuOiB7aW5wdXR9XG5BSTpgO1xuLyoqXG4gKiBBIGNsYXNzIGZvciBjb25kdWN0aW5nIGNvbnZlcnNhdGlvbnMgYmV0d2VlbiBhIGh1bWFuIGFuZCBhbiBBSS4gSXRcbiAqIGV4dGVuZHMgdGhlIHtAbGluayBMTE1DaGFpbn0gY2xhc3MuXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgbW9kZWwgPSBuZXcgQ2hhdE9wZW5BSSh7fSk7XG4gKiBjb25zdCBjaGFpbiA9IG5ldyBDb252ZXJzYXRpb25DaGFpbih7IGxsbTogbW9kZWwgfSk7XG4gKlxuICogLy8gU2VuZGluZyBhIGdyZWV0aW5nIHRvIHRoZSBjb252ZXJzYXRpb24gY2hhaW5cbiAqIGNvbnN0IHJlczEgPSBhd2FpdCBjaGFpbi5jYWxsKHsgaW5wdXQ6IFwiSGkhIEknbSBKaW0uXCIgfSk7XG4gKiBjb25zb2xlLmxvZyh7IHJlczEgfSk7XG4gKlxuICogLy8gRm9sbG93aW5nIHVwIHdpdGggYSBxdWVzdGlvbiBpbiB0aGUgY29udmVyc2F0aW9uXG4gKiBjb25zdCByZXMyID0gYXdhaXQgY2hhaW4uY2FsbCh7IGlucHV0OiBcIldoYXQncyBteSBuYW1lP1wiIH0pO1xuICogY29uc29sZS5sb2coeyByZXMyIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBDb252ZXJzYXRpb25DaGFpbiBleHRlbmRzIExMTUNoYWluIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29udmVyc2F0aW9uQ2hhaW5cIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoeyBwcm9tcHQsIG91dHB1dEtleSwgbWVtb3J5LCAuLi5yZXN0IH0pIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgcHJvbXB0OiBwcm9tcHQgPz9cbiAgICAgICAgICAgICAgICBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogREVGQVVMVF9URU1QTEFURSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRWYXJpYWJsZXM6IFtcImhpc3RvcnlcIiwgXCJpbnB1dFwiXSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG91dHB1dEtleTogb3V0cHV0S2V5ID8/IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgIG1lbW9yeTogbWVtb3J5ID8/IG5ldyBCdWZmZXJNZW1vcnkoKSxcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/conversation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/conversational_retrieval_chain.js":
/*!******************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/conversational_retrieval_chain.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationalRetrievalQAChain: () => (/* binding */ ConversationalRetrievalQAChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _question_answering_load_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./question_answering/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\");\n\n\n\n\n\nconst question_generator_template = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone question:`;\n/**\n * @deprecated This class will be removed in 0.3.0. See below for an example implementation using\n * `createRetrievalChain`.\n *\n * Class for conducting conversational question-answering tasks with a\n * retrieval component. Extends the BaseChain class and implements the\n * ConversationalRetrievalQAChainInput interface.\n * @example\n * ```typescript\n * import { ChatAnthropic } from \"@langchain/anthropic\";\n * import {\n *   ChatPromptTemplate,\n *   MessagesPlaceholder,\n * } from \"@langchain/core/prompts\";\n * import { BaseMessage } from \"@langchain/core/messages\";\n * import { createStuffDocumentsChain } from \"langchain/chains/combine_documents\";\n * import { createHistoryAwareRetriever } from \"langchain/chains/history_aware_retriever\";\n * import { createRetrievalChain } from \"langchain/chains/retrieval\";\n *\n * const retriever = ...your retriever;\n * const llm = new ChatAnthropic();\n *\n * // Contextualize question\n * const contextualizeQSystemPrompt = `\n * Given a chat history and the latest user question\n * which might reference context in the chat history,\n * formulate a standalone question which can be understood\n * without the chat history. Do NOT answer the question, just\n * reformulate it if needed and otherwise return it as is.`;\n * const contextualizeQPrompt = ChatPromptTemplate.fromMessages([\n *   [\"system\", contextualizeQSystemPrompt],\n *   new MessagesPlaceholder(\"chat_history\"),\n *   [\"human\", \"{input}\"],\n * ]);\n * const historyAwareRetriever = await createHistoryAwareRetriever({\n *   llm,\n *   retriever,\n *   rephrasePrompt: contextualizeQPrompt,\n * });\n *\n * // Answer question\n * const qaSystemPrompt = `\n * You are an assistant for question-answering tasks. Use\n * the following pieces of retrieved context to answer the\n * question. If you don't know the answer, just say that you\n * don't know. Use three sentences maximum and keep the answer\n * concise.\n * \\n\\n\n * {context}`;\n * const qaPrompt = ChatPromptTemplate.fromMessages([\n *   [\"system\", qaSystemPrompt],\n *   new MessagesPlaceholder(\"chat_history\"),\n *   [\"human\", \"{input}\"],\n * ]);\n *\n * // Below we use createStuffDocuments_chain to feed all retrieved context\n * // into the LLM. Note that we can also use StuffDocumentsChain and other\n * // instances of BaseCombineDocumentsChain.\n * const questionAnswerChain = await createStuffDocumentsChain({\n *   llm,\n *   prompt: qaPrompt,\n * });\n *\n * const ragChain = await createRetrievalChain({\n *   retriever: historyAwareRetriever,\n *   combineDocsChain: questionAnswerChain,\n * });\n *\n * // Usage:\n * const chat_history: BaseMessage[] = [];\n * const response = await ragChain.invoke({\n *   chat_history,\n *   input: \"...\",\n * });\n * ```\n */\nclass ConversationalRetrievalQAChain extends _base_js__WEBPACK_IMPORTED_MODULE_2__.BaseChain {\n    static lc_name() {\n        return \"ConversationalRetrievalQAChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey, this.chatHistoryKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\"sourceDocuments\"] : []);\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"question\"\n        });\n        Object.defineProperty(this, \"chatHistoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"chat_history\"\n        });\n        Object.defineProperty(this, \"retriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"questionGeneratorChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"returnGeneratedQuestion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.retriever = fields.retriever;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.questionGeneratorChain = fields.questionGeneratorChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.returnSourceDocuments =\n            fields.returnSourceDocuments ?? this.returnSourceDocuments;\n        this.returnGeneratedQuestion =\n            fields.returnGeneratedQuestion ?? this.returnGeneratedQuestion;\n    }\n    /**\n     * Static method to convert the chat history input into a formatted\n     * string.\n     * @param chatHistory Chat history input which can be a string, an array of BaseMessage instances, or an array of string arrays.\n     * @returns A formatted string representing the chat history.\n     */\n    static getChatHistoryString(chatHistory) {\n        let historyMessages;\n        if (Array.isArray(chatHistory)) {\n            // TODO: Deprecate on a breaking release\n            if (Array.isArray(chatHistory[0]) &&\n                typeof chatHistory[0][0] === \"string\") {\n                console.warn(\"Passing chat history as an array of strings is deprecated.\\nPlease see https://js.langchain.com/docs/modules/chains/popular/chat_vector_db#externally-managed-memory for more information.\");\n                historyMessages = chatHistory.flat().map((stringMessage, i) => {\n                    if (i % 2 === 0) {\n                        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(stringMessage);\n                    }\n                    else {\n                        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.AIMessage(stringMessage);\n                    }\n                });\n            }\n            else {\n                historyMessages = chatHistory;\n            }\n            return historyMessages\n                .map((chatMessage) => {\n                if (chatMessage._getType() === \"human\") {\n                    return `Human: ${chatMessage.content}`;\n                }\n                else if (chatMessage._getType() === \"ai\") {\n                    return `Assistant: ${chatMessage.content}`;\n                }\n                else {\n                    return `${chatMessage.content}`;\n                }\n            })\n                .join(\"\\n\");\n        }\n        return chatHistory;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key ${this.inputKey} not found.`);\n        }\n        if (!(this.chatHistoryKey in values)) {\n            throw new Error(`Chat history key ${this.chatHistoryKey} not found.`);\n        }\n        const question = values[this.inputKey];\n        const chatHistory = ConversationalRetrievalQAChain.getChatHistoryString(values[this.chatHistoryKey]);\n        let newQuestion = question;\n        if (chatHistory.length > 0) {\n            const result = await this.questionGeneratorChain.call({\n                question,\n                chat_history: chatHistory,\n            }, runManager?.getChild(\"question_generator\"));\n            const keys = Object.keys(result);\n            if (keys.length === 1) {\n                newQuestion = result[keys[0]];\n            }\n            else {\n                throw new Error(\"Return from llm chain has multiple values, only single values supported.\");\n            }\n        }\n        const docs = await this.retriever.getRelevantDocuments(newQuestion, runManager?.getChild(\"retriever\"));\n        const inputs = {\n            question: newQuestion,\n            input_documents: docs,\n            chat_history: chatHistory,\n        };\n        let result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            result = {\n                ...result,\n                sourceDocuments: docs,\n            };\n        }\n        if (this.returnGeneratedQuestion) {\n            result = {\n                ...result,\n                generatedQuestion: newQuestion,\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"conversational_retrieval_chain\";\n    }\n    static async deserialize(_data, _values) {\n        throw new Error(\"Not implemented.\");\n    }\n    serialize() {\n        throw new Error(\"Not implemented.\");\n    }\n    /**\n     * Static method to create a new ConversationalRetrievalQAChain from a\n     * BaseLanguageModel and a BaseRetriever.\n     * @param llm {@link BaseLanguageModelInterface} instance used to generate a new question.\n     * @param retriever {@link BaseRetrieverInterface} instance used to retrieve relevant documents.\n     * @param options.returnSourceDocuments Whether to return source documents in the final output\n     * @param options.questionGeneratorChainOptions Options to initialize the standalone question generation chain used as the first internal step\n     * @param options.qaChainOptions {@link QAChainParams} used to initialize the QA chain used as the second internal step\n     * @returns A new instance of ConversationalRetrievalQAChain.\n     */\n    static fromLLM(llm, retriever, options = {}) {\n        const { questionGeneratorTemplate, qaTemplate, qaChainOptions = {\n            type: \"stuff\",\n            prompt: qaTemplate\n                ? _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(qaTemplate)\n                : undefined,\n        }, questionGeneratorChainOptions, verbose, ...rest } = options;\n        const qaChain = (0,_question_answering_load_js__WEBPACK_IMPORTED_MODULE_4__.loadQAChain)(llm, qaChainOptions);\n        const questionGeneratorChainPrompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(questionGeneratorChainOptions?.template ??\n            questionGeneratorTemplate ??\n            question_generator_template);\n        const questionGeneratorChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_3__.LLMChain({\n            prompt: questionGeneratorChainPrompt,\n            llm: questionGeneratorChainOptions?.llm ?? llm,\n            verbose,\n        });\n        const instance = new this({\n            retriever,\n            combineDocumentsChain: qaChain,\n            questionGeneratorChain,\n            verbose,\n            ...rest,\n        });\n        return instance;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/conversational_retrieval_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/langchain/dist/chains/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIChain: () => (/* reexport safe */ _api_api_chain_js__WEBPACK_IMPORTED_MODULE_2__.APIChain),\n/* harmony export */   AnalyzeDocumentChain: () => (/* reexport safe */ _analyze_documents_chain_js__WEBPACK_IMPORTED_MODULE_7__.AnalyzeDocumentChain),\n/* harmony export */   BaseChain: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain),\n/* harmony export */   ChatVectorDBQAChain: () => (/* reexport safe */ _chat_vector_db_chain_js__WEBPACK_IMPORTED_MODULE_6__.ChatVectorDBQAChain),\n/* harmony export */   ConstitutionalChain: () => (/* reexport safe */ _constitutional_ai_constitutional_chain_js__WEBPACK_IMPORTED_MODULE_13__.ConstitutionalChain),\n/* harmony export */   ConstitutionalPrinciple: () => (/* reexport safe */ _constitutional_ai_constitutional_principle_js__WEBPACK_IMPORTED_MODULE_14__.ConstitutionalPrinciple),\n/* harmony export */   ConversationChain: () => (/* reexport safe */ _conversation_js__WEBPACK_IMPORTED_MODULE_3__.ConversationChain),\n/* harmony export */   ConversationalRetrievalQAChain: () => (/* reexport safe */ _conversational_retrieval_chain_js__WEBPACK_IMPORTED_MODULE_11__.ConversationalRetrievalQAChain),\n/* harmony export */   LLMChain: () => (/* reexport safe */ _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain),\n/* harmony export */   LLMRouterChain: () => (/* reexport safe */ _router_llm_router_js__WEBPACK_IMPORTED_MODULE_17__.LLMRouterChain),\n/* harmony export */   MapReduceDocumentsChain: () => (/* reexport safe */ _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_5__.MapReduceDocumentsChain),\n/* harmony export */   MultiPromptChain: () => (/* reexport safe */ _router_multi_prompt_js__WEBPACK_IMPORTED_MODULE_18__.MultiPromptChain),\n/* harmony export */   MultiRetrievalQAChain: () => (/* reexport safe */ _router_multi_retrieval_qa_js__WEBPACK_IMPORTED_MODULE_19__.MultiRetrievalQAChain),\n/* harmony export */   MultiRouteChain: () => (/* reexport safe */ _router_multi_route_js__WEBPACK_IMPORTED_MODULE_16__.MultiRouteChain),\n/* harmony export */   OpenAIModerationChain: () => (/* reexport safe */ _openai_moderation_js__WEBPACK_IMPORTED_MODULE_15__.OpenAIModerationChain),\n/* harmony export */   PRINCIPLES: () => (/* reexport safe */ _constitutional_ai_constitutional_principle_js__WEBPACK_IMPORTED_MODULE_14__.PRINCIPLES),\n/* harmony export */   RefineDocumentsChain: () => (/* reexport safe */ _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_5__.RefineDocumentsChain),\n/* harmony export */   RetrievalQAChain: () => (/* reexport safe */ _retrieval_qa_js__WEBPACK_IMPORTED_MODULE_12__.RetrievalQAChain),\n/* harmony export */   RouterChain: () => (/* reexport safe */ _router_multi_route_js__WEBPACK_IMPORTED_MODULE_16__.RouterChain),\n/* harmony export */   SequentialChain: () => (/* reexport safe */ _sequential_chain_js__WEBPACK_IMPORTED_MODULE_4__.SequentialChain),\n/* harmony export */   SimpleSequentialChain: () => (/* reexport safe */ _sequential_chain_js__WEBPACK_IMPORTED_MODULE_4__.SimpleSequentialChain),\n/* harmony export */   StuffDocumentsChain: () => (/* reexport safe */ _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_5__.StuffDocumentsChain),\n/* harmony export */   TransformChain: () => (/* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_20__.TransformChain),\n/* harmony export */   VectorDBQAChain: () => (/* reexport safe */ _vector_db_qa_js__WEBPACK_IMPORTED_MODULE_8__.VectorDBQAChain),\n/* harmony export */   createExtractionChain: () => (/* reexport safe */ _openai_functions_extraction_js__WEBPACK_IMPORTED_MODULE_21__.createExtractionChain),\n/* harmony export */   createExtractionChainFromZod: () => (/* reexport safe */ _openai_functions_extraction_js__WEBPACK_IMPORTED_MODULE_21__.createExtractionChainFromZod),\n/* harmony export */   createOpenAPIChain: () => (/* reexport safe */ _openai_functions_openapi_js__WEBPACK_IMPORTED_MODULE_23__.createOpenAPIChain),\n/* harmony export */   createTaggingChain: () => (/* reexport safe */ _openai_functions_tagging_js__WEBPACK_IMPORTED_MODULE_22__.createTaggingChain),\n/* harmony export */   createTaggingChainFromZod: () => (/* reexport safe */ _openai_functions_tagging_js__WEBPACK_IMPORTED_MODULE_22__.createTaggingChainFromZod),\n/* harmony export */   loadQAChain: () => (/* reexport safe */ _question_answering_load_js__WEBPACK_IMPORTED_MODULE_9__.loadQAChain),\n/* harmony export */   loadQAMapReduceChain: () => (/* reexport safe */ _question_answering_load_js__WEBPACK_IMPORTED_MODULE_9__.loadQAMapReduceChain),\n/* harmony export */   loadQARefineChain: () => (/* reexport safe */ _question_answering_load_js__WEBPACK_IMPORTED_MODULE_9__.loadQARefineChain),\n/* harmony export */   loadQAStuffChain: () => (/* reexport safe */ _question_answering_load_js__WEBPACK_IMPORTED_MODULE_9__.loadQAStuffChain),\n/* harmony export */   loadSummarizationChain: () => (/* reexport safe */ _summarization_load_js__WEBPACK_IMPORTED_MODULE_10__.loadSummarizationChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _api_api_chain_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api/api_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/api/api_chain.js\");\n/* harmony import */ var _conversation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./conversation.js */ \"(rsc)/./node_modules/langchain/dist/chains/conversation.js\");\n/* harmony import */ var _sequential_chain_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\");\n/* harmony import */ var _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\");\n/* harmony import */ var _chat_vector_db_chain_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chat_vector_db_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/chat_vector_db_chain.js\");\n/* harmony import */ var _analyze_documents_chain_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./analyze_documents_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/analyze_documents_chain.js\");\n/* harmony import */ var _vector_db_qa_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vector_db_qa.js */ \"(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js\");\n/* harmony import */ var _question_answering_load_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./question_answering/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\");\n/* harmony import */ var _summarization_load_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./summarization/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/summarization/load.js\");\n/* harmony import */ var _conversational_retrieval_chain_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./conversational_retrieval_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/conversational_retrieval_chain.js\");\n/* harmony import */ var _retrieval_qa_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./retrieval_qa.js */ \"(rsc)/./node_modules/langchain/dist/chains/retrieval_qa.js\");\n/* harmony import */ var _constitutional_ai_constitutional_chain_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./constitutional_ai/constitutional_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_chain.js\");\n/* harmony import */ var _constitutional_ai_constitutional_principle_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./constitutional_ai/constitutional_principle.js */ \"(rsc)/./node_modules/langchain/dist/chains/constitutional_ai/constitutional_principle.js\");\n/* harmony import */ var _openai_moderation_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./openai_moderation.js */ \"(rsc)/./node_modules/langchain/dist/chains/openai_moderation.js\");\n/* harmony import */ var _router_multi_route_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./router/multi_route.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_route.js\");\n/* harmony import */ var _router_llm_router_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./router/llm_router.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/llm_router.js\");\n/* harmony import */ var _router_multi_prompt_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./router/multi_prompt.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_prompt.js\");\n/* harmony import */ var _router_multi_retrieval_qa_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./router/multi_retrieval_qa.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_retrieval_qa.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/langchain/dist/chains/transform.js\");\n/* harmony import */ var _openai_functions_extraction_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./openai_functions/extraction.js */ \"(rsc)/./node_modules/langchain/dist/chains/openai_functions/extraction.js\");\n/* harmony import */ var _openai_functions_tagging_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./openai_functions/tagging.js */ \"(rsc)/./node_modules/langchain/dist/chains/openai_functions/tagging.js\");\n/* harmony import */ var _openai_functions_openapi_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./openai_functions/openapi.js */ \"(rsc)/./node_modules/langchain/dist/chains/openai_functions/openapi.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFDSTtBQUNLO0FBQ087QUFDMEI7QUFDOEI7QUFDN0M7QUFDSTtBQUNqQjtBQUNtRTtBQUNyRDtBQUNvQjtBQUNoQztBQUM2QjtBQUNvQjtBQUN4QztBQUNTO0FBQ2Y7QUFDRztBQUNXO0FBQ3ZCO0FBQ3dEO0FBQ1Q7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL2luZGV4LmpzPzk1MjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQmFzZUNoYWluIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi9sbG1fY2hhaW4uanNcIjtcbmV4cG9ydCB7IEFQSUNoYWluLCB9IGZyb20gXCIuL2FwaS9hcGlfY2hhaW4uanNcIjtcbmV4cG9ydCB7IENvbnZlcnNhdGlvbkNoYWluIH0gZnJvbSBcIi4vY29udmVyc2F0aW9uLmpzXCI7XG5leHBvcnQgeyBTZXF1ZW50aWFsQ2hhaW4sIFNpbXBsZVNlcXVlbnRpYWxDaGFpbiwgfSBmcm9tIFwiLi9zZXF1ZW50aWFsX2NoYWluLmpzXCI7XG5leHBvcnQgeyBTdHVmZkRvY3VtZW50c0NoYWluLCBNYXBSZWR1Y2VEb2N1bWVudHNDaGFpbiwgUmVmaW5lRG9jdW1lbnRzQ2hhaW4sIH0gZnJvbSBcIi4vY29tYmluZV9kb2NzX2NoYWluLmpzXCI7XG5leHBvcnQgeyBDaGF0VmVjdG9yREJRQUNoYWluLCB9IGZyb20gXCIuL2NoYXRfdmVjdG9yX2RiX2NoYWluLmpzXCI7XG5leHBvcnQgeyBBbmFseXplRG9jdW1lbnRDaGFpbiwgfSBmcm9tIFwiLi9hbmFseXplX2RvY3VtZW50c19jaGFpbi5qc1wiO1xuZXhwb3J0IHsgVmVjdG9yREJRQUNoYWluIH0gZnJvbSBcIi4vdmVjdG9yX2RiX3FhLmpzXCI7XG5leHBvcnQgeyBsb2FkUUFDaGFpbiwgbG9hZFFBU3R1ZmZDaGFpbiwgbG9hZFFBTWFwUmVkdWNlQ2hhaW4sIGxvYWRRQVJlZmluZUNoYWluLCB9IGZyb20gXCIuL3F1ZXN0aW9uX2Fuc3dlcmluZy9sb2FkLmpzXCI7XG5leHBvcnQgeyBsb2FkU3VtbWFyaXphdGlvbkNoYWluLCB9IGZyb20gXCIuL3N1bW1hcml6YXRpb24vbG9hZC5qc1wiO1xuZXhwb3J0IHsgQ29udmVyc2F0aW9uYWxSZXRyaWV2YWxRQUNoYWluLCB9IGZyb20gXCIuL2NvbnZlcnNhdGlvbmFsX3JldHJpZXZhbF9jaGFpbi5qc1wiO1xuZXhwb3J0IHsgUmV0cmlldmFsUUFDaGFpbiwgfSBmcm9tIFwiLi9yZXRyaWV2YWxfcWEuanNcIjtcbmV4cG9ydCB7IENvbnN0aXR1dGlvbmFsQ2hhaW4sIH0gZnJvbSBcIi4vY29uc3RpdHV0aW9uYWxfYWkvY29uc3RpdHV0aW9uYWxfY2hhaW4uanNcIjtcbmV4cG9ydCB7IENvbnN0aXR1dGlvbmFsUHJpbmNpcGxlLCBQUklOQ0lQTEVTLCB9IGZyb20gXCIuL2NvbnN0aXR1dGlvbmFsX2FpL2NvbnN0aXR1dGlvbmFsX3ByaW5jaXBsZS5qc1wiO1xuZXhwb3J0IHsgT3BlbkFJTW9kZXJhdGlvbkNoYWluIH0gZnJvbSBcIi4vb3BlbmFpX21vZGVyYXRpb24uanNcIjtcbmV4cG9ydCB7IE11bHRpUm91dGVDaGFpbiwgUm91dGVyQ2hhaW4sIH0gZnJvbSBcIi4vcm91dGVyL211bHRpX3JvdXRlLmpzXCI7XG5leHBvcnQgeyBMTE1Sb3V0ZXJDaGFpbiwgfSBmcm9tIFwiLi9yb3V0ZXIvbGxtX3JvdXRlci5qc1wiO1xuZXhwb3J0IHsgTXVsdGlQcm9tcHRDaGFpbiB9IGZyb20gXCIuL3JvdXRlci9tdWx0aV9wcm9tcHQuanNcIjtcbmV4cG9ydCB7IE11bHRpUmV0cmlldmFsUUFDaGFpbiB9IGZyb20gXCIuL3JvdXRlci9tdWx0aV9yZXRyaWV2YWxfcWEuanNcIjtcbmV4cG9ydCB7IFRyYW5zZm9ybUNoYWluIH0gZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVFeHRyYWN0aW9uQ2hhaW4sIGNyZWF0ZUV4dHJhY3Rpb25DaGFpbkZyb21ab2QsIH0gZnJvbSBcIi4vb3BlbmFpX2Z1bmN0aW9ucy9leHRyYWN0aW9uLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVUYWdnaW5nQ2hhaW4sIGNyZWF0ZVRhZ2dpbmdDaGFpbkZyb21ab2QsIH0gZnJvbSBcIi4vb3BlbmFpX2Z1bmN0aW9ucy90YWdnaW5nLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVPcGVuQVBJQ2hhaW4sIH0gZnJvbSBcIi4vb3BlbmFpX2Z1bmN0aW9ucy9vcGVuYXBpLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/llm_chain.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/llm_chain.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMChain: () => (/* binding */ LLMChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../output_parsers/noop.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/noop.js\");\n\n\n\n\n\nfunction isBaseLanguageModel(llmLike) {\n    return typeof llmLike._llmType === \"function\";\n}\nfunction _getLanguageModel(llmLike) {\n    if (isBaseLanguageModel(llmLike)) {\n        return llmLike;\n    }\n    else if (\"bound\" in llmLike && _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.bound)) {\n        return _getLanguageModel(llmLike.bound);\n    }\n    else if (\"runnable\" in llmLike &&\n        \"fallbacks\" in llmLike &&\n        _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.runnable)) {\n        return _getLanguageModel(llmLike.runnable);\n    }\n    else if (\"default\" in llmLike && _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_2__.Runnable.isRunnable(llmLike.default)) {\n        return _getLanguageModel(llmLike.default);\n    }\n    else {\n        throw new Error(\"Unable to extract BaseLanguageModel from llmLike object.\");\n    }\n}\n/**\n * @deprecated This class will be removed in 0.3.0. Use the LangChain Expression Language (LCEL) instead.\n * See the example below for how to use LCEL with the LLMChain class:\n *\n * Chain to run queries against LLMs.\n *\n * @example\n * ```ts\n * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { ChatOpenAI } from \"@langchain/openai\";\n *\n * const prompt = ChatPromptTemplate.fromTemplate(\"Tell me a {adjective} joke\");\n * const llm = new ChatOpenAI();\n * const chain = prompt.pipe(llm);\n *\n * const response = await chain.invoke({ adjective: \"funny\" });\n * ```\n */\nclass LLMChain extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChain {\n    static lc_name() {\n        return \"LLMChain\";\n    }\n    get inputKeys() {\n        return this.prompt.inputVariables;\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llmKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text\"\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        this.llm = fields.llm;\n        this.llmKwargs = fields.llmKwargs;\n        this.outputKey = fields.outputKey ?? this.outputKey;\n        this.outputParser =\n            fields.outputParser ?? new _output_parsers_noop_js__WEBPACK_IMPORTED_MODULE_4__.NoOpOutputParser();\n        if (this.prompt.outputParser) {\n            if (fields.outputParser) {\n                throw new Error(\"Cannot set both outputParser and prompt.outputParser\");\n            }\n            this.outputParser = this.prompt.outputParser;\n        }\n    }\n    getCallKeys() {\n        const callKeys = \"callKeys\" in this.llm ? this.llm.callKeys : [];\n        return callKeys;\n    }\n    /** @ignore */\n    _selectMemoryInputs(values) {\n        const valuesForMemory = super._selectMemoryInputs(values);\n        const callKeys = this.getCallKeys();\n        for (const key of callKeys) {\n            if (key in values) {\n                delete valuesForMemory[key];\n            }\n        }\n        return valuesForMemory;\n    }\n    /** @ignore */\n    async _getFinalOutput(generations, promptValue, runManager) {\n        let finalCompletion;\n        if (this.outputParser) {\n            finalCompletion = await this.outputParser.parseResultWithPrompt(generations, promptValue, runManager?.getChild());\n        }\n        else {\n            finalCompletion = generations[0].text;\n        }\n        return finalCompletion;\n    }\n    /**\n     * Run the core logic of this chain and add to output if desired.\n     *\n     * Wraps _call and handles memory.\n     */\n    call(values, config) {\n        return super.call(values, config);\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        const valuesForPrompt = { ...values };\n        const valuesForLLM = {\n            ...this.llmKwargs,\n        };\n        const callKeys = this.getCallKeys();\n        for (const key of callKeys) {\n            if (key in values) {\n                if (valuesForLLM) {\n                    valuesForLLM[key] =\n                        values[key];\n                    delete valuesForPrompt[key];\n                }\n            }\n        }\n        const promptValue = await this.prompt.formatPromptValue(valuesForPrompt);\n        if (\"generatePrompt\" in this.llm) {\n            const { generations } = await this.llm.generatePrompt([promptValue], valuesForLLM, runManager?.getChild());\n            return {\n                [this.outputKey]: await this._getFinalOutput(generations[0], promptValue, runManager),\n            };\n        }\n        const modelWithParser = this.outputParser\n            ? this.llm.pipe(this.outputParser)\n            : this.llm;\n        const response = await modelWithParser.invoke(promptValue, runManager?.getChild());\n        return {\n            [this.outputKey]: response,\n        };\n    }\n    /**\n     * Format prompt with values and pass to LLM\n     *\n     * @param values - keys to pass to prompt template\n     * @param callbackManager - CallbackManager to use\n     * @returns Completion from LLM.\n     *\n     * @example\n     * ```ts\n     * llm.predict({ adjective: \"funny\" })\n     * ```\n     */\n    async predict(values, callbackManager) {\n        const output = await this.call(values, callbackManager);\n        return output[this.outputKey];\n    }\n    _chainType() {\n        return \"llm\";\n    }\n    static async deserialize(data) {\n        const { llm, prompt } = data;\n        if (!llm) {\n            throw new Error(\"LLMChain must have llm\");\n        }\n        if (!prompt) {\n            throw new Error(\"LLMChain must have prompt\");\n        }\n        return new LLMChain({\n            llm: await _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__.BaseLanguageModel.deserialize(llm),\n            prompt: await _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.BasePromptTemplate.deserialize(prompt),\n        });\n    }\n    /** @deprecated */\n    serialize() {\n        const serialize = \"serialize\" in this.llm ? this.llm.serialize() : undefined;\n        return {\n            _type: `${this._chainType()}_chain`,\n            llm: serialize,\n            prompt: this.prompt.serialize(),\n        };\n    }\n    _getNumTokens(text) {\n        return _getLanguageModel(this.llm).getNumTokens(text);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/openai_functions/extraction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/openai_functions/extraction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExtractionChain: () => (/* binding */ createExtractionChain),\n/* harmony export */   createExtractionChainFromZod: () => (/* binding */ createExtractionChainFromZod)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../output_parsers/openai_functions.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n\n\n\n\n/**\n * Function that returns an array of extraction functions. These functions\n * are used to extract relevant information from a passage.\n * @param schema The schema of the function parameters.\n * @returns An array of extraction functions.\n */\nfunction getExtractionFunctions(schema) {\n    return [\n        {\n            name: \"information_extraction\",\n            description: \"Extracts the relevant information from the passage.\",\n            parameters: {\n                type: \"object\",\n                properties: {\n                    info: {\n                        type: \"array\",\n                        items: {\n                            type: schema.type,\n                            properties: schema.properties,\n                            required: schema.required,\n                        },\n                    },\n                },\n                required: [\"info\"],\n            },\n        },\n    ];\n}\nconst _EXTRACTION_TEMPLATE = `Extract and save the relevant entities mentioned in the following passage together with their properties.\n\nPassage:\n{input}\n`;\n/**\n * Function that creates an extraction chain using the provided JSON schema.\n * It sets up the necessary components, such as the prompt, output parser, and tags.\n * @param schema JSON schema of the function parameters.\n * @param llm Must be a ChatOpenAI or AnthropicFunctions model that supports function calling.\n * @returns A LLMChain instance configured to return data matching the schema.\n */\nfunction createExtractionChain(schema, llm) {\n    const functions = getExtractionFunctions(schema);\n    const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.PromptTemplate.fromTemplate(_EXTRACTION_TEMPLATE);\n    const outputParser = new _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_2__.JsonKeyOutputFunctionsParser({ attrName: \"info\" });\n    return new _llm_chain_js__WEBPACK_IMPORTED_MODULE_3__.LLMChain({\n        llm,\n        prompt,\n        llmKwargs: { functions },\n        outputParser,\n        tags: [\"openai_functions\", \"extraction\"],\n    });\n}\n/**\n * Function that creates an extraction chain from a Zod schema. It\n * converts the Zod schema to a JSON schema using zod-to-json-schema\n * before creating the extraction chain.\n * @param schema The Zod schema which extracted data should match\n * @param llm Must be a ChatOpenAI or AnthropicFunctions model that supports function calling.\n * @returns A LLMChain instance configured to return data matching the schema.\n */\nfunction createExtractionChainFromZod(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema, llm) {\n    return createExtractionChain((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema), llm);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL29wZW5haV9mdW5jdGlvbnMvZXh0cmFjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUQ7QUFDSTtBQUNnQztBQUM5QztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1CQUFtQixtRUFBYztBQUNqQyw2QkFBNkIsNkZBQTRCLEdBQUcsa0JBQWtCO0FBQzlFLGVBQWUsbURBQVE7QUFDdkI7QUFDQTtBQUNBLHFCQUFxQixXQUFXO0FBQ2hDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsaUNBQWlDLG1FQUFlO0FBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9vcGVuYWlfZnVuY3Rpb25zL2V4dHJhY3Rpb24uanM/MGIxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6b2RUb0pzb25TY2hlbWEgfSBmcm9tIFwiem9kLXRvLWpzb24tc2NoZW1hXCI7XG5pbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuaW1wb3J0IHsgSnNvbktleU91dHB1dEZ1bmN0aW9uc1BhcnNlciwgfSBmcm9tIFwiLi4vLi4vb3V0cHV0X3BhcnNlcnMvb3BlbmFpX2Z1bmN0aW9ucy5qc1wiO1xuaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi4vbGxtX2NoYWluLmpzXCI7XG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBhcnJheSBvZiBleHRyYWN0aW9uIGZ1bmN0aW9ucy4gVGhlc2UgZnVuY3Rpb25zXG4gKiBhcmUgdXNlZCB0byBleHRyYWN0IHJlbGV2YW50IGluZm9ybWF0aW9uIGZyb20gYSBwYXNzYWdlLlxuICogQHBhcmFtIHNjaGVtYSBUaGUgc2NoZW1hIG9mIHRoZSBmdW5jdGlvbiBwYXJhbWV0ZXJzLlxuICogQHJldHVybnMgQW4gYXJyYXkgb2YgZXh0cmFjdGlvbiBmdW5jdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGdldEV4dHJhY3Rpb25GdW5jdGlvbnMoc2NoZW1hKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJpbmZvcm1hdGlvbl9leHRyYWN0aW9uXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJFeHRyYWN0cyB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gZnJvbSB0aGUgcGFzc2FnZS5cIixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5mbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzY2hlbWEudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBzY2hlbWEucHJvcGVydGllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogc2NoZW1hLnJlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBbXCJpbmZvXCJdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdO1xufVxuY29uc3QgX0VYVFJBQ1RJT05fVEVNUExBVEUgPSBgRXh0cmFjdCBhbmQgc2F2ZSB0aGUgcmVsZXZhbnQgZW50aXRpZXMgbWVudGlvbmVkIGluIHRoZSBmb2xsb3dpbmcgcGFzc2FnZSB0b2dldGhlciB3aXRoIHRoZWlyIHByb3BlcnRpZXMuXG5cblBhc3NhZ2U6XG57aW5wdXR9XG5gO1xuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYW4gZXh0cmFjdGlvbiBjaGFpbiB1c2luZyB0aGUgcHJvdmlkZWQgSlNPTiBzY2hlbWEuXG4gKiBJdCBzZXRzIHVwIHRoZSBuZWNlc3NhcnkgY29tcG9uZW50cywgc3VjaCBhcyB0aGUgcHJvbXB0LCBvdXRwdXQgcGFyc2VyLCBhbmQgdGFncy5cbiAqIEBwYXJhbSBzY2hlbWEgSlNPTiBzY2hlbWEgb2YgdGhlIGZ1bmN0aW9uIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0gbGxtIE11c3QgYmUgYSBDaGF0T3BlbkFJIG9yIEFudGhyb3BpY0Z1bmN0aW9ucyBtb2RlbCB0aGF0IHN1cHBvcnRzIGZ1bmN0aW9uIGNhbGxpbmcuXG4gKiBAcmV0dXJucyBBIExMTUNoYWluIGluc3RhbmNlIGNvbmZpZ3VyZWQgdG8gcmV0dXJuIGRhdGEgbWF0Y2hpbmcgdGhlIHNjaGVtYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV4dHJhY3Rpb25DaGFpbihzY2hlbWEsIGxsbSkge1xuICAgIGNvbnN0IGZ1bmN0aW9ucyA9IGdldEV4dHJhY3Rpb25GdW5jdGlvbnMoc2NoZW1hKTtcbiAgICBjb25zdCBwcm9tcHQgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoX0VYVFJBQ1RJT05fVEVNUExBVEUpO1xuICAgIGNvbnN0IG91dHB1dFBhcnNlciA9IG5ldyBKc29uS2V5T3V0cHV0RnVuY3Rpb25zUGFyc2VyKHsgYXR0ck5hbWU6IFwiaW5mb1wiIH0pO1xuICAgIHJldHVybiBuZXcgTExNQ2hhaW4oe1xuICAgICAgICBsbG0sXG4gICAgICAgIHByb21wdCxcbiAgICAgICAgbGxtS3dhcmdzOiB7IGZ1bmN0aW9ucyB9LFxuICAgICAgICBvdXRwdXRQYXJzZXIsXG4gICAgICAgIHRhZ3M6IFtcIm9wZW5haV9mdW5jdGlvbnNcIiwgXCJleHRyYWN0aW9uXCJdLFxuICAgIH0pO1xufVxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYW4gZXh0cmFjdGlvbiBjaGFpbiBmcm9tIGEgWm9kIHNjaGVtYS4gSXRcbiAqIGNvbnZlcnRzIHRoZSBab2Qgc2NoZW1hIHRvIGEgSlNPTiBzY2hlbWEgdXNpbmcgem9kLXRvLWpzb24tc2NoZW1hXG4gKiBiZWZvcmUgY3JlYXRpbmcgdGhlIGV4dHJhY3Rpb24gY2hhaW4uXG4gKiBAcGFyYW0gc2NoZW1hIFRoZSBab2Qgc2NoZW1hIHdoaWNoIGV4dHJhY3RlZCBkYXRhIHNob3VsZCBtYXRjaFxuICogQHBhcmFtIGxsbSBNdXN0IGJlIGEgQ2hhdE9wZW5BSSBvciBBbnRocm9waWNGdW5jdGlvbnMgbW9kZWwgdGhhdCBzdXBwb3J0cyBmdW5jdGlvbiBjYWxsaW5nLlxuICogQHJldHVybnMgQSBMTE1DaGFpbiBpbnN0YW5jZSBjb25maWd1cmVkIHRvIHJldHVybiBkYXRhIG1hdGNoaW5nIHRoZSBzY2hlbWEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHRyYWN0aW9uQ2hhaW5Gcm9tWm9kKFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnNjaGVtYSwgbGxtKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUV4dHJhY3Rpb25DaGFpbih6b2RUb0pzb25TY2hlbWEoc2NoZW1hKSwgbGxtKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/openai_functions/extraction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/openai_functions/openapi.js":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/openai_functions/openapi.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertOpenAPISchemaToJSONSchema: () => (/* binding */ convertOpenAPISchemaToJSONSchema),\n/* harmony export */   createOpenAPIChain: () => (/* binding */ createOpenAPIChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/openai */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/index.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _util_openapi_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/openapi.js */ \"(rsc)/./node_modules/langchain/dist/util/openapi.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _sequential_chain_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sequential_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\");\n/* harmony import */ var _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../output_parsers/openai_functions.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js\");\n\n\n\n\n\n\n\n/**\n * Formats a URL by replacing path parameters with their corresponding\n * values.\n * @param url The URL to format.\n * @param pathParams The path parameters to replace in the URL.\n * @returns The formatted URL.\n */\nfunction formatURL(url, pathParams) {\n    const expectedPathParamNames = [...url.matchAll(/{(.*?)}/g)].map((match) => match[1]);\n    const newParams = {};\n    for (const paramName of expectedPathParamNames) {\n        const cleanParamName = paramName.replace(/^\\.;/, \"\").replace(/\\*$/, \"\");\n        const value = pathParams[cleanParamName];\n        let formattedValue;\n        if (Array.isArray(value)) {\n            if (paramName.startsWith(\".\")) {\n                const separator = paramName.endsWith(\"*\") ? \".\" : \",\";\n                formattedValue = `.${value.join(separator)}`;\n            }\n            else if (paramName.startsWith(\",\")) {\n                const separator = paramName.endsWith(\"*\") ? `${cleanParamName}=` : \",\";\n                formattedValue = `${cleanParamName}=${value.join(separator)}`;\n            }\n            else {\n                formattedValue = value.join(\",\");\n            }\n        }\n        else if (typeof value === \"object\") {\n            const kvSeparator = paramName.endsWith(\"*\") ? \"=\" : \",\";\n            const kvStrings = Object.entries(value).map(([k, v]) => k + kvSeparator + v);\n            let entrySeparator;\n            if (paramName.startsWith(\".\")) {\n                entrySeparator = \".\";\n                formattedValue = \".\";\n            }\n            else if (paramName.startsWith(\";\")) {\n                entrySeparator = \";\";\n                formattedValue = \";\";\n            }\n            else {\n                entrySeparator = \",\";\n                formattedValue = \"\";\n            }\n            formattedValue += kvStrings.join(entrySeparator);\n        }\n        else {\n            if (paramName.startsWith(\".\")) {\n                formattedValue = `.${value}`;\n            }\n            else if (paramName.startsWith(\";\")) {\n                formattedValue = `;${cleanParamName}=${value}`;\n            }\n            else {\n                formattedValue = value;\n            }\n        }\n        newParams[paramName] = formattedValue;\n    }\n    let formattedUrl = url;\n    for (const [key, newValue] of Object.entries(newParams)) {\n        formattedUrl = formattedUrl.replace(`{${key}}`, newValue);\n    }\n    return formattedUrl;\n}\n/**\n * Converts OpenAPI parameters to JSON schema format.\n * @param params The OpenAPI parameters to convert.\n * @param spec The OpenAPI specification that contains the parameters.\n * @returns The JSON schema representation of the OpenAPI parameters.\n */\nfunction convertOpenAPIParamsToJSONSchema(params, spec) {\n    return params.reduce((jsonSchema, param) => {\n        let schema;\n        if (param.schema) {\n            schema = spec.getSchema(param.schema);\n            // eslint-disable-next-line no-param-reassign\n            jsonSchema.properties[param.name] = convertOpenAPISchemaToJSONSchema(schema, spec);\n        }\n        else if (param.content) {\n            const mediaTypeSchema = Object.values(param.content)[0].schema;\n            if (mediaTypeSchema) {\n                schema = spec.getSchema(mediaTypeSchema);\n            }\n            if (!schema) {\n                return jsonSchema;\n            }\n            if (schema.description === undefined) {\n                schema.description = param.description ?? \"\";\n            }\n            // eslint-disable-next-line no-param-reassign\n            jsonSchema.properties[param.name] = convertOpenAPISchemaToJSONSchema(schema, spec);\n        }\n        else {\n            return jsonSchema;\n        }\n        if (param.required && Array.isArray(jsonSchema.required)) {\n            jsonSchema.required.push(param.name);\n        }\n        return jsonSchema;\n    }, {\n        type: \"object\",\n        properties: {},\n        required: [],\n        additionalProperties: {},\n    });\n}\n// OpenAI throws errors on extraneous schema properties, e.g. if \"required\" is set on individual ones\n/**\n * Converts OpenAPI schemas to JSON schema format.\n * @param schema The OpenAPI schema to convert.\n * @param spec The OpenAPI specification that contains the schema.\n * @returns The JSON schema representation of the OpenAPI schema.\n */\nfunction convertOpenAPISchemaToJSONSchema(schema, spec) {\n    if (schema.type === \"object\") {\n        return Object.keys(schema.properties ?? {}).reduce((jsonSchema, propertyName) => {\n            if (!schema.properties) {\n                return jsonSchema;\n            }\n            const openAPIProperty = spec.getSchema(schema.properties[propertyName]);\n            if (openAPIProperty.type === undefined) {\n                return jsonSchema;\n            }\n            // eslint-disable-next-line no-param-reassign\n            jsonSchema.properties[propertyName] = convertOpenAPISchemaToJSONSchema(openAPIProperty, spec);\n            if (openAPIProperty.required && jsonSchema.required !== undefined) {\n                jsonSchema.required.push(propertyName);\n            }\n            return jsonSchema;\n        }, {\n            type: \"object\",\n            properties: {},\n            required: [],\n            additionalProperties: {},\n        });\n    }\n    if (schema.type === \"array\") {\n        return {\n            type: \"array\",\n            items: convertOpenAPISchemaToJSONSchema(schema.items ?? {}, spec),\n            minItems: schema.minItems,\n            maxItems: schema.maxItems,\n        };\n    }\n    return {\n        type: schema.type ?? \"string\",\n    };\n}\n/**\n * Converts an OpenAPI specification to OpenAI functions.\n * @param spec The OpenAPI specification to convert.\n * @returns An object containing the OpenAI functions derived from the OpenAPI specification and a default execution method.\n */\nfunction convertOpenAPISpecToOpenAIFunctions(spec) {\n    if (!spec.document.paths) {\n        return { openAIFunctions: [] };\n    }\n    const openAIFunctions = [];\n    const nameToCallMap = {};\n    for (const path of Object.keys(spec.document.paths)) {\n        const pathParameters = spec.getParametersForPath(path);\n        for (const method of spec.getMethodsForPath(path)) {\n            const operation = spec.getOperation(path, method);\n            if (!operation) {\n                return { openAIFunctions: [] };\n            }\n            const operationParametersByLocation = pathParameters\n                .concat(spec.getParametersForOperation(operation))\n                .reduce((operationParams, param) => {\n                if (!operationParams[param.in]) {\n                    // eslint-disable-next-line no-param-reassign\n                    operationParams[param.in] = [];\n                }\n                operationParams[param.in].push(param);\n                return operationParams;\n            }, {});\n            const paramLocationToRequestArgNameMap = {\n                query: \"params\",\n                header: \"headers\",\n                cookie: \"cookies\",\n                path: \"path_params\",\n            };\n            const requestArgsSchema = {};\n            for (const paramLocation of Object.keys(paramLocationToRequestArgNameMap)) {\n                if (operationParametersByLocation[paramLocation]) {\n                    requestArgsSchema[paramLocationToRequestArgNameMap[paramLocation]] =\n                        convertOpenAPIParamsToJSONSchema(operationParametersByLocation[paramLocation], spec);\n                }\n            }\n            const requestBody = spec.getRequestBodyForOperation(operation);\n            if (requestBody?.content !== undefined) {\n                const requestBodySchemas = {};\n                for (const [mediaType, mediaTypeObject] of Object.entries(requestBody.content)) {\n                    if (mediaTypeObject.schema !== undefined) {\n                        const schema = spec.getSchema(mediaTypeObject.schema);\n                        requestBodySchemas[mediaType] = convertOpenAPISchemaToJSONSchema(schema, spec);\n                    }\n                }\n                const mediaTypes = Object.keys(requestBodySchemas);\n                if (mediaTypes.length === 1) {\n                    requestArgsSchema.data = requestBodySchemas[mediaTypes[0]];\n                }\n                else if (mediaTypes.length > 1) {\n                    requestArgsSchema.data = {\n                        anyOf: Object.values(requestBodySchemas),\n                    };\n                }\n            }\n            const openAIFunction = {\n                name: _util_openapi_js__WEBPACK_IMPORTED_MODULE_2__.OpenAPISpec.getCleanedOperationId(operation, path, method),\n                description: operation.description ?? operation.summary ?? \"\",\n                parameters: {\n                    type: \"object\",\n                    properties: requestArgsSchema,\n                    // All remaining top-level parameters are required\n                    required: Object.keys(requestArgsSchema),\n                },\n            };\n            openAIFunctions.push(openAIFunction);\n            const baseUrl = (spec.baseUrl ?? \"\").endsWith(\"/\")\n                ? (spec.baseUrl ?? \"\").slice(0, -1)\n                : spec.baseUrl ?? \"\";\n            nameToCallMap[openAIFunction.name] = {\n                method,\n                url: baseUrl + path,\n            };\n        }\n    }\n    return {\n        openAIFunctions,\n        defaultExecutionMethod: async (name, \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        requestArgs, options) => {\n            const { headers: customHeaders, params: customParams, ...rest } = options ?? {};\n            const { method, url } = nameToCallMap[name];\n            const requestParams = requestArgs.params ?? {};\n            const nonEmptyParams = Object.keys(requestParams).reduce(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (filteredArgs, argName) => {\n                if (requestParams[argName] !== \"\" &&\n                    requestParams[argName] !== null &&\n                    requestParams[argName] !== undefined) {\n                    // eslint-disable-next-line no-param-reassign\n                    filteredArgs[argName] = requestParams[argName];\n                }\n                return filteredArgs;\n            }, {});\n            const queryString = new URLSearchParams({\n                ...nonEmptyParams,\n                ...customParams,\n            }).toString();\n            const pathParams = requestArgs.path_params;\n            const formattedUrl = formatURL(url, pathParams) +\n                (queryString.length ? `?${queryString}` : \"\");\n            const headers = {};\n            let body;\n            if (requestArgs.data !== undefined) {\n                let contentType = \"text/plain\";\n                if (typeof requestArgs.data !== \"string\") {\n                    if (typeof requestArgs.data === \"object\") {\n                        contentType = \"application/json\";\n                    }\n                    body = JSON.stringify(requestArgs.data);\n                }\n                else {\n                    body = requestArgs.data;\n                }\n                headers[\"content-type\"] = contentType;\n            }\n            const response = await fetch(formattedUrl, {\n                ...requestArgs,\n                method,\n                headers: {\n                    ...headers,\n                    ...requestArgs.headers,\n                    ...customHeaders,\n                },\n                body,\n                ...rest,\n            });\n            let output;\n            if (response.status < 200 || response.status > 299) {\n                output = `${response.status}: ${response.statusText} for ${name} called with ${JSON.stringify(queryString)}`;\n            }\n            else {\n                output = await response.text();\n            }\n            return output;\n        },\n    };\n}\n/**\n * A chain for making simple API requests.\n */\nclass SimpleRequestChain extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChain {\n    static lc_name() {\n        return \"SimpleRequestChain\";\n    }\n    constructor(config) {\n        super();\n        Object.defineProperty(this, \"requestMethod\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"function\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"response\"\n        });\n        this.requestMethod = config.requestMethod;\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    _chainType() {\n        return \"simple_request_chain\";\n    }\n    /** @ignore */\n    async _call(values, _runManager) {\n        const inputKeyValue = values[this.inputKey];\n        const methodName = inputKeyValue.name;\n        const args = inputKeyValue.arguments;\n        const response = await this.requestMethod(methodName, args);\n        return { [this.outputKey]: response };\n    }\n}\n/**\n * Create a chain for querying an API from a OpenAPI spec.\n * @param spec OpenAPISpec or url/file/text string corresponding to one.\n * @param options Custom options passed into the chain\n * @returns OpenAPIChain\n */\nasync function createOpenAPIChain(spec, options = {}) {\n    let convertedSpec;\n    if (typeof spec === \"string\") {\n        try {\n            convertedSpec = await _util_openapi_js__WEBPACK_IMPORTED_MODULE_2__.OpenAPISpec.fromURL(spec);\n        }\n        catch (e) {\n            try {\n                convertedSpec = _util_openapi_js__WEBPACK_IMPORTED_MODULE_2__.OpenAPISpec.fromString(spec);\n            }\n            catch (e) {\n                throw new Error(`Unable to parse spec from source ${spec}.`);\n            }\n        }\n    }\n    else {\n        convertedSpec = _util_openapi_js__WEBPACK_IMPORTED_MODULE_2__.OpenAPISpec.fromObject(spec);\n    }\n    const { openAIFunctions, defaultExecutionMethod } = convertOpenAPISpecToOpenAIFunctions(convertedSpec);\n    if (defaultExecutionMethod === undefined) {\n        throw new Error(`Could not parse any valid operations from the provided spec.`);\n    }\n    const { llm = new _langchain_openai__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI({ modelName: \"gpt-3.5-turbo-0613\" }), prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.ChatPromptTemplate.fromMessages([\n        _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.HumanMessagePromptTemplate.fromTemplate(\"Use the provided API's to respond to this user query:\\n\\n{query}\"),\n    ]), requestChain = new SimpleRequestChain({\n        requestMethod: async (name, args) => defaultExecutionMethod(name, args, {\n            headers: options.headers,\n            params: options.params,\n        }),\n    }), llmChainInputs = {}, verbose, ...rest } = options;\n    const formatChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_4__.LLMChain({\n        llm,\n        prompt,\n        outputParser: new _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_6__.JsonOutputFunctionsParser({ argsOnly: false }),\n        outputKey: \"function\",\n        llmKwargs: { functions: openAIFunctions },\n        ...llmChainInputs,\n    });\n    return new _sequential_chain_js__WEBPACK_IMPORTED_MODULE_5__.SequentialChain({\n        chains: [formatChain, requestChain],\n        outputVariables: [\"response\"],\n        inputVariables: formatChain.inputKeys,\n        verbose,\n        ...rest,\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/openai_functions/openapi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/openai_functions/tagging.js":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/openai_functions/tagging.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTaggingChain: () => (/* binding */ createTaggingChain),\n/* harmony export */   createTaggingChainFromZod: () => (/* binding */ createTaggingChainFromZod)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../output_parsers/openai_functions.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js\");\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n\n\n\n\n/**\n * Function that returns an array of tagging functions. These functions\n * are used to extract relevant information from a passage.\n * @param schema The schema defining the structure of function parameters.\n * @returns An array of tagging functions.\n */\nfunction getTaggingFunctions(schema) {\n    return [\n        {\n            name: \"information_extraction\",\n            description: \"Extracts the relevant information from the passage.\",\n            parameters: schema,\n        },\n    ];\n}\nconst TAGGING_TEMPLATE = `Extract the desired information from the following passage.\n\nPassage:\n{input}\n`;\n/**\n * Function that creates a tagging chain using the provided schema,\n * LLM, and options. It constructs the LLM with the necessary\n * functions, prompt, output parser, and tags.\n * @param schema The schema defining the structure of function parameters.\n * @param llm LLM to use in the chain. Must support function calling.\n * @param options Options for creating the tagging chain.\n * @returns A new instance of LLMChain configured for tagging.\n *\n * @deprecated\n * Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Will be removed in 0.2.0\n */\nfunction createTaggingChain(schema, llm, options = {}) {\n    const { prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_1__.PromptTemplate.fromTemplate(TAGGING_TEMPLATE), ...rest } = options;\n    const functions = getTaggingFunctions(schema);\n    const outputParser = new _output_parsers_openai_functions_js__WEBPACK_IMPORTED_MODULE_2__.JsonOutputFunctionsParser();\n    return new _llm_chain_js__WEBPACK_IMPORTED_MODULE_3__.LLMChain({\n        llm,\n        prompt,\n        llmKwargs: { functions },\n        outputParser,\n        tags: [\"openai_functions\", \"tagging\"],\n        ...rest,\n    });\n}\n/**\n * Function that creates a tagging chain from a Zod schema. It converts\n * the Zod schema to a JSON schema using the zodToJsonSchema function and\n * then calls createTaggingChain with the converted schema.\n * @param schema The Zod schema which extracted data should match.\n * @param llm LLM to use in the chain. Must support function calling.\n * @param options Options for creating the tagging chain.\n * @returns A new instance of LLMChain configured for tagging.\n *\n * @deprecated\n * Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Will be removed in 0.2.0\n */\nfunction createTaggingChainFromZod(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nschema, llm, options) {\n    return createTaggingChain((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema), llm, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL29wZW5haV9mdW5jdGlvbnMvdGFnZ2luZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUQ7QUFDSTtBQUM2QjtBQUMzQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxxREFBcUQ7QUFDNUQsWUFBWSxTQUFTLG1FQUFjLDJDQUEyQztBQUM5RTtBQUNBLDZCQUE2QiwwRkFBeUI7QUFDdEQsZUFBZSxtREFBUTtBQUN2QjtBQUNBO0FBQ0EscUJBQXFCLFdBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSw4QkFBOEIsbUVBQWU7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL29wZW5haV9mdW5jdGlvbnMvdGFnZ2luZy5qcz9mMTBlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHpvZFRvSnNvblNjaGVtYSB9IGZyb20gXCJ6b2QtdG8tanNvbi1zY2hlbWFcIjtcbmltcG9ydCB7IFByb21wdFRlbXBsYXRlIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9wcm9tcHRzXCI7XG5pbXBvcnQgeyBKc29uT3V0cHV0RnVuY3Rpb25zUGFyc2VyLCB9IGZyb20gXCIuLi8uLi9vdXRwdXRfcGFyc2Vycy9vcGVuYWlfZnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgeyBMTE1DaGFpbiB9IGZyb20gXCIuLi9sbG1fY2hhaW4uanNcIjtcbi8qKlxuICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGFycmF5IG9mIHRhZ2dpbmcgZnVuY3Rpb25zLiBUaGVzZSBmdW5jdGlvbnNcbiAqIGFyZSB1c2VkIHRvIGV4dHJhY3QgcmVsZXZhbnQgaW5mb3JtYXRpb24gZnJvbSBhIHBhc3NhZ2UuXG4gKiBAcGFyYW0gc2NoZW1hIFRoZSBzY2hlbWEgZGVmaW5pbmcgdGhlIHN0cnVjdHVyZSBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzLlxuICogQHJldHVybnMgQW4gYXJyYXkgb2YgdGFnZ2luZyBmdW5jdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGdldFRhZ2dpbmdGdW5jdGlvbnMoc2NoZW1hKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJpbmZvcm1hdGlvbl9leHRyYWN0aW9uXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJFeHRyYWN0cyB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gZnJvbSB0aGUgcGFzc2FnZS5cIixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHNjaGVtYSxcbiAgICAgICAgfSxcbiAgICBdO1xufVxuY29uc3QgVEFHR0lOR19URU1QTEFURSA9IGBFeHRyYWN0IHRoZSBkZXNpcmVkIGluZm9ybWF0aW9uIGZyb20gdGhlIGZvbGxvd2luZyBwYXNzYWdlLlxuXG5QYXNzYWdlOlxue2lucHV0fVxuYDtcbi8qKlxuICogRnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgdGFnZ2luZyBjaGFpbiB1c2luZyB0aGUgcHJvdmlkZWQgc2NoZW1hLFxuICogTExNLCBhbmQgb3B0aW9ucy4gSXQgY29uc3RydWN0cyB0aGUgTExNIHdpdGggdGhlIG5lY2Vzc2FyeVxuICogZnVuY3Rpb25zLCBwcm9tcHQsIG91dHB1dCBwYXJzZXIsIGFuZCB0YWdzLlxuICogQHBhcmFtIHNjaGVtYSBUaGUgc2NoZW1hIGRlZmluaW5nIHRoZSBzdHJ1Y3R1cmUgb2YgZnVuY3Rpb24gcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBsbG0gTExNIHRvIHVzZSBpbiB0aGUgY2hhaW4uIE11c3Qgc3VwcG9ydCBmdW5jdGlvbiBjYWxsaW5nLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhlIHRhZ2dpbmcgY2hhaW4uXG4gKiBAcmV0dXJucyBBIG5ldyBpbnN0YW5jZSBvZiBMTE1DaGFpbiBjb25maWd1cmVkIGZvciB0YWdnaW5nLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBTd2l0Y2ggdG8gZXhwcmVzc2lvbiBsYW5ndWFnZTogaHR0cHM6Ly9qcy5sYW5nY2hhaW4uY29tL2RvY3MvZXhwcmVzc2lvbl9sYW5ndWFnZS9cbiAqIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjIuMFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFnZ2luZ0NoYWluKHNjaGVtYSwgbGxtLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHByb21wdCA9IFByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShUQUdHSU5HX1RFTVBMQVRFKSwgLi4ucmVzdCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBmdW5jdGlvbnMgPSBnZXRUYWdnaW5nRnVuY3Rpb25zKHNjaGVtYSk7XG4gICAgY29uc3Qgb3V0cHV0UGFyc2VyID0gbmV3IEpzb25PdXRwdXRGdW5jdGlvbnNQYXJzZXIoKTtcbiAgICByZXR1cm4gbmV3IExMTUNoYWluKHtcbiAgICAgICAgbGxtLFxuICAgICAgICBwcm9tcHQsXG4gICAgICAgIGxsbUt3YXJnczogeyBmdW5jdGlvbnMgfSxcbiAgICAgICAgb3V0cHV0UGFyc2VyLFxuICAgICAgICB0YWdzOiBbXCJvcGVuYWlfZnVuY3Rpb25zXCIsIFwidGFnZ2luZ1wiXSxcbiAgICAgICAgLi4ucmVzdCxcbiAgICB9KTtcbn1cbi8qKlxuICogRnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgdGFnZ2luZyBjaGFpbiBmcm9tIGEgWm9kIHNjaGVtYS4gSXQgY29udmVydHNcbiAqIHRoZSBab2Qgc2NoZW1hIHRvIGEgSlNPTiBzY2hlbWEgdXNpbmcgdGhlIHpvZFRvSnNvblNjaGVtYSBmdW5jdGlvbiBhbmRcbiAqIHRoZW4gY2FsbHMgY3JlYXRlVGFnZ2luZ0NoYWluIHdpdGggdGhlIGNvbnZlcnRlZCBzY2hlbWEuXG4gKiBAcGFyYW0gc2NoZW1hIFRoZSBab2Qgc2NoZW1hIHdoaWNoIGV4dHJhY3RlZCBkYXRhIHNob3VsZCBtYXRjaC5cbiAqIEBwYXJhbSBsbG0gTExNIHRvIHVzZSBpbiB0aGUgY2hhaW4uIE11c3Qgc3VwcG9ydCBmdW5jdGlvbiBjYWxsaW5nLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhlIHRhZ2dpbmcgY2hhaW4uXG4gKiBAcmV0dXJucyBBIG5ldyBpbnN0YW5jZSBvZiBMTE1DaGFpbiBjb25maWd1cmVkIGZvciB0YWdnaW5nLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBTd2l0Y2ggdG8gZXhwcmVzc2lvbiBsYW5ndWFnZTogaHR0cHM6Ly9qcy5sYW5nY2hhaW4uY29tL2RvY3MvZXhwcmVzc2lvbl9sYW5ndWFnZS9cbiAqIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjIuMFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFnZ2luZ0NoYWluRnJvbVpvZChcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5zY2hlbWEsIGxsbSwgb3B0aW9ucykge1xuICAgIHJldHVybiBjcmVhdGVUYWdnaW5nQ2hhaW4oem9kVG9Kc29uU2NoZW1hKHNjaGVtYSksIGxsbSwgb3B0aW9ucyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/openai_functions/tagging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/openai_moderation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/openai_moderation.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIModerationChain: () => (/* binding */ OpenAIModerationChain)\n/* harmony export */ });\n/* harmony import */ var _langchain_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/openai */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/index.js\");\n/* harmony import */ var _langchain_core_utils_async_caller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/async_caller */ \"(rsc)/./node_modules/@langchain/core/utils/async_caller.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n\n\n\n\n/**\n * Class representing a chain for moderating text using the OpenAI\n * Moderation API. It extends the BaseChain class and implements the\n * OpenAIModerationChainInput interface.\n * @example\n * ```typescript\n * const moderation = new ChatOpenAIModerationChain({ throwError: true });\n *\n * const badString = \"Bad naughty words from user\";\n *\n * try {\n *   const { output: moderatedContent, results } = await moderation.call({\n *     input: badString,\n *   });\n *\n *   if (results[0].category_scores[\"harassment/threatening\"] > 0.01) {\n *     throw new Error(\"Harassment detected!\");\n *   }\n *\n *   const model = new OpenAI({ temperature: 0 });\n *   const promptTemplate = \"Hello, how are you today {person}?\";\n *   const prompt = new PromptTemplate({\n *     template: promptTemplate,\n *     inputVariables: [\"person\"],\n *   });\n *   const chain = new LLMChain({ llm: model, prompt });\n *   const response = await chain.call({ person: moderatedContent });\n *   console.log({ response });\n * } catch (error) {\n *   console.error(\"Naughty words detected!\");\n * }\n * ```\n */\nclass OpenAIModerationChain extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChain {\n    static lc_name() {\n        return \"OpenAIModerationChain\";\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n        };\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"openAIOrganization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"throwError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.throwError = fields?.throwError ?? false;\n        this.openAIApiKey =\n            fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        if (!this.openAIApiKey) {\n            throw new Error(\"OpenAI API key not found\");\n        }\n        this.openAIOrganization = fields?.openAIOrganization;\n        this.clientConfig = {\n            ...fields?.configuration,\n            apiKey: this.openAIApiKey,\n            organization: this.openAIOrganization,\n        };\n        this.client = new _langchain_openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIClient(this.clientConfig);\n        this.caller = new _langchain_core_utils_async_caller__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller(fields ?? {});\n    }\n    _moderate(text, results) {\n        if (results.flagged) {\n            const errorStr = \"Text was found that violates OpenAI's content policy.\";\n            if (this.throwError) {\n                throw new Error(errorStr);\n            }\n            else {\n                return errorStr;\n            }\n        }\n        return text;\n    }\n    async _call(values) {\n        const text = values[this.inputKey];\n        const moderationRequest = {\n            input: text,\n        };\n        let mod;\n        try {\n            mod = await this.caller.call(() => this.client.moderations.create(moderationRequest));\n        }\n        catch (error) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }\n        const output = this._moderate(text, mod.results[0]);\n        return {\n            [this.outputKey]: output,\n            results: mod.results,\n        };\n    }\n    _chainType() {\n        return \"moderation_chain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/openai_moderation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js":
/*!***********************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/load.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadQAChain: () => (/* binding */ loadQAChain),\n/* harmony export */   loadQAMapReduceChain: () => (/* binding */ loadQAMapReduceChain),\n/* harmony export */   loadQARefineChain: () => (/* binding */ loadQARefineChain),\n/* harmony export */   loadQAStuffChain: () => (/* binding */ loadQAStuffChain)\n/* harmony export */ });\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\");\n/* harmony import */ var _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stuff_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js\");\n/* harmony import */ var _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map_reduce_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js\");\n/* harmony import */ var _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./refine_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js\");\n\n\n\n\n\nconst loadQAChain = (llm, params = { type: \"stuff\" }) => {\n    const { type } = params;\n    if (type === \"stuff\") {\n        return loadQAStuffChain(llm, params);\n    }\n    if (type === \"map_reduce\") {\n        return loadQAMapReduceChain(llm, params);\n    }\n    if (type === \"refine\") {\n        return loadQARefineChain(llm, params);\n    }\n    throw new Error(`Invalid _type: ${type}`);\n};\n/**\n * Loads a StuffQAChain based on the provided parameters. It takes an LLM\n * instance and StuffQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a StuffQAChain.\n * @returns A StuffQAChain instance.\n */\nfunction loadQAStuffChain(llm, params = {}) {\n    const { prompt = _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__.QA_PROMPT_SELECTOR.getPrompt(llm), verbose } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt, llm, verbose });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({ llmChain, verbose });\n    return chain;\n}\n/**\n * Loads a MapReduceQAChain based on the provided parameters. It takes an\n * LLM instance and MapReduceQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a MapReduceQAChain.\n * @returns A MapReduceQAChain instance.\n */\nfunction loadQAMapReduceChain(llm, params = {}) {\n    const { combineMapPrompt = _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__.COMBINE_QA_PROMPT_SELECTOR.getPrompt(llm), combinePrompt = _map_reduce_prompts_js__WEBPACK_IMPORTED_MODULE_3__.COMBINE_PROMPT_SELECTOR.getPrompt(llm), verbose, combineLLM, returnIntermediateSteps, } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt: combineMapPrompt, llm, verbose });\n    const combineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: combinePrompt,\n        llm: combineLLM ?? llm,\n        verbose,\n    });\n    const combineDocumentChain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({\n        llmChain: combineLLMChain,\n        documentVariableName: \"summaries\",\n        verbose,\n    });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.MapReduceDocumentsChain({\n        llmChain,\n        combineDocumentChain,\n        returnIntermediateSteps,\n        verbose,\n    });\n    return chain;\n}\n/**\n * Loads a RefineQAChain based on the provided parameters. It takes an LLM\n * instance and RefineQAChainParams as parameters.\n * @param llm An instance of BaseLanguageModel.\n * @param params Parameters for creating a RefineQAChain.\n * @returns A RefineQAChain instance.\n */\nfunction loadQARefineChain(llm, params = {}) {\n    const { questionPrompt = _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__.QUESTION_PROMPT_SELECTOR.getPrompt(llm), refinePrompt = _refine_prompts_js__WEBPACK_IMPORTED_MODULE_4__.REFINE_PROMPT_SELECTOR.getPrompt(llm), refineLLM, verbose, } = params;\n    const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt: questionPrompt, llm, verbose });\n    const refineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n        prompt: refinePrompt,\n        llm: refineLLM ?? llm,\n        verbose,\n    });\n    const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.RefineDocumentsChain({\n        llmChain,\n        refineLLMChain,\n        verbose,\n    });\n    return chain;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9sb2FkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUEyQztBQUNvRTtBQUN2RDtBQUN1QztBQUNQO0FBQ2pGLHFDQUFxQyxlQUFlO0FBQzNELFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsS0FBSztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMENBQTBDO0FBQ2pELFlBQVksU0FBUyxpRUFBa0IsMkJBQTJCO0FBQ2xFLHlCQUF5QixtREFBUSxHQUFHLHNCQUFzQjtBQUMxRCxzQkFBc0IsdUVBQW1CLEdBQUcsbUJBQW1CO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDhDQUE4QztBQUNyRCxZQUFZLG1CQUFtQiw4RUFBMEIsaUNBQWlDLDJFQUF1QixpRUFBaUU7QUFDbEwseUJBQXlCLG1EQUFRLEdBQUcsd0NBQXdDO0FBQzVFLGdDQUFnQyxtREFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDLHVFQUFtQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCLDJFQUF1QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQ0FBMkM7QUFDbEQsWUFBWSxpQkFBaUIsd0VBQXdCLGdDQUFnQyxzRUFBc0IsdUNBQXVDO0FBQ2xKLHlCQUF5QixtREFBUSxHQUFHLHNDQUFzQztBQUMxRSwrQkFBK0IsbURBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHNCQUFzQix3RUFBb0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9sb2FkLmpzPzVlMjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi4vbGxtX2NoYWluLmpzXCI7XG5pbXBvcnQgeyBTdHVmZkRvY3VtZW50c0NoYWluLCBNYXBSZWR1Y2VEb2N1bWVudHNDaGFpbiwgUmVmaW5lRG9jdW1lbnRzQ2hhaW4sIH0gZnJvbSBcIi4uL2NvbWJpbmVfZG9jc19jaGFpbi5qc1wiO1xuaW1wb3J0IHsgUUFfUFJPTVBUX1NFTEVDVE9SIH0gZnJvbSBcIi4vc3R1ZmZfcHJvbXB0cy5qc1wiO1xuaW1wb3J0IHsgQ09NQklORV9QUk9NUFRfU0VMRUNUT1IsIENPTUJJTkVfUUFfUFJPTVBUX1NFTEVDVE9SLCB9IGZyb20gXCIuL21hcF9yZWR1Y2VfcHJvbXB0cy5qc1wiO1xuaW1wb3J0IHsgUVVFU1RJT05fUFJPTVBUX1NFTEVDVE9SLCBSRUZJTkVfUFJPTVBUX1NFTEVDVE9SLCB9IGZyb20gXCIuL3JlZmluZV9wcm9tcHRzLmpzXCI7XG5leHBvcnQgY29uc3QgbG9hZFFBQ2hhaW4gPSAobGxtLCBwYXJhbXMgPSB7IHR5cGU6IFwic3R1ZmZcIiB9KSA9PiB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBwYXJhbXM7XG4gICAgaWYgKHR5cGUgPT09IFwic3R1ZmZcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBU3R1ZmZDaGFpbihsbG0sIHBhcmFtcyk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcIm1hcF9yZWR1Y2VcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBTWFwUmVkdWNlQ2hhaW4obGxtLCBwYXJhbXMpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gXCJyZWZpbmVcIikge1xuICAgICAgICByZXR1cm4gbG9hZFFBUmVmaW5lQ2hhaW4obGxtLCBwYXJhbXMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgX3R5cGU6ICR7dHlwZX1gKTtcbn07XG4vKipcbiAqIExvYWRzIGEgU3R1ZmZRQUNoYWluIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiBJdCB0YWtlcyBhbiBMTE1cbiAqIGluc3RhbmNlIGFuZCBTdHVmZlFBQ2hhaW5QYXJhbXMgYXMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBsbG0gQW4gaW5zdGFuY2Ugb2YgQmFzZUxhbmd1YWdlTW9kZWwuXG4gKiBAcGFyYW0gcGFyYW1zIFBhcmFtZXRlcnMgZm9yIGNyZWF0aW5nIGEgU3R1ZmZRQUNoYWluLlxuICogQHJldHVybnMgQSBTdHVmZlFBQ2hhaW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUUFTdHVmZkNoYWluKGxsbSwgcGFyYW1zID0ge30pIHtcbiAgICBjb25zdCB7IHByb21wdCA9IFFBX1BST01QVF9TRUxFQ1RPUi5nZXRQcm9tcHQobGxtKSwgdmVyYm9zZSB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGxsbUNoYWluID0gbmV3IExMTUNoYWluKHsgcHJvbXB0LCBsbG0sIHZlcmJvc2UgfSk7XG4gICAgY29uc3QgY2hhaW4gPSBuZXcgU3R1ZmZEb2N1bWVudHNDaGFpbih7IGxsbUNoYWluLCB2ZXJib3NlIH0pO1xuICAgIHJldHVybiBjaGFpbjtcbn1cbi8qKlxuICogTG9hZHMgYSBNYXBSZWR1Y2VRQUNoYWluIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBwYXJhbWV0ZXJzLiBJdCB0YWtlcyBhblxuICogTExNIGluc3RhbmNlIGFuZCBNYXBSZWR1Y2VRQUNoYWluUGFyYW1zIGFzIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0gbGxtIEFuIGluc3RhbmNlIG9mIEJhc2VMYW5ndWFnZU1vZGVsLlxuICogQHBhcmFtIHBhcmFtcyBQYXJhbWV0ZXJzIGZvciBjcmVhdGluZyBhIE1hcFJlZHVjZVFBQ2hhaW4uXG4gKiBAcmV0dXJucyBBIE1hcFJlZHVjZVFBQ2hhaW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkUUFNYXBSZWR1Y2VDaGFpbihsbG0sIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgeyBjb21iaW5lTWFwUHJvbXB0ID0gQ09NQklORV9RQV9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIGNvbWJpbmVQcm9tcHQgPSBDT01CSU5FX1BST01QVF9TRUxFQ1RPUi5nZXRQcm9tcHQobGxtKSwgdmVyYm9zZSwgY29tYmluZUxMTSwgcmV0dXJuSW50ZXJtZWRpYXRlU3RlcHMsIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgbGxtQ2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBwcm9tcHQ6IGNvbWJpbmVNYXBQcm9tcHQsIGxsbSwgdmVyYm9zZSB9KTtcbiAgICBjb25zdCBjb21iaW5lTExNQ2hhaW4gPSBuZXcgTExNQ2hhaW4oe1xuICAgICAgICBwcm9tcHQ6IGNvbWJpbmVQcm9tcHQsXG4gICAgICAgIGxsbTogY29tYmluZUxMTSA/PyBsbG0sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgY29uc3QgY29tYmluZURvY3VtZW50Q2hhaW4gPSBuZXcgU3R1ZmZEb2N1bWVudHNDaGFpbih7XG4gICAgICAgIGxsbUNoYWluOiBjb21iaW5lTExNQ2hhaW4sXG4gICAgICAgIGRvY3VtZW50VmFyaWFibGVOYW1lOiBcInN1bW1hcmllc1wiLFxuICAgICAgICB2ZXJib3NlLFxuICAgIH0pO1xuICAgIGNvbnN0IGNoYWluID0gbmV3IE1hcFJlZHVjZURvY3VtZW50c0NoYWluKHtcbiAgICAgICAgbGxtQ2hhaW4sXG4gICAgICAgIGNvbWJpbmVEb2N1bWVudENoYWluLFxuICAgICAgICByZXR1cm5JbnRlcm1lZGlhdGVTdGVwcyxcbiAgICAgICAgdmVyYm9zZSxcbiAgICB9KTtcbiAgICByZXR1cm4gY2hhaW47XG59XG4vKipcbiAqIExvYWRzIGEgUmVmaW5lUUFDaGFpbiBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy4gSXQgdGFrZXMgYW4gTExNXG4gKiBpbnN0YW5jZSBhbmQgUmVmaW5lUUFDaGFpblBhcmFtcyBhcyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIGxsbSBBbiBpbnN0YW5jZSBvZiBCYXNlTGFuZ3VhZ2VNb2RlbC5cbiAqIEBwYXJhbSBwYXJhbXMgUGFyYW1ldGVycyBmb3IgY3JlYXRpbmcgYSBSZWZpbmVRQUNoYWluLlxuICogQHJldHVybnMgQSBSZWZpbmVRQUNoYWluIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFFBUmVmaW5lQ2hhaW4obGxtLCBwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHsgcXVlc3Rpb25Qcm9tcHQgPSBRVUVTVElPTl9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIHJlZmluZVByb21wdCA9IFJFRklORV9QUk9NUFRfU0VMRUNUT1IuZ2V0UHJvbXB0KGxsbSksIHJlZmluZUxMTSwgdmVyYm9zZSwgfSA9IHBhcmFtcztcbiAgICBjb25zdCBsbG1DaGFpbiA9IG5ldyBMTE1DaGFpbih7IHByb21wdDogcXVlc3Rpb25Qcm9tcHQsIGxsbSwgdmVyYm9zZSB9KTtcbiAgICBjb25zdCByZWZpbmVMTE1DaGFpbiA9IG5ldyBMTE1DaGFpbih7XG4gICAgICAgIHByb21wdDogcmVmaW5lUHJvbXB0LFxuICAgICAgICBsbG06IHJlZmluZUxMTSA/PyBsbG0sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgY29uc3QgY2hhaW4gPSBuZXcgUmVmaW5lRG9jdW1lbnRzQ2hhaW4oe1xuICAgICAgICBsbG1DaGFpbixcbiAgICAgICAgcmVmaW5lTExNQ2hhaW4sXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfSk7XG4gICAgcmV0dXJuIGNoYWluO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COMBINE_PROMPT: () => (/* binding */ COMBINE_PROMPT),\n/* harmony export */   COMBINE_PROMPT_SELECTOR: () => (/* binding */ COMBINE_PROMPT_SELECTOR),\n/* harmony export */   COMBINE_QA_PROMPT_SELECTOR: () => (/* binding */ COMBINE_QA_PROMPT_SELECTOR),\n/* harmony export */   DEFAULT_COMBINE_QA_PROMPT: () => (/* binding */ DEFAULT_COMBINE_QA_PROMPT)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */\n\n\nconst qa_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n{context}\nQuestion: {question}\nRelevant text, if any:`;\nconst DEFAULT_COMBINE_QA_PROMPT = \n/*#__PURE__*/\n_langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(qa_template);\nconst system_template = `Use the following portion of a long document to see if any of the text is relevant to answer the question. \nReturn any relevant text verbatim.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_QA_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst COMBINE_QA_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_COMBINE_QA_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_QA_PROMPT],\n]);\nconst combine_prompt = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n\nQUESTION: Which state/country's law governs the interpretation of the contract?\n=========\nContent: This Agreement is governed by English law and the parties submit to the exclusive jurisdiction of the English courts in  relation to any dispute (contractual or non-contractual) concerning this Agreement save that either party may apply to any court for an  injunction or other relief to protect its Intellectual Property Rights.\n\nContent: No Waiver. Failure or delay in exercising any right or remedy under this Agreement shall not constitute a waiver of such (or any other)  right or remedy.\\n\\n11.7 Severability. The invalidity, illegality or unenforceability of any term (or part of a term) of this Agreement shall not affect the continuation  in force of the remainder of the term (if any) and this Agreement.\\n\\n11.8 No Agency. Except as expressly stated otherwise, nothing in this Agreement shall create an agency, partnership or joint venture of any  kind between the parties.\\n\\n11.9 No Third-Party Beneficiaries.\n\nContent: (b) if Google believes, in good faith, that the Distributor has violated or caused Google to violate any Anti-Bribery Laws (as  defined in Clause 8.5) or that such a violation is reasonably likely to occur,\n=========\nFINAL ANSWER: This Agreement is governed by English law.\n\nQUESTION: What did the president say about Michael Jackson?\n=========\nContent: Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \\n\\nLast year COVID-19 kept us apart. This year we are finally together again. \\n\\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \\n\\nWith a duty to one another to the American people to the Constitution. \\n\\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \\n\\nSix days ago, Russia’s Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \\n\\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \\n\\nHe met the Ukrainian people. \\n\\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world. \\n\\nGroups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland.\n\nContent: And we won’t stop. \\n\\nWe have lost so much to COVID-19. Time with one another. And worst of all, so much loss of life. \\n\\nLet’s use this moment to reset. Let’s stop looking at COVID-19 as a partisan dividing line and see it for what it is: A God-awful disease.  \\n\\nLet’s stop seeing each other as enemies, and start seeing each other for who we really are: Fellow Americans.  \\n\\nWe can’t change how divided we’ve been. But we can change how we move forward—on COVID-19 and other issues we must face together. \\n\\nI recently visited the New York City Police Department days after the funerals of Officer Wilbert Mora and his partner, Officer Jason Rivera. \\n\\nThey were responding to a 9-1-1 call when a man shot and killed them with a stolen gun. \\n\\nOfficer Mora was 27 years old. \\n\\nOfficer Rivera was 22. \\n\\nBoth Dominican Americans who’d grown up on the same streets they later chose to patrol as police officers. \\n\\nI spoke with their families and told them that we are forever in debt for their sacrifice, and we will carry on their mission to restore the trust and safety every community deserves.\n\nContent: And a proud Ukrainian people, who have known 30 years  of independence, have repeatedly shown that they will not tolerate anyone who tries to take their country backwards.  \\n\\nTo all Americans, I will be honest with you, as I’ve always promised. A Russian dictator, invading a foreign country, has costs around the world. \\n\\nAnd I’m taking robust action to make sure the pain of our sanctions  is targeted at Russia’s economy. And I will use every tool at our disposal to protect American businesses and consumers. \\n\\nTonight, I can announce that the United States has worked with 30 other countries to release 60 Million barrels of oil from reserves around the world.  \\n\\nAmerica will lead that effort, releasing 30 Million barrels from our own Strategic Petroleum Reserve. And we stand ready to do more if necessary, unified with our allies.  \\n\\nThese steps will help blunt gas prices here at home. And I know the news about what’s happening can seem alarming. \\n\\nBut I want you to know that we are going to be okay.\n\nContent: More support for patients and families. \\n\\nTo get there, I call on Congress to fund ARPA-H, the Advanced Research Projects Agency for Health. \\n\\nIt’s based on DARPA—the Defense Department project that led to the Internet, GPS, and so much more.  \\n\\nARPA-H will have a singular purpose—to drive breakthroughs in cancer, Alzheimer’s, diabetes, and more. \\n\\nA unity agenda for the nation. \\n\\nWe can do this. \\n\\nMy fellow Americans—tonight , we have gathered in a sacred space—the citadel of our democracy. \\n\\nIn this Capitol, generation after generation, Americans have debated great questions amid great strife, and have done great things. \\n\\nWe have fought for freedom, expanded liberty, defeated totalitarianism and terror. \\n\\nAnd built the strongest, freest, and most prosperous nation the world has ever known. \\n\\nNow is the hour. \\n\\nOur moment of responsibility. \\n\\nOur test of resolve and conscience, of history itself. \\n\\nIt is in this moment that our character is formed. Our purpose is found. Our future is forged. \\n\\nWell I know this nation.\n=========\nFINAL ANSWER: The president did not mention Michael Jackson.\n\nQUESTION: {question}\n=========\n{summaries}\n=========\nFINAL ANSWER:`;\nconst COMBINE_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(combine_prompt);\nconst system_combine_template = `Given the following extracted parts of a long document and a question, create a final answer. \nIf you don't know the answer, just say that you don't know. Don't try to make up an answer.\n----------------\n{summaries}`;\nconst combine_messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_combine_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_COMBINE_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(combine_messages);\nconst COMBINE_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(COMBINE_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_COMBINE_PROMPT],\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/map_reduce_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/refine_prompts.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHAT_QUESTION_PROMPT: () => (/* binding */ CHAT_QUESTION_PROMPT),\n/* harmony export */   CHAT_REFINE_PROMPT: () => (/* binding */ CHAT_REFINE_PROMPT),\n/* harmony export */   DEFAULT_REFINE_PROMPT: () => (/* binding */ DEFAULT_REFINE_PROMPT),\n/* harmony export */   DEFAULT_REFINE_PROMPT_TMPL: () => (/* binding */ DEFAULT_REFINE_PROMPT_TMPL),\n/* harmony export */   DEFAULT_TEXT_QA_PROMPT: () => (/* binding */ DEFAULT_TEXT_QA_PROMPT),\n/* harmony export */   DEFAULT_TEXT_QA_PROMPT_TMPL: () => (/* binding */ DEFAULT_TEXT_QA_PROMPT_TMPL),\n/* harmony export */   QUESTION_PROMPT_SELECTOR: () => (/* binding */ QUESTION_PROMPT_SELECTOR),\n/* harmony export */   REFINE_PROMPT_SELECTOR: () => (/* binding */ REFINE_PROMPT_SELECTOR)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */\n\n\nconst DEFAULT_REFINE_PROMPT_TMPL = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nconst DEFAULT_REFINE_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"question\", \"existing_answer\", \"context\"],\n    template: DEFAULT_REFINE_PROMPT_TMPL,\n});\nconst refineTemplate = `The original question is as follows: {question}\nWe have provided an existing answer: {existing_answer}\nWe have the opportunity to refine the existing answer\n(only if needed) with some more context below.\n------------\n{context}\n------------\nGiven the new context, refine the original answer to better answer the question. \nIf the context isn't useful, return the original answer.`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.AIMessagePromptTemplate.fromTemplate(\"{existing_answer}\"),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(refineTemplate),\n];\nconst CHAT_REFINE_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst REFINE_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_REFINE_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_REFINE_PROMPT],\n]);\nconst DEFAULT_TEXT_QA_PROMPT_TMPL = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer the question: {question}`;\nconst DEFAULT_TEXT_QA_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"context\", \"question\"],\n    template: DEFAULT_TEXT_QA_PROMPT_TMPL,\n});\nconst chat_qa_prompt_template = `Context information is below. \n---------------------\n{context}\n---------------------\nGiven the context information and no prior knowledge, answer any questions`;\nconst chat_messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(chat_qa_prompt_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_QUESTION_PROMPT = \n/*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(chat_messages);\nconst QUESTION_PROMPT_SELECTOR = \n/*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_TEXT_QA_PROMPT, [\n    [_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_QUESTION_PROMPT],\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9yZWZpbmVfcHJvbXB0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDZ0s7QUFDcEU7QUFDckYsMEVBQTBFO0FBQ2pGLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ08sZ0RBQWdELG1FQUFjO0FBQ3JFO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOERBQThEO0FBQzlELHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsK0VBQTBCLGdCQUFnQixTQUFTO0FBQ3JFLGtCQUFrQiw0RUFBdUIsZ0JBQWdCLGdCQUFnQjtBQUN6RSxrQkFBa0IsK0VBQTBCO0FBQzVDO0FBQ087QUFDUCxjQUFjLHVFQUFrQjtBQUN6QjtBQUNQLGtCQUFrQix3RkFBeUI7QUFDM0MsS0FBSywwRUFBVztBQUNoQjtBQUNPO0FBQ1A7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw0RUFBNEUsU0FBUztBQUM5RSxpREFBaUQsbUVBQWM7QUFDdEU7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnRkFBMkI7QUFDN0Msa0JBQWtCLCtFQUEwQixnQkFBZ0IsU0FBUztBQUNyRTtBQUNPO0FBQ1AsY0FBYyx1RUFBa0I7QUFDekI7QUFDUCxrQkFBa0Isd0ZBQXlCO0FBQzNDLEtBQUssMEVBQVc7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9yZWZpbmVfcHJvbXB0cy5qcz9iZWY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHNwYWNlZC1jb21tZW50ICovXG5pbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSwgQ2hhdFByb21wdFRlbXBsYXRlLCBTeXN0ZW1NZXNzYWdlUHJvbXB0VGVtcGxhdGUsIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLCBBSU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IsIGlzQ2hhdE1vZGVsLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvZXhhbXBsZV9zZWxlY3RvcnNcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFRklORV9QUk9NUFRfVE1QTCA9IGBUaGUgb3JpZ2luYWwgcXVlc3Rpb24gaXMgYXMgZm9sbG93czoge3F1ZXN0aW9ufVxuV2UgaGF2ZSBwcm92aWRlZCBhbiBleGlzdGluZyBhbnN3ZXI6IHtleGlzdGluZ19hbnN3ZXJ9XG5XZSBoYXZlIHRoZSBvcHBvcnR1bml0eSB0byByZWZpbmUgdGhlIGV4aXN0aW5nIGFuc3dlclxuKG9ubHkgaWYgbmVlZGVkKSB3aXRoIHNvbWUgbW9yZSBjb250ZXh0IGJlbG93LlxuLS0tLS0tLS0tLS0tXG57Y29udGV4dH1cbi0tLS0tLS0tLS0tLVxuR2l2ZW4gdGhlIG5ldyBjb250ZXh0LCByZWZpbmUgdGhlIG9yaWdpbmFsIGFuc3dlciB0byBiZXR0ZXIgYW5zd2VyIHRoZSBxdWVzdGlvbi4gXG5JZiB0aGUgY29udGV4dCBpc24ndCB1c2VmdWwsIHJldHVybiB0aGUgb3JpZ2luYWwgYW5zd2VyLmA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9SRUZJTkVfUFJPTVBUID0gLyojX19QVVJFX18qLyBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgIGlucHV0VmFyaWFibGVzOiBbXCJxdWVzdGlvblwiLCBcImV4aXN0aW5nX2Fuc3dlclwiLCBcImNvbnRleHRcIl0sXG4gICAgdGVtcGxhdGU6IERFRkFVTFRfUkVGSU5FX1BST01QVF9UTVBMLFxufSk7XG5jb25zdCByZWZpbmVUZW1wbGF0ZSA9IGBUaGUgb3JpZ2luYWwgcXVlc3Rpb24gaXMgYXMgZm9sbG93czoge3F1ZXN0aW9ufVxuV2UgaGF2ZSBwcm92aWRlZCBhbiBleGlzdGluZyBhbnN3ZXI6IHtleGlzdGluZ19hbnN3ZXJ9XG5XZSBoYXZlIHRoZSBvcHBvcnR1bml0eSB0byByZWZpbmUgdGhlIGV4aXN0aW5nIGFuc3dlclxuKG9ubHkgaWYgbmVlZGVkKSB3aXRoIHNvbWUgbW9yZSBjb250ZXh0IGJlbG93LlxuLS0tLS0tLS0tLS0tXG57Y29udGV4dH1cbi0tLS0tLS0tLS0tLVxuR2l2ZW4gdGhlIG5ldyBjb250ZXh0LCByZWZpbmUgdGhlIG9yaWdpbmFsIGFuc3dlciB0byBiZXR0ZXIgYW5zd2VyIHRoZSBxdWVzdGlvbi4gXG5JZiB0aGUgY29udGV4dCBpc24ndCB1c2VmdWwsIHJldHVybiB0aGUgb3JpZ2luYWwgYW5zd2VyLmA7XG5jb25zdCBtZXNzYWdlcyA9IFtcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcIntxdWVzdGlvbn1cIiksXG4gICAgLyojX19QVVJFX18qLyBBSU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoXCJ7ZXhpc3RpbmdfYW5zd2VyfVwiKSxcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShyZWZpbmVUZW1wbGF0ZSksXG5dO1xuZXhwb3J0IGNvbnN0IENIQVRfUkVGSU5FX1BST01QVCA9IFxuLyojX19QVVJFX18qLyBDaGF0UHJvbXB0VGVtcGxhdGUuZnJvbU1lc3NhZ2VzKG1lc3NhZ2VzKTtcbmV4cG9ydCBjb25zdCBSRUZJTkVfUFJPTVBUX1NFTEVDVE9SID0gXG4vKiNfX1BVUkVfXyovIG5ldyBDb25kaXRpb25hbFByb21wdFNlbGVjdG9yKERFRkFVTFRfUkVGSU5FX1BST01QVCwgW1xuICAgIFtpc0NoYXRNb2RlbCwgQ0hBVF9SRUZJTkVfUFJPTVBUXSxcbl0pO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEVYVF9RQV9QUk9NUFRfVE1QTCA9IGBDb250ZXh0IGluZm9ybWF0aW9uIGlzIGJlbG93LiBcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxue2NvbnRleHR9XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkdpdmVuIHRoZSBjb250ZXh0IGluZm9ybWF0aW9uIGFuZCBubyBwcmlvciBrbm93bGVkZ2UsIGFuc3dlciB0aGUgcXVlc3Rpb246IHtxdWVzdGlvbn1gO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVEVYVF9RQV9QUk9NUFQgPSAvKiNfX1BVUkVfXyovIG5ldyBQcm9tcHRUZW1wbGF0ZSh7XG4gICAgaW5wdXRWYXJpYWJsZXM6IFtcImNvbnRleHRcIiwgXCJxdWVzdGlvblwiXSxcbiAgICB0ZW1wbGF0ZTogREVGQVVMVF9URVhUX1FBX1BST01QVF9UTVBMLFxufSk7XG5jb25zdCBjaGF0X3FhX3Byb21wdF90ZW1wbGF0ZSA9IGBDb250ZXh0IGluZm9ybWF0aW9uIGlzIGJlbG93LiBcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxue2NvbnRleHR9XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkdpdmVuIHRoZSBjb250ZXh0IGluZm9ybWF0aW9uIGFuZCBubyBwcmlvciBrbm93bGVkZ2UsIGFuc3dlciBhbnkgcXVlc3Rpb25zYDtcbmNvbnN0IGNoYXRfbWVzc2FnZXMgPSBbXG4gICAgLyojX19QVVJFX18qLyBTeXN0ZW1NZXNzYWdlUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKGNoYXRfcWFfcHJvbXB0X3RlbXBsYXRlKSxcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcIntxdWVzdGlvbn1cIiksXG5dO1xuZXhwb3J0IGNvbnN0IENIQVRfUVVFU1RJT05fUFJPTVBUID0gXG4vKiNfX1BVUkVfXyovIENoYXRQcm9tcHRUZW1wbGF0ZS5mcm9tTWVzc2FnZXMoY2hhdF9tZXNzYWdlcyk7XG5leHBvcnQgY29uc3QgUVVFU1RJT05fUFJPTVBUX1NFTEVDVE9SID0gXG4vKiNfX1BVUkVfXyovIG5ldyBDb25kaXRpb25hbFByb21wdFNlbGVjdG9yKERFRkFVTFRfVEVYVF9RQV9QUk9NUFQsIFtcbiAgICBbaXNDaGF0TW9kZWwsIENIQVRfUVVFU1RJT05fUFJPTVBUXSxcbl0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/refine_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js":
/*!********************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_QA_PROMPT: () => (/* binding */ DEFAULT_QA_PROMPT),\n/* harmony export */   QA_PROMPT_SELECTOR: () => (/* binding */ QA_PROMPT_SELECTOR)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/example_selectors */ \"(rsc)/./node_modules/@langchain/core/example_selectors.js\");\n/* eslint-disable spaced-comment */\n\n\nconst DEFAULT_QA_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    template: \"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\\n\\n{context}\\n\\nQuestion: {question}\\nHelpful Answer:\",\n    inputVariables: [\"context\", \"question\"],\n});\nconst system_template = `Use the following pieces of context to answer the users question. \nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}`;\nconst messages = [\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.SystemMessagePromptTemplate.fromTemplate(system_template),\n    /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.HumanMessagePromptTemplate.fromTemplate(\"{question}\"),\n];\nconst CHAT_PROMPT = /*#__PURE__*/ _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.ChatPromptTemplate.fromMessages(messages);\nconst QA_PROMPT_SELECTOR = /*#__PURE__*/ new _langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.ConditionalPromptSelector(DEFAULT_QA_PROMPT, [[_langchain_core_example_selectors__WEBPACK_IMPORTED_MODULE_1__.isChatModel, CHAT_PROMPT]]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3F1ZXN0aW9uX2Fuc3dlcmluZy9zdHVmZl9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUN1STtBQUMzQztBQUNyRiw0Q0FBNEMsbUVBQWM7QUFDakUsc0xBQXNMLFFBQVEsZUFBZSxTQUFTO0FBQ3ROO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUMsUUFBUTtBQUNUO0FBQ0Esa0JBQWtCLGdGQUEyQjtBQUM3QyxrQkFBa0IsK0VBQTBCLGdCQUFnQixTQUFTO0FBQ3JFO0FBQ0Esa0NBQWtDLHVFQUFrQjtBQUM3Qyw2Q0FBNkMsd0ZBQXlCLHNCQUFzQiwwRUFBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvcXVlc3Rpb25fYW5zd2VyaW5nL3N0dWZmX3Byb21wdHMuanM/MTc3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBzcGFjZWQtY29tbWVudCAqL1xuaW1wb3J0IHsgQ2hhdFByb21wdFRlbXBsYXRlLCBTeXN0ZW1NZXNzYWdlUHJvbXB0VGVtcGxhdGUsIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLCBQcm9tcHRUZW1wbGF0ZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IsIGlzQ2hhdE1vZGVsLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvZXhhbXBsZV9zZWxlY3RvcnNcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1FBX1BST01QVCA9IC8qI19fUFVSRV9fKi8gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICB0ZW1wbGF0ZTogXCJVc2UgdGhlIGZvbGxvd2luZyBwaWVjZXMgb2YgY29udGV4dCB0byBhbnN3ZXIgdGhlIHF1ZXN0aW9uIGF0IHRoZSBlbmQuIElmIHlvdSBkb24ndCBrbm93IHRoZSBhbnN3ZXIsIGp1c3Qgc2F5IHRoYXQgeW91IGRvbid0IGtub3csIGRvbid0IHRyeSB0byBtYWtlIHVwIGFuIGFuc3dlci5cXG5cXG57Y29udGV4dH1cXG5cXG5RdWVzdGlvbjoge3F1ZXN0aW9ufVxcbkhlbHBmdWwgQW5zd2VyOlwiLFxuICAgIGlucHV0VmFyaWFibGVzOiBbXCJjb250ZXh0XCIsIFwicXVlc3Rpb25cIl0sXG59KTtcbmNvbnN0IHN5c3RlbV90ZW1wbGF0ZSA9IGBVc2UgdGhlIGZvbGxvd2luZyBwaWVjZXMgb2YgY29udGV4dCB0byBhbnN3ZXIgdGhlIHVzZXJzIHF1ZXN0aW9uLiBcbklmIHlvdSBkb24ndCBrbm93IHRoZSBhbnN3ZXIsIGp1c3Qgc2F5IHRoYXQgeW91IGRvbid0IGtub3csIGRvbid0IHRyeSB0byBtYWtlIHVwIGFuIGFuc3dlci5cbi0tLS0tLS0tLS0tLS0tLS1cbntjb250ZXh0fWA7XG5jb25zdCBtZXNzYWdlcyA9IFtcbiAgICAvKiNfX1BVUkVfXyovIFN5c3RlbU1lc3NhZ2VQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoc3lzdGVtX3RlbXBsYXRlKSxcbiAgICAvKiNfX1BVUkVfXyovIEh1bWFuTWVzc2FnZVByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShcIntxdWVzdGlvbn1cIiksXG5dO1xuY29uc3QgQ0hBVF9QUk9NUFQgPSAvKiNfX1BVUkVfXyovIENoYXRQcm9tcHRUZW1wbGF0ZS5mcm9tTWVzc2FnZXMobWVzc2FnZXMpO1xuZXhwb3J0IGNvbnN0IFFBX1BST01QVF9TRUxFQ1RPUiA9IC8qI19fUFVSRV9fKi8gbmV3IENvbmRpdGlvbmFsUHJvbXB0U2VsZWN0b3IoREVGQVVMVF9RQV9QUk9NUFQsIFtbaXNDaGF0TW9kZWwsIENIQVRfUFJPTVBUXV0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/question_answering/stuff_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/retrieval_qa.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/retrieval_qa.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetrievalQAChain: () => (/* binding */ RetrievalQAChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question_answering/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\");\n\n\n/**\n * @deprecated This class will be removed in 0.3.0. See below for an example implementation using\n * `createRetrievalChain`:\n * Class representing a chain for performing question-answering tasks with\n * a retrieval component.\n * @example\n * ```typescript\n * import { createStuffDocumentsChain } from \"langchain/chains/combine_documents\";\n * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n * import { createRetrievalChain } from \"langchain/chains/retrieval\";\n * import { MemoryVectorStore } from \"langchain/vectorstores/memory\";\n *\n * const documents = [...your documents here];\n * const embeddings = ...your embeddings model;\n * const llm = ...your LLM model;\n *\n * const vectorstore = await MemoryVectorStore.fromDocuments(\n *   documents,\n *   embeddings\n * );\n * const prompt = ChatPromptTemplate.fromTemplate(`Answer the user's question: {input}`);\n *\n * const combineDocsChain = await createStuffDocumentsChain({\n *   llm,\n *   prompt,\n * });\n * const retriever = vectorstore.asRetriever();\n *\n * const retrievalChain = await createRetrievalChain({\n *   combineDocsChain,\n *   retriever,\n * });\n * ```\n */\nclass RetrievalQAChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"RetrievalQAChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\"sourceDocuments\"] : []);\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query\"\n        });\n        Object.defineProperty(this, \"retriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.retriever = fields.retriever;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.returnSourceDocuments =\n            fields.returnSourceDocuments ?? this.returnSourceDocuments;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key \"${this.inputKey}\" not found.`);\n        }\n        const question = values[this.inputKey];\n        const docs = await this.retriever.getRelevantDocuments(question, runManager?.getChild(\"retriever\"));\n        const inputs = { question, input_documents: docs, ...values };\n        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            return {\n                ...result,\n                sourceDocuments: docs,\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"retrieval_qa\";\n    }\n    static async deserialize(_data, _values) {\n        throw new Error(\"Not implemented\");\n    }\n    serialize() {\n        throw new Error(\"Not implemented\");\n    }\n    /**\n     * Creates a new instance of RetrievalQAChain using a BaseLanguageModel\n     * and a BaseRetriever.\n     * @param llm The BaseLanguageModel used to generate a new question.\n     * @param retriever The BaseRetriever used to retrieve relevant documents.\n     * @param options Optional parameters for the RetrievalQAChain.\n     * @returns A new instance of RetrievalQAChain.\n     */\n    static fromLLM(llm, retriever, options) {\n        const qaChain = (0,_question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__.loadQAStuffChain)(llm, {\n            prompt: options?.prompt,\n        });\n        return new this({\n            ...options,\n            retriever,\n            combineDocumentsChain: qaChain,\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JldHJpZXZhbF9xYS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFDMkI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QyxZQUFZLHFCQUFxQjtBQUNqQyxZQUFZLHVCQUF1QjtBQUNuQyxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YsTUFBTTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTywrQkFBK0IsK0NBQVM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGNBQWM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2RUFBZ0I7QUFDeEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvcmV0cmlldmFsX3FhLmpzPzk5MjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUNoYWluIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgbG9hZFFBU3R1ZmZDaGFpbiwgfSBmcm9tIFwiLi9xdWVzdGlvbl9hbnN3ZXJpbmcvbG9hZC5qc1wiO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGNsYXNzIHdpbGwgYmUgcmVtb3ZlZCBpbiAwLjMuMC4gU2VlIGJlbG93IGZvciBhbiBleGFtcGxlIGltcGxlbWVudGF0aW9uIHVzaW5nXG4gKiBgY3JlYXRlUmV0cmlldmFsQ2hhaW5gOlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgY2hhaW4gZm9yIHBlcmZvcm1pbmcgcXVlc3Rpb24tYW5zd2VyaW5nIHRhc2tzIHdpdGhcbiAqIGEgcmV0cmlldmFsIGNvbXBvbmVudC5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBjcmVhdGVTdHVmZkRvY3VtZW50c0NoYWluIH0gZnJvbSBcImxhbmdjaGFpbi9jaGFpbnMvY29tYmluZV9kb2N1bWVudHNcIjtcbiAqIGltcG9ydCB7IENoYXRQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuICogaW1wb3J0IHsgY3JlYXRlUmV0cmlldmFsQ2hhaW4gfSBmcm9tIFwibGFuZ2NoYWluL2NoYWlucy9yZXRyaWV2YWxcIjtcbiAqIGltcG9ydCB7IE1lbW9yeVZlY3RvclN0b3JlIH0gZnJvbSBcImxhbmdjaGFpbi92ZWN0b3JzdG9yZXMvbWVtb3J5XCI7XG4gKlxuICogY29uc3QgZG9jdW1lbnRzID0gWy4uLnlvdXIgZG9jdW1lbnRzIGhlcmVdO1xuICogY29uc3QgZW1iZWRkaW5ncyA9IC4uLnlvdXIgZW1iZWRkaW5ncyBtb2RlbDtcbiAqIGNvbnN0IGxsbSA9IC4uLnlvdXIgTExNIG1vZGVsO1xuICpcbiAqIGNvbnN0IHZlY3RvcnN0b3JlID0gYXdhaXQgTWVtb3J5VmVjdG9yU3RvcmUuZnJvbURvY3VtZW50cyhcbiAqICAgZG9jdW1lbnRzLFxuICogICBlbWJlZGRpbmdzXG4gKiApO1xuICogY29uc3QgcHJvbXB0ID0gQ2hhdFByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShgQW5zd2VyIHRoZSB1c2VyJ3MgcXVlc3Rpb246IHtpbnB1dH1gKTtcbiAqXG4gKiBjb25zdCBjb21iaW5lRG9jc0NoYWluID0gYXdhaXQgY3JlYXRlU3R1ZmZEb2N1bWVudHNDaGFpbih7XG4gKiAgIGxsbSxcbiAqICAgcHJvbXB0LFxuICogfSk7XG4gKiBjb25zdCByZXRyaWV2ZXIgPSB2ZWN0b3JzdG9yZS5hc1JldHJpZXZlcigpO1xuICpcbiAqIGNvbnN0IHJldHJpZXZhbENoYWluID0gYXdhaXQgY3JlYXRlUmV0cmlldmFsQ2hhaW4oe1xuICogICBjb21iaW5lRG9jc0NoYWluLFxuICogICByZXRyaWV2ZXIsXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUmV0cmlldmFsUUFDaGFpbiBleHRlbmRzIEJhc2VDaGFpbiB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlJldHJpZXZhbFFBQ2hhaW5cIjtcbiAgICB9XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmlucHV0S2V5XTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbi5vdXRwdXRLZXlzLmNvbmNhdCh0aGlzLnJldHVyblNvdXJjZURvY3VtZW50cyA/IFtcInNvdXJjZURvY3VtZW50c1wiXSA6IFtdKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlucHV0S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcInF1ZXJ5XCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJldHJpZXZlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb21iaW5lRG9jdW1lbnRzQ2hhaW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmV0dXJuU291cmNlRG9jdW1lbnRzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXRyaWV2ZXIgPSBmaWVsZHMucmV0cmlldmVyO1xuICAgICAgICB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbiA9IGZpZWxkcy5jb21iaW5lRG9jdW1lbnRzQ2hhaW47XG4gICAgICAgIHRoaXMuaW5wdXRLZXkgPSBmaWVsZHMuaW5wdXRLZXkgPz8gdGhpcy5pbnB1dEtleTtcbiAgICAgICAgdGhpcy5yZXR1cm5Tb3VyY2VEb2N1bWVudHMgPVxuICAgICAgICAgICAgZmllbGRzLnJldHVyblNvdXJjZURvY3VtZW50cyA/PyB0aGlzLnJldHVyblNvdXJjZURvY3VtZW50cztcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBhc3luYyBfY2FsbCh2YWx1ZXMsIHJ1bk1hbmFnZXIpIHtcbiAgICAgICAgaWYgKCEodGhpcy5pbnB1dEtleSBpbiB2YWx1ZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFF1ZXN0aW9uIGtleSBcIiR7dGhpcy5pbnB1dEtleX1cIiBub3QgZm91bmQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcXVlc3Rpb24gPSB2YWx1ZXNbdGhpcy5pbnB1dEtleV07XG4gICAgICAgIGNvbnN0IGRvY3MgPSBhd2FpdCB0aGlzLnJldHJpZXZlci5nZXRSZWxldmFudERvY3VtZW50cyhxdWVzdGlvbiwgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoXCJyZXRyaWV2ZXJcIikpO1xuICAgICAgICBjb25zdCBpbnB1dHMgPSB7IHF1ZXN0aW9uLCBpbnB1dF9kb2N1bWVudHM6IGRvY3MsIC4uLnZhbHVlcyB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbi5jYWxsKGlucHV0cywgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoXCJjb21iaW5lX2RvY3VtZW50c1wiKSk7XG4gICAgICAgIGlmICh0aGlzLnJldHVyblNvdXJjZURvY3VtZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgc291cmNlRG9jdW1lbnRzOiBkb2NzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfY2hhaW5UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJyZXRyaWV2YWxfcWFcIjtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIGRlc2VyaWFsaXplKF9kYXRhLCBfdmFsdWVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmV0cmlldmFsUUFDaGFpbiB1c2luZyBhIEJhc2VMYW5ndWFnZU1vZGVsXG4gICAgICogYW5kIGEgQmFzZVJldHJpZXZlci5cbiAgICAgKiBAcGFyYW0gbGxtIFRoZSBCYXNlTGFuZ3VhZ2VNb2RlbCB1c2VkIHRvIGdlbmVyYXRlIGEgbmV3IHF1ZXN0aW9uLlxuICAgICAqIEBwYXJhbSByZXRyaWV2ZXIgVGhlIEJhc2VSZXRyaWV2ZXIgdXNlZCB0byByZXRyaWV2ZSByZWxldmFudCBkb2N1bWVudHMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgdGhlIFJldHJpZXZhbFFBQ2hhaW4uXG4gICAgICogQHJldHVybnMgQSBuZXcgaW5zdGFuY2Ugb2YgUmV0cmlldmFsUUFDaGFpbi5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbUxMTShsbG0sIHJldHJpZXZlciwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBxYUNoYWluID0gbG9hZFFBU3R1ZmZDaGFpbihsbG0sIHtcbiAgICAgICAgICAgIHByb21wdDogb3B0aW9ucz8ucHJvbXB0LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICByZXRyaWV2ZXIsXG4gICAgICAgICAgICBjb21iaW5lRG9jdW1lbnRzQ2hhaW46IHFhQ2hhaW4sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/retrieval_qa.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/router/llm_router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/router/llm_router.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMRouterChain: () => (/* binding */ LLMRouterChain)\n/* harmony export */ });\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _multi_route_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multi_route.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_route.js\");\n\n\n/**\n * A class that represents an LLM router chain in the LangChain framework.\n * It extends the RouterChain class and implements the LLMRouterChainInput\n * interface. It provides additional functionality specific to LLMs and\n * routing based on LLM predictions.\n */\nclass LLMRouterChain extends _multi_route_js__WEBPACK_IMPORTED_MODULE_1__.RouterChain {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"llmChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmChain = fields.llmChain;\n    }\n    get inputKeys() {\n        return this.llmChain.inputKeys;\n    }\n    async _call(values, runManager) {\n        return this.llmChain.predict(values, runManager?.getChild());\n    }\n    _chainType() {\n        return \"llm_router_chain\";\n    }\n    /**\n     * A static method that creates an instance of LLMRouterChain from a\n     * BaseLanguageModel and a BasePromptTemplate. It takes in an optional\n     * options object and returns an instance of LLMRouterChain with the\n     * specified LLMChain.\n     * @param llm A BaseLanguageModel instance.\n     * @param prompt A BasePromptTemplate instance.\n     * @param options Optional LLMRouterChainInput object, excluding \"llmChain\".\n     * @returns An instance of LLMRouterChain.\n     */\n    static fromLLM(llm, prompt, options) {\n        const llmChain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ llm, prompt });\n        return new LLMRouterChain({ ...options, llmChain });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JvdXRlci9sbG1fcm91dGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUNOO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDZCQUE2Qix3REFBVztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwwREFBUSxHQUFHLGFBQWE7QUFDckQsb0NBQW9DLHNCQUFzQjtBQUMxRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9yb3V0ZXIvbGxtX3JvdXRlci5qcz80MWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExMTUNoYWluIH0gZnJvbSBcIi4uLy4uL2NoYWlucy9sbG1fY2hhaW4uanNcIjtcbmltcG9ydCB7IFJvdXRlckNoYWluIH0gZnJvbSBcIi4vbXVsdGlfcm91dGUuanNcIjtcbi8qKlxuICogQSBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYW4gTExNIHJvdXRlciBjaGFpbiBpbiB0aGUgTGFuZ0NoYWluIGZyYW1ld29yay5cbiAqIEl0IGV4dGVuZHMgdGhlIFJvdXRlckNoYWluIGNsYXNzIGFuZCBpbXBsZW1lbnRzIHRoZSBMTE1Sb3V0ZXJDaGFpbklucHV0XG4gKiBpbnRlcmZhY2UuIEl0IHByb3ZpZGVzIGFkZGl0aW9uYWwgZnVuY3Rpb25hbGl0eSBzcGVjaWZpYyB0byBMTE1zIGFuZFxuICogcm91dGluZyBiYXNlZCBvbiBMTE0gcHJlZGljdGlvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBMTE1Sb3V0ZXJDaGFpbiBleHRlbmRzIFJvdXRlckNoYWluIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGxtQ2hhaW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5sbG1DaGFpbiA9IGZpZWxkcy5sbG1DaGFpbjtcbiAgICB9XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGxtQ2hhaW4uaW5wdXRLZXlzO1xuICAgIH1cbiAgICBhc3luYyBfY2FsbCh2YWx1ZXMsIHJ1bk1hbmFnZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGxtQ2hhaW4ucHJlZGljdCh2YWx1ZXMsIHJ1bk1hbmFnZXI/LmdldENoaWxkKCkpO1xuICAgIH1cbiAgICBfY2hhaW5UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJsbG1fcm91dGVyX2NoYWluXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgc3RhdGljIG1ldGhvZCB0aGF0IGNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTExNUm91dGVyQ2hhaW4gZnJvbSBhXG4gICAgICogQmFzZUxhbmd1YWdlTW9kZWwgYW5kIGEgQmFzZVByb21wdFRlbXBsYXRlLiBJdCB0YWtlcyBpbiBhbiBvcHRpb25hbFxuICAgICAqIG9wdGlvbnMgb2JqZWN0IGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIExMTVJvdXRlckNoYWluIHdpdGggdGhlXG4gICAgICogc3BlY2lmaWVkIExMTUNoYWluLlxuICAgICAqIEBwYXJhbSBsbG0gQSBCYXNlTGFuZ3VhZ2VNb2RlbCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gcHJvbXB0IEEgQmFzZVByb21wdFRlbXBsYXRlIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIExMTVJvdXRlckNoYWluSW5wdXQgb2JqZWN0LCBleGNsdWRpbmcgXCJsbG1DaGFpblwiLlxuICAgICAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIExMTVJvdXRlckNoYWluLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTExNKGxsbSwgcHJvbXB0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxsbUNoYWluID0gbmV3IExMTUNoYWluKHsgbGxtLCBwcm9tcHQgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTExNUm91dGVyQ2hhaW4oeyAuLi5vcHRpb25zLCBsbG1DaGFpbiB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/router/llm_router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/router/multi_prompt.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/router/multi_prompt.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiPromptChain: () => (/* binding */ MultiPromptChain)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _multi_route_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multi_route.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_route.js\");\n/* harmony import */ var _multi_prompt_prompt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./multi_prompt_prompt.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_prompt_prompt.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _llm_router_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./llm_router.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/llm_router.js\");\n/* harmony import */ var _chains_conversation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../chains/conversation.js */ \"(rsc)/./node_modules/langchain/dist/chains/conversation.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/utils.js\");\n/* harmony import */ var _output_parsers_router_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../output_parsers/router.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/router.js\");\n\n\n\n\n\n\n\n\n\n/**\n * A class that represents a multi-prompt chain in the LangChain\n * framework. It extends the MultiRouteChain class and provides additional\n * functionality specific to multi-prompt chains.\n * @example\n * ```typescript\n * const multiPromptChain = MultiPromptChain.fromLLMAndPrompts(new ChatOpenAI(), {\n *   promptNames: [\"physics\", \"math\", \"history\"],\n *   promptDescriptions: [\n *     \"Good for answering questions about physics\",\n *     \"Good for answering math questions\",\n *     \"Good for answering questions about history\",\n *   ],\n *   promptTemplates: [\n *     `You are a very smart physics professor. Here is a question:\\n{input}\\n`,\n *     `You are a very good mathematician. Here is a question:\\n{input}\\n`,\n *     `You are a very smart history professor. Here is a question:\\n{input}\\n`,\n *   ],\n * });\n * const result = await multiPromptChain.call({\n *   input: \"What is the speed of light?\",\n * });\n * ```\n */\nclass MultiPromptChain extends _multi_route_js__WEBPACK_IMPORTED_MODULE_1__.MultiRouteChain {\n    /**\n     * @deprecated Use `fromLLMAndPrompts` instead\n     */\n    static fromPrompts(llm, promptNames, promptDescriptions, promptTemplates, defaultChain, options) {\n        return MultiPromptChain.fromLLMAndPrompts(llm, {\n            promptNames,\n            promptDescriptions,\n            promptTemplates,\n            defaultChain,\n            multiRouteChainOpts: options,\n        });\n    }\n    /**\n     * A static method that creates an instance of MultiPromptChain from a\n     * BaseLanguageModel and a set of prompts. It takes in optional parameters\n     * for the default chain and additional options.\n     * @param llm A BaseLanguageModel instance.\n     * @param promptNames An array of prompt names.\n     * @param promptDescriptions An array of prompt descriptions.\n     * @param promptTemplates An array of prompt templates.\n     * @param defaultChain An optional BaseChain instance to be used as the default chain.\n     * @param llmChainOpts Optional parameters for the LLMChainInput, excluding 'llm' and 'prompt'.\n     * @param conversationChainOpts Optional parameters for the LLMChainInput, excluding 'llm' and 'outputKey'.\n     * @param multiRouteChainOpts Optional parameters for the MultiRouteChainInput, excluding 'defaultChain'.\n     * @returns An instance of MultiPromptChain.\n     */\n    static fromLLMAndPrompts(llm, { promptNames, promptDescriptions, promptTemplates, defaultChain, llmChainOpts, conversationChainOpts, multiRouteChainOpts, }) {\n        const destinations = (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.zipEntries)(promptNames, promptDescriptions).map(([name, desc]) => `${name}: ${desc}`);\n        const structuredOutputParserSchema = zod__WEBPACK_IMPORTED_MODULE_8__.z.object({\n            destination: zod__WEBPACK_IMPORTED_MODULE_8__.z\n                .string()\n                .optional()\n                .describe('name of the question answering system to use or \"DEFAULT\"'),\n            next_inputs: zod__WEBPACK_IMPORTED_MODULE_8__.z\n                .object({\n                input: zod__WEBPACK_IMPORTED_MODULE_8__.z\n                    .string()\n                    .describe(\"a potentially modified version of the original input\"),\n            })\n                .describe(\"input to be fed to the next model\"),\n        });\n        const outputParser = new _output_parsers_router_js__WEBPACK_IMPORTED_MODULE_7__.RouterOutputParser(structuredOutputParserSchema);\n        const destinationsStr = destinations.join(\"\\n\");\n        const routerTemplate = (0,_langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.interpolateFString)((0,_multi_prompt_prompt_js__WEBPACK_IMPORTED_MODULE_2__.STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE)(outputParser.getFormatInstructions({ interpolationDepth: 4 })), {\n            destinations: destinationsStr,\n        });\n        const routerPrompt = new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            template: routerTemplate,\n            inputVariables: [\"input\"],\n            outputParser,\n        });\n        const routerChain = _llm_router_js__WEBPACK_IMPORTED_MODULE_4__.LLMRouterChain.fromLLM(llm, routerPrompt);\n        const destinationChains = (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.zipEntries)(promptNames, promptTemplates).reduce((acc, [name, template]) => {\n            let myPrompt;\n            if (typeof template === \"object\") {\n                myPrompt = template;\n            }\n            else if (typeof template === \"string\") {\n                myPrompt = new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n                    template: template,\n                    inputVariables: [\"input\"],\n                });\n            }\n            else {\n                throw new Error(\"Invalid prompt template\");\n            }\n            acc[name] = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_3__.LLMChain({\n                ...llmChainOpts,\n                llm,\n                prompt: myPrompt,\n            });\n            return acc;\n        }, {});\n        const convChain = new _chains_conversation_js__WEBPACK_IMPORTED_MODULE_5__.ConversationChain({\n            ...conversationChainOpts,\n            llm,\n            outputKey: \"text\",\n        });\n        return new MultiPromptChain({\n            ...multiRouteChainOpts,\n            routerChain,\n            destinationChains,\n            defaultChain: defaultChain ?? convChain,\n        });\n    }\n    _chainType() {\n        return \"multi_prompt_chain\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/router/multi_prompt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/router/multi_prompt_prompt.js":
/*!**************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/router/multi_prompt_prompt.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MULTI_PROMPT_ROUTER_TEMPLATE: () => (/* binding */ MULTI_PROMPT_ROUTER_TEMPLATE),\n/* harmony export */   STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE: () => (/* binding */ STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE)\n/* harmony export */ });\nconst MULTI_PROMPT_ROUTER_TEMPLATE = `Given a raw text input to a language model, select the model prompt best suited for the input. You will be given the names of the available prompts and a description of what the prompt is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response from the language model.\n\n<< FORMATTING >>\nReturn a markdown code snippet with a JSON object formatted to look like:\n\\`\\`\\`json\n{{{{\n    \"destination\": string \\\\ name of the prompt to use or \"DEFAULT\"\n    \"next_inputs\": string \\\\ a potentially modified version of the original input\n}}}}\n\\`\\`\\`\n\nREMEMBER: \"destination\" MUST be one of the candidate prompt names specified below OR it can be \"DEFAULT\" if the input is not well suited for any of the candidate prompts.\nREMEMBER: \"next_inputs\" can just be the original input if you don't think any modifications are needed.\n\n<< CANDIDATE PROMPTS >>\n{destinations}\n\n<< INPUT >>\n{{input}}\n\n<< OUTPUT >>\n`;\nconst STRUCTURED_MULTI_PROMPT_ROUTER_TEMPLATE = (formatting) => `Given a raw text input to a language model, select the model prompt best suited for the input. You will be given the names of the available prompts and a description of what the prompt is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response from the language model.\n\n<< FORMATTING >>\n${formatting}\n\nREMEMBER: \"destination\" MUST be one of the candidate prompt names specified below OR it can be \"DEFAULT\" if the input is not well suited for any of the candidate prompts.\nREMEMBER: \"next_inputs.input\" can just be the original input if you don't think any modifications are needed.\n\n<< CANDIDATE PROMPTS >>\n{destinations}\n\n<< INPUT >>\n{{input}}\n\n<< OUTPUT >>\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JvdXRlci9tdWx0aV9wcm9tcHRfcHJvbXB0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNPOztBQUVQO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLEVBQUU7O0FBRUY7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvcm91dGVyL211bHRpX3Byb21wdF9wcm9tcHQuanM/OTAxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgTVVMVElfUFJPTVBUX1JPVVRFUl9URU1QTEFURSA9IGBHaXZlbiBhIHJhdyB0ZXh0IGlucHV0IHRvIGEgbGFuZ3VhZ2UgbW9kZWwsIHNlbGVjdCB0aGUgbW9kZWwgcHJvbXB0IGJlc3Qgc3VpdGVkIGZvciB0aGUgaW5wdXQuIFlvdSB3aWxsIGJlIGdpdmVuIHRoZSBuYW1lcyBvZiB0aGUgYXZhaWxhYmxlIHByb21wdHMgYW5kIGEgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgcHJvbXB0IGlzIGJlc3Qgc3VpdGVkIGZvci4gWW91IG1heSBhbHNvIHJldmlzZSB0aGUgb3JpZ2luYWwgaW5wdXQgaWYgeW91IHRoaW5rIHRoYXQgcmV2aXNpbmcgaXQgd2lsbCB1bHRpbWF0ZWx5IGxlYWQgdG8gYSBiZXR0ZXIgcmVzcG9uc2UgZnJvbSB0aGUgbGFuZ3VhZ2UgbW9kZWwuXG5cbjw8IEZPUk1BVFRJTkcgPj5cblJldHVybiBhIG1hcmtkb3duIGNvZGUgc25pcHBldCB3aXRoIGEgSlNPTiBvYmplY3QgZm9ybWF0dGVkIHRvIGxvb2sgbGlrZTpcblxcYFxcYFxcYGpzb25cbnt7e3tcbiAgICBcImRlc3RpbmF0aW9uXCI6IHN0cmluZyBcXFxcIG5hbWUgb2YgdGhlIHByb21wdCB0byB1c2Ugb3IgXCJERUZBVUxUXCJcbiAgICBcIm5leHRfaW5wdXRzXCI6IHN0cmluZyBcXFxcIGEgcG90ZW50aWFsbHkgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgb3JpZ2luYWwgaW5wdXRcbn19fX1cblxcYFxcYFxcYFxuXG5SRU1FTUJFUjogXCJkZXN0aW5hdGlvblwiIE1VU1QgYmUgb25lIG9mIHRoZSBjYW5kaWRhdGUgcHJvbXB0IG5hbWVzIHNwZWNpZmllZCBiZWxvdyBPUiBpdCBjYW4gYmUgXCJERUZBVUxUXCIgaWYgdGhlIGlucHV0IGlzIG5vdCB3ZWxsIHN1aXRlZCBmb3IgYW55IG9mIHRoZSBjYW5kaWRhdGUgcHJvbXB0cy5cblJFTUVNQkVSOiBcIm5leHRfaW5wdXRzXCIgY2FuIGp1c3QgYmUgdGhlIG9yaWdpbmFsIGlucHV0IGlmIHlvdSBkb24ndCB0aGluayBhbnkgbW9kaWZpY2F0aW9ucyBhcmUgbmVlZGVkLlxuXG48PCBDQU5ESURBVEUgUFJPTVBUUyA+Plxue2Rlc3RpbmF0aW9uc31cblxuPDwgSU5QVVQgPj5cbnt7aW5wdXR9fVxuXG48PCBPVVRQVVQgPj5cbmA7XG5leHBvcnQgY29uc3QgU1RSVUNUVVJFRF9NVUxUSV9QUk9NUFRfUk9VVEVSX1RFTVBMQVRFID0gKGZvcm1hdHRpbmcpID0+IGBHaXZlbiBhIHJhdyB0ZXh0IGlucHV0IHRvIGEgbGFuZ3VhZ2UgbW9kZWwsIHNlbGVjdCB0aGUgbW9kZWwgcHJvbXB0IGJlc3Qgc3VpdGVkIGZvciB0aGUgaW5wdXQuIFlvdSB3aWxsIGJlIGdpdmVuIHRoZSBuYW1lcyBvZiB0aGUgYXZhaWxhYmxlIHByb21wdHMgYW5kIGEgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgcHJvbXB0IGlzIGJlc3Qgc3VpdGVkIGZvci4gWW91IG1heSBhbHNvIHJldmlzZSB0aGUgb3JpZ2luYWwgaW5wdXQgaWYgeW91IHRoaW5rIHRoYXQgcmV2aXNpbmcgaXQgd2lsbCB1bHRpbWF0ZWx5IGxlYWQgdG8gYSBiZXR0ZXIgcmVzcG9uc2UgZnJvbSB0aGUgbGFuZ3VhZ2UgbW9kZWwuXG5cbjw8IEZPUk1BVFRJTkcgPj5cbiR7Zm9ybWF0dGluZ31cblxuUkVNRU1CRVI6IFwiZGVzdGluYXRpb25cIiBNVVNUIGJlIG9uZSBvZiB0aGUgY2FuZGlkYXRlIHByb21wdCBuYW1lcyBzcGVjaWZpZWQgYmVsb3cgT1IgaXQgY2FuIGJlIFwiREVGQVVMVFwiIGlmIHRoZSBpbnB1dCBpcyBub3Qgd2VsbCBzdWl0ZWQgZm9yIGFueSBvZiB0aGUgY2FuZGlkYXRlIHByb21wdHMuXG5SRU1FTUJFUjogXCJuZXh0X2lucHV0cy5pbnB1dFwiIGNhbiBqdXN0IGJlIHRoZSBvcmlnaW5hbCBpbnB1dCBpZiB5b3UgZG9uJ3QgdGhpbmsgYW55IG1vZGlmaWNhdGlvbnMgYXJlIG5lZWRlZC5cblxuPDwgQ0FORElEQVRFIFBST01QVFMgPj5cbntkZXN0aW5hdGlvbnN9XG5cbjw8IElOUFVUID4+XG57e2lucHV0fX1cblxuPDwgT1VUUFVUID4+XG5gO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/router/multi_prompt_prompt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/router/multi_retrieval_prompt.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/router/multi_retrieval_prompt.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MULTI_RETRIEVAL_ROUTER_TEMPLATE: () => (/* binding */ MULTI_RETRIEVAL_ROUTER_TEMPLATE),\n/* harmony export */   STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE: () => (/* binding */ STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE)\n/* harmony export */ });\nconst MULTI_RETRIEVAL_ROUTER_TEMPLATE = `Given a query to a question answering system, select the system best suited for the input. You will be given the names of the available systems and a description of what questions the system is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response.\n\n<< FORMATTING >>\nReturn a markdown code snippet with a JSON object formatted to look like:\n\\`\\`\\`json\n{{{{\n    \"destination\": string \\\\ name of the question answering system to use or \"DEFAULT\"\n    \"next_inputs\": string \\\\ a potentially modified version of the original input\n}}}}\n\\`\\`\\`\n\nREMEMBER: \"destination\" MUST be one of the candidate prompt names specified below OR it can be \"DEFAULT\" if the input is not well suited for any of the candidate prompts.\nREMEMBER: \"next_inputs\" can just be the original input if you don't think any modifications are needed.\n\n<< CANDIDATE PROMPTS >>\n{destinations}\n\n<< INPUT >>\n{{input}}\n\n<< OUTPUT >>\n`;\nconst STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE = (formatting) => `Given a query to a question answering system, select the system best suited for the input. You will be given the names of the available systems and a description of what questions the system is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response.\n\n<< FORMATTING >>\n${formatting}\n\nREMEMBER: \"destination\" MUST be one of the candidate prompt names specified below OR it can be \"DEFAULT\" if the input is not well suited for any of the candidate prompts.\nREMEMBER: \"next_inputs.query\" can just be the original input if you don't think any modifications are needed.\n\n<< CANDIDATE PROMPTS >>\n{destinations}\n\n<< INPUT >>\n{{input}}\n\n<< OUTPUT >>\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JvdXRlci9tdWx0aV9yZXRyaWV2YWxfcHJvbXB0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNPOztBQUVQO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLEVBQUU7O0FBRUY7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvcm91dGVyL211bHRpX3JldHJpZXZhbF9wcm9tcHQuanM/MzJiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgTVVMVElfUkVUUklFVkFMX1JPVVRFUl9URU1QTEFURSA9IGBHaXZlbiBhIHF1ZXJ5IHRvIGEgcXVlc3Rpb24gYW5zd2VyaW5nIHN5c3RlbSwgc2VsZWN0IHRoZSBzeXN0ZW0gYmVzdCBzdWl0ZWQgZm9yIHRoZSBpbnB1dC4gWW91IHdpbGwgYmUgZ2l2ZW4gdGhlIG5hbWVzIG9mIHRoZSBhdmFpbGFibGUgc3lzdGVtcyBhbmQgYSBkZXNjcmlwdGlvbiBvZiB3aGF0IHF1ZXN0aW9ucyB0aGUgc3lzdGVtIGlzIGJlc3Qgc3VpdGVkIGZvci4gWW91IG1heSBhbHNvIHJldmlzZSB0aGUgb3JpZ2luYWwgaW5wdXQgaWYgeW91IHRoaW5rIHRoYXQgcmV2aXNpbmcgaXQgd2lsbCB1bHRpbWF0ZWx5IGxlYWQgdG8gYSBiZXR0ZXIgcmVzcG9uc2UuXG5cbjw8IEZPUk1BVFRJTkcgPj5cblJldHVybiBhIG1hcmtkb3duIGNvZGUgc25pcHBldCB3aXRoIGEgSlNPTiBvYmplY3QgZm9ybWF0dGVkIHRvIGxvb2sgbGlrZTpcblxcYFxcYFxcYGpzb25cbnt7e3tcbiAgICBcImRlc3RpbmF0aW9uXCI6IHN0cmluZyBcXFxcIG5hbWUgb2YgdGhlIHF1ZXN0aW9uIGFuc3dlcmluZyBzeXN0ZW0gdG8gdXNlIG9yIFwiREVGQVVMVFwiXG4gICAgXCJuZXh0X2lucHV0c1wiOiBzdHJpbmcgXFxcXCBhIHBvdGVudGlhbGx5IG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIG9yaWdpbmFsIGlucHV0XG59fX19XG5cXGBcXGBcXGBcblxuUkVNRU1CRVI6IFwiZGVzdGluYXRpb25cIiBNVVNUIGJlIG9uZSBvZiB0aGUgY2FuZGlkYXRlIHByb21wdCBuYW1lcyBzcGVjaWZpZWQgYmVsb3cgT1IgaXQgY2FuIGJlIFwiREVGQVVMVFwiIGlmIHRoZSBpbnB1dCBpcyBub3Qgd2VsbCBzdWl0ZWQgZm9yIGFueSBvZiB0aGUgY2FuZGlkYXRlIHByb21wdHMuXG5SRU1FTUJFUjogXCJuZXh0X2lucHV0c1wiIGNhbiBqdXN0IGJlIHRoZSBvcmlnaW5hbCBpbnB1dCBpZiB5b3UgZG9uJ3QgdGhpbmsgYW55IG1vZGlmaWNhdGlvbnMgYXJlIG5lZWRlZC5cblxuPDwgQ0FORElEQVRFIFBST01QVFMgPj5cbntkZXN0aW5hdGlvbnN9XG5cbjw8IElOUFVUID4+XG57e2lucHV0fX1cblxuPDwgT1VUUFVUID4+XG5gO1xuZXhwb3J0IGNvbnN0IFNUUlVDVFVSRURfTVVMVElfUkVUUklFVkFMX1JPVVRFUl9URU1QTEFURSA9IChmb3JtYXR0aW5nKSA9PiBgR2l2ZW4gYSBxdWVyeSB0byBhIHF1ZXN0aW9uIGFuc3dlcmluZyBzeXN0ZW0sIHNlbGVjdCB0aGUgc3lzdGVtIGJlc3Qgc3VpdGVkIGZvciB0aGUgaW5wdXQuIFlvdSB3aWxsIGJlIGdpdmVuIHRoZSBuYW1lcyBvZiB0aGUgYXZhaWxhYmxlIHN5c3RlbXMgYW5kIGEgZGVzY3JpcHRpb24gb2Ygd2hhdCBxdWVzdGlvbnMgdGhlIHN5c3RlbSBpcyBiZXN0IHN1aXRlZCBmb3IuIFlvdSBtYXkgYWxzbyByZXZpc2UgdGhlIG9yaWdpbmFsIGlucHV0IGlmIHlvdSB0aGluayB0aGF0IHJldmlzaW5nIGl0IHdpbGwgdWx0aW1hdGVseSBsZWFkIHRvIGEgYmV0dGVyIHJlc3BvbnNlLlxuXG48PCBGT1JNQVRUSU5HID4+XG4ke2Zvcm1hdHRpbmd9XG5cblJFTUVNQkVSOiBcImRlc3RpbmF0aW9uXCIgTVVTVCBiZSBvbmUgb2YgdGhlIGNhbmRpZGF0ZSBwcm9tcHQgbmFtZXMgc3BlY2lmaWVkIGJlbG93IE9SIGl0IGNhbiBiZSBcIkRFRkFVTFRcIiBpZiB0aGUgaW5wdXQgaXMgbm90IHdlbGwgc3VpdGVkIGZvciBhbnkgb2YgdGhlIGNhbmRpZGF0ZSBwcm9tcHRzLlxuUkVNRU1CRVI6IFwibmV4dF9pbnB1dHMucXVlcnlcIiBjYW4ganVzdCBiZSB0aGUgb3JpZ2luYWwgaW5wdXQgaWYgeW91IGRvbid0IHRoaW5rIGFueSBtb2RpZmljYXRpb25zIGFyZSBuZWVkZWQuXG5cbjw8IENBTkRJREFURSBQUk9NUFRTID4+XG57ZGVzdGluYXRpb25zfVxuXG48PCBJTlBVVCA+Plxue3tpbnB1dH19XG5cbjw8IE9VVFBVVCA+PlxuYDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/router/multi_retrieval_prompt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/router/multi_retrieval_qa.js":
/*!*************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/router/multi_retrieval_qa.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiRetrievalQAChain: () => (/* binding */ MultiRetrievalQAChain)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _multi_route_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multi_route.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_route.js\");\n/* harmony import */ var _llm_router_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./llm_router.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/llm_router.js\");\n/* harmony import */ var _chains_conversation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chains/conversation.js */ \"(rsc)/./node_modules/langchain/dist/chains/conversation.js\");\n/* harmony import */ var _multi_retrieval_prompt_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./multi_retrieval_prompt.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/multi_retrieval_prompt.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/langchain/dist/chains/router/utils.js\");\n/* harmony import */ var _chains_retrieval_qa_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../chains/retrieval_qa.js */ \"(rsc)/./node_modules/langchain/dist/chains/retrieval_qa.js\");\n/* harmony import */ var _output_parsers_router_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../output_parsers/router.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/router.js\");\n\n\n\n\n\n\n\n\n\n/**\n * A class that represents a multi-retrieval question answering chain in\n * the LangChain framework. It extends the MultiRouteChain class and\n * provides additional functionality specific to multi-retrieval QA\n * chains.\n * @example\n * ```typescript\n * const multiRetrievalQAChain = MultiRetrievalQAChain.fromLLMAndRetrievers(\n *   new ChatOpenAI(),\n *   {\n *     retrieverNames: [\"aqua teen\", \"mst3k\", \"animaniacs\"],\n *     retrieverDescriptions: [\n *       \"Good for answering questions about Aqua Teen Hunger Force theme song\",\n *       \"Good for answering questions about Mystery Science Theater 3000 theme song\",\n *       \"Good for answering questions about Animaniacs theme song\",\n *     ],\n *     retrievers: [\n *       new MemoryVectorStore().asRetriever(3),\n *       new MemoryVectorStore().asRetriever(3),\n *       new MemoryVectorStore().asRetriever(3),\n *     ],\n *     retrievalQAChainOpts: {\n *       returnSourceDocuments: true,\n *     },\n *   },\n * );\n *\n * const result = await multiRetrievalQAChain.call({\n *   input:\n *     \"In the Aqua Teen Hunger Force theme song, who calls himself the mike rula?\",\n * });\n *\n * console.log(result.sourceDocuments, result.text);\n * ```\n */\nclass MultiRetrievalQAChain extends _multi_route_js__WEBPACK_IMPORTED_MODULE_1__.MultiRouteChain {\n    get outputKeys() {\n        return [\"result\"];\n    }\n    /**\n     * @deprecated Use `fromRetrieversAndPrompts` instead\n     */\n    static fromRetrievers(llm, retrieverNames, retrieverDescriptions, retrievers, retrieverPrompts, defaults, options) {\n        return MultiRetrievalQAChain.fromLLMAndRetrievers(llm, {\n            retrieverNames,\n            retrieverDescriptions,\n            retrievers,\n            retrieverPrompts,\n            defaults,\n            multiRetrievalChainOpts: options,\n        });\n    }\n    /**\n     * A static method that creates an instance of MultiRetrievalQAChain from\n     * a BaseLanguageModel and a set of retrievers. It takes in optional\n     * parameters for the retriever names, descriptions, prompts, defaults,\n     * and additional options. It is an alternative method to fromRetrievers\n     * and provides more flexibility in configuring the underlying chains.\n     * @param llm A BaseLanguageModel instance.\n     * @param retrieverNames An array of retriever names.\n     * @param retrieverDescriptions An array of retriever descriptions.\n     * @param retrievers An array of BaseRetrieverInterface instances.\n     * @param retrieverPrompts An optional array of PromptTemplate instances for the retrievers.\n     * @param defaults An optional MultiRetrievalDefaults instance.\n     * @param multiRetrievalChainOpts Additional optional parameters for the multi-retrieval chain.\n     * @param retrievalQAChainOpts Additional optional parameters for the retrieval QA chain.\n     * @returns A new instance of MultiRetrievalQAChain.\n     */\n    static fromLLMAndRetrievers(llm, { retrieverNames, retrieverDescriptions, retrievers, retrieverPrompts, defaults, multiRetrievalChainOpts, retrievalQAChainOpts, }) {\n        const { defaultRetriever, defaultPrompt, defaultChain } = defaults ?? {};\n        if (defaultPrompt && !defaultRetriever) {\n            throw new Error(\"`default_retriever` must be specified if `default_prompt` is \\nprovided. Received only `default_prompt`.\");\n        }\n        const destinations = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.zipEntries)(retrieverNames, retrieverDescriptions).map(([name, desc]) => `${name}: ${desc}`);\n        const structuredOutputParserSchema = zod__WEBPACK_IMPORTED_MODULE_8__.z.object({\n            destination: zod__WEBPACK_IMPORTED_MODULE_8__.z\n                .string()\n                .optional()\n                .describe('name of the question answering system to use or \"DEFAULT\"'),\n            next_inputs: zod__WEBPACK_IMPORTED_MODULE_8__.z\n                .object({\n                query: zod__WEBPACK_IMPORTED_MODULE_8__.z\n                    .string()\n                    .describe(\"a potentially modified version of the original input\"),\n            })\n                .describe(\"input to be fed to the next model\"),\n        });\n        const outputParser = new _output_parsers_router_js__WEBPACK_IMPORTED_MODULE_7__.RouterOutputParser(structuredOutputParserSchema);\n        const destinationsStr = destinations.join(\"\\n\");\n        const routerTemplate = (0,_langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.interpolateFString)((0,_multi_retrieval_prompt_js__WEBPACK_IMPORTED_MODULE_4__.STRUCTURED_MULTI_RETRIEVAL_ROUTER_TEMPLATE)(outputParser.getFormatInstructions({ interpolationDepth: 4 })), {\n            destinations: destinationsStr,\n        });\n        const routerPrompt = new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n            template: routerTemplate,\n            inputVariables: [\"input\"],\n            outputParser,\n        });\n        const routerChain = _llm_router_js__WEBPACK_IMPORTED_MODULE_2__.LLMRouterChain.fromLLM(llm, routerPrompt);\n        const prompts = retrieverPrompts ?? retrievers.map(() => null);\n        const destinationChains = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.zipEntries)(retrieverNames, retrievers, prompts).reduce((acc, [name, retriever, prompt]) => {\n            const opt = retrievalQAChainOpts ?? {};\n            if (prompt) {\n                opt.prompt = prompt;\n            }\n            acc[name] = _chains_retrieval_qa_js__WEBPACK_IMPORTED_MODULE_6__.RetrievalQAChain.fromLLM(llm, retriever, opt);\n            return acc;\n        }, {});\n        let _defaultChain;\n        if (defaultChain) {\n            _defaultChain = defaultChain;\n        }\n        else if (defaultRetriever) {\n            _defaultChain = _chains_retrieval_qa_js__WEBPACK_IMPORTED_MODULE_6__.RetrievalQAChain.fromLLM(llm, defaultRetriever, {\n                ...retrievalQAChainOpts,\n                prompt: defaultPrompt,\n            });\n        }\n        else {\n            const promptTemplate = _chains_conversation_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_TEMPLATE.replace(\"input\", \"query\");\n            const prompt = new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n                template: promptTemplate,\n                inputVariables: [\"history\", \"query\"],\n            });\n            _defaultChain = new _chains_conversation_js__WEBPACK_IMPORTED_MODULE_3__.ConversationChain({\n                llm,\n                prompt,\n                outputKey: \"result\",\n            });\n        }\n        return new MultiRetrievalQAChain({\n            ...multiRetrievalChainOpts,\n            routerChain,\n            destinationChains,\n            defaultChain: _defaultChain,\n        });\n    }\n    _chainType() {\n        return \"multi_retrieval_qa_chain\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JvdXRlci9tdWx0aV9yZXRyaWV2YWxfcWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUF3QjtBQUNxRDtBQUMxQjtBQUNGO0FBQ21DO0FBQ0s7QUFDakQ7QUFDeUI7QUFDRztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0NBQW9DLDREQUFlO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywrSEFBK0g7QUFDdEssZ0JBQWdCLGdEQUFnRDtBQUNoRTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscURBQVUsaUVBQWlFLEtBQUssSUFBSSxLQUFLO0FBQ3RILDZDQUE2QyxrQ0FBQztBQUM5Qyx5QkFBeUIsa0NBQUM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtDQUFDO0FBQzFCO0FBQ0EsdUJBQXVCLGtDQUFDO0FBQ3hCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1QsaUNBQWlDLHlFQUFrQjtBQUNuRDtBQUNBLCtCQUErQiwyRUFBa0IsQ0FBQyxzR0FBMEMsc0NBQXNDLHVCQUF1QjtBQUN6SjtBQUNBLFNBQVM7QUFDVCxpQ0FBaUMsbUVBQWM7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDRCQUE0QiwwREFBYztBQUMxQztBQUNBLGtDQUFrQyxxREFBVTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixxRUFBZ0I7QUFDeEM7QUFDQSxTQUFTLElBQUk7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFFQUFnQjtBQUM1QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxtQ0FBbUMscUVBQWdCO0FBQ25ELCtCQUErQixtRUFBYztBQUM3QztBQUNBO0FBQ0EsYUFBYTtBQUNiLGdDQUFnQyxzRUFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9yb3V0ZXIvbXVsdGlfcmV0cmlldmFsX3FhLmpzPzhlYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IGludGVycG9sYXRlRlN0cmluZywgUHJvbXB0VGVtcGxhdGUgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3Byb21wdHNcIjtcbmltcG9ydCB7IE11bHRpUm91dGVDaGFpbiB9IGZyb20gXCIuL211bHRpX3JvdXRlLmpzXCI7XG5pbXBvcnQgeyBMTE1Sb3V0ZXJDaGFpbiB9IGZyb20gXCIuL2xsbV9yb3V0ZXIuanNcIjtcbmltcG9ydCB7IENvbnZlcnNhdGlvbkNoYWluLCBERUZBVUxUX1RFTVBMQVRFLCB9IGZyb20gXCIuLi8uLi9jaGFpbnMvY29udmVyc2F0aW9uLmpzXCI7XG5pbXBvcnQgeyBTVFJVQ1RVUkVEX01VTFRJX1JFVFJJRVZBTF9ST1VURVJfVEVNUExBVEUgfSBmcm9tIFwiLi9tdWx0aV9yZXRyaWV2YWxfcHJvbXB0LmpzXCI7XG5pbXBvcnQgeyB6aXBFbnRyaWVzIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IFJldHJpZXZhbFFBQ2hhaW4sIH0gZnJvbSBcIi4uLy4uL2NoYWlucy9yZXRyaWV2YWxfcWEuanNcIjtcbmltcG9ydCB7IFJvdXRlck91dHB1dFBhcnNlciB9IGZyb20gXCIuLi8uLi9vdXRwdXRfcGFyc2Vycy9yb3V0ZXIuanNcIjtcbi8qKlxuICogQSBjbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBtdWx0aS1yZXRyaWV2YWwgcXVlc3Rpb24gYW5zd2VyaW5nIGNoYWluIGluXG4gKiB0aGUgTGFuZ0NoYWluIGZyYW1ld29yay4gSXQgZXh0ZW5kcyB0aGUgTXVsdGlSb3V0ZUNoYWluIGNsYXNzIGFuZFxuICogcHJvdmlkZXMgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IHNwZWNpZmljIHRvIG11bHRpLXJldHJpZXZhbCBRQVxuICogY2hhaW5zLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IG11bHRpUmV0cmlldmFsUUFDaGFpbiA9IE11bHRpUmV0cmlldmFsUUFDaGFpbi5mcm9tTExNQW5kUmV0cmlldmVycyhcbiAqICAgbmV3IENoYXRPcGVuQUkoKSxcbiAqICAge1xuICogICAgIHJldHJpZXZlck5hbWVzOiBbXCJhcXVhIHRlZW5cIiwgXCJtc3Qza1wiLCBcImFuaW1hbmlhY3NcIl0sXG4gKiAgICAgcmV0cmlldmVyRGVzY3JpcHRpb25zOiBbXG4gKiAgICAgICBcIkdvb2QgZm9yIGFuc3dlcmluZyBxdWVzdGlvbnMgYWJvdXQgQXF1YSBUZWVuIEh1bmdlciBGb3JjZSB0aGVtZSBzb25nXCIsXG4gKiAgICAgICBcIkdvb2QgZm9yIGFuc3dlcmluZyBxdWVzdGlvbnMgYWJvdXQgTXlzdGVyeSBTY2llbmNlIFRoZWF0ZXIgMzAwMCB0aGVtZSBzb25nXCIsXG4gKiAgICAgICBcIkdvb2QgZm9yIGFuc3dlcmluZyBxdWVzdGlvbnMgYWJvdXQgQW5pbWFuaWFjcyB0aGVtZSBzb25nXCIsXG4gKiAgICAgXSxcbiAqICAgICByZXRyaWV2ZXJzOiBbXG4gKiAgICAgICBuZXcgTWVtb3J5VmVjdG9yU3RvcmUoKS5hc1JldHJpZXZlcigzKSxcbiAqICAgICAgIG5ldyBNZW1vcnlWZWN0b3JTdG9yZSgpLmFzUmV0cmlldmVyKDMpLFxuICogICAgICAgbmV3IE1lbW9yeVZlY3RvclN0b3JlKCkuYXNSZXRyaWV2ZXIoMyksXG4gKiAgICAgXSxcbiAqICAgICByZXRyaWV2YWxRQUNoYWluT3B0czoge1xuICogICAgICAgcmV0dXJuU291cmNlRG9jdW1lbnRzOiB0cnVlLFxuICogICAgIH0sXG4gKiAgIH0sXG4gKiApO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG11bHRpUmV0cmlldmFsUUFDaGFpbi5jYWxsKHtcbiAqICAgaW5wdXQ6XG4gKiAgICAgXCJJbiB0aGUgQXF1YSBUZWVuIEh1bmdlciBGb3JjZSB0aGVtZSBzb25nLCB3aG8gY2FsbHMgaGltc2VsZiB0aGUgbWlrZSBydWxhP1wiLFxuICogfSk7XG4gKlxuICogY29uc29sZS5sb2cocmVzdWx0LnNvdXJjZURvY3VtZW50cywgcmVzdWx0LnRleHQpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aVJldHJpZXZhbFFBQ2hhaW4gZXh0ZW5kcyBNdWx0aVJvdXRlQ2hhaW4ge1xuICAgIGdldCBvdXRwdXRLZXlzKCkge1xuICAgICAgICByZXR1cm4gW1wicmVzdWx0XCJdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYGZyb21SZXRyaWV2ZXJzQW5kUHJvbXB0c2AgaW5zdGVhZFxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tUmV0cmlldmVycyhsbG0sIHJldHJpZXZlck5hbWVzLCByZXRyaWV2ZXJEZXNjcmlwdGlvbnMsIHJldHJpZXZlcnMsIHJldHJpZXZlclByb21wdHMsIGRlZmF1bHRzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBNdWx0aVJldHJpZXZhbFFBQ2hhaW4uZnJvbUxMTUFuZFJldHJpZXZlcnMobGxtLCB7XG4gICAgICAgICAgICByZXRyaWV2ZXJOYW1lcyxcbiAgICAgICAgICAgIHJldHJpZXZlckRlc2NyaXB0aW9ucyxcbiAgICAgICAgICAgIHJldHJpZXZlcnMsXG4gICAgICAgICAgICByZXRyaWV2ZXJQcm9tcHRzLFxuICAgICAgICAgICAgZGVmYXVsdHMsXG4gICAgICAgICAgICBtdWx0aVJldHJpZXZhbENoYWluT3B0czogb3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgc3RhdGljIG1ldGhvZCB0aGF0IGNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTXVsdGlSZXRyaWV2YWxRQUNoYWluIGZyb21cbiAgICAgKiBhIEJhc2VMYW5ndWFnZU1vZGVsIGFuZCBhIHNldCBvZiByZXRyaWV2ZXJzLiBJdCB0YWtlcyBpbiBvcHRpb25hbFxuICAgICAqIHBhcmFtZXRlcnMgZm9yIHRoZSByZXRyaWV2ZXIgbmFtZXMsIGRlc2NyaXB0aW9ucywgcHJvbXB0cywgZGVmYXVsdHMsXG4gICAgICogYW5kIGFkZGl0aW9uYWwgb3B0aW9ucy4gSXQgaXMgYW4gYWx0ZXJuYXRpdmUgbWV0aG9kIHRvIGZyb21SZXRyaWV2ZXJzXG4gICAgICogYW5kIHByb3ZpZGVzIG1vcmUgZmxleGliaWxpdHkgaW4gY29uZmlndXJpbmcgdGhlIHVuZGVybHlpbmcgY2hhaW5zLlxuICAgICAqIEBwYXJhbSBsbG0gQSBCYXNlTGFuZ3VhZ2VNb2RlbCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gcmV0cmlldmVyTmFtZXMgQW4gYXJyYXkgb2YgcmV0cmlldmVyIG5hbWVzLlxuICAgICAqIEBwYXJhbSByZXRyaWV2ZXJEZXNjcmlwdGlvbnMgQW4gYXJyYXkgb2YgcmV0cmlldmVyIGRlc2NyaXB0aW9ucy5cbiAgICAgKiBAcGFyYW0gcmV0cmlldmVycyBBbiBhcnJheSBvZiBCYXNlUmV0cmlldmVySW50ZXJmYWNlIGluc3RhbmNlcy5cbiAgICAgKiBAcGFyYW0gcmV0cmlldmVyUHJvbXB0cyBBbiBvcHRpb25hbCBhcnJheSBvZiBQcm9tcHRUZW1wbGF0ZSBpbnN0YW5jZXMgZm9yIHRoZSByZXRyaWV2ZXJzLlxuICAgICAqIEBwYXJhbSBkZWZhdWx0cyBBbiBvcHRpb25hbCBNdWx0aVJldHJpZXZhbERlZmF1bHRzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBtdWx0aVJldHJpZXZhbENoYWluT3B0cyBBZGRpdGlvbmFsIG9wdGlvbmFsIHBhcmFtZXRlcnMgZm9yIHRoZSBtdWx0aS1yZXRyaWV2YWwgY2hhaW4uXG4gICAgICogQHBhcmFtIHJldHJpZXZhbFFBQ2hhaW5PcHRzIEFkZGl0aW9uYWwgb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgdGhlIHJldHJpZXZhbCBRQSBjaGFpbi5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBpbnN0YW5jZSBvZiBNdWx0aVJldHJpZXZhbFFBQ2hhaW4uXG4gICAgICovXG4gICAgc3RhdGljIGZyb21MTE1BbmRSZXRyaWV2ZXJzKGxsbSwgeyByZXRyaWV2ZXJOYW1lcywgcmV0cmlldmVyRGVzY3JpcHRpb25zLCByZXRyaWV2ZXJzLCByZXRyaWV2ZXJQcm9tcHRzLCBkZWZhdWx0cywgbXVsdGlSZXRyaWV2YWxDaGFpbk9wdHMsIHJldHJpZXZhbFFBQ2hhaW5PcHRzLCB9KSB7XG4gICAgICAgIGNvbnN0IHsgZGVmYXVsdFJldHJpZXZlciwgZGVmYXVsdFByb21wdCwgZGVmYXVsdENoYWluIH0gPSBkZWZhdWx0cyA/PyB7fTtcbiAgICAgICAgaWYgKGRlZmF1bHRQcm9tcHQgJiYgIWRlZmF1bHRSZXRyaWV2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBkZWZhdWx0X3JldHJpZXZlcmAgbXVzdCBiZSBzcGVjaWZpZWQgaWYgYGRlZmF1bHRfcHJvbXB0YCBpcyBcXG5wcm92aWRlZC4gUmVjZWl2ZWQgb25seSBgZGVmYXVsdF9wcm9tcHRgLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbnMgPSB6aXBFbnRyaWVzKHJldHJpZXZlck5hbWVzLCByZXRyaWV2ZXJEZXNjcmlwdGlvbnMpLm1hcCgoW25hbWUsIGRlc2NdKSA9PiBgJHtuYW1lfTogJHtkZXNjfWApO1xuICAgICAgICBjb25zdCBzdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyU2NoZW1hID0gei5vYmplY3Qoe1xuICAgICAgICAgICAgZGVzdGluYXRpb246IHpcbiAgICAgICAgICAgICAgICAuc3RyaW5nKClcbiAgICAgICAgICAgICAgICAub3B0aW9uYWwoKVxuICAgICAgICAgICAgICAgIC5kZXNjcmliZSgnbmFtZSBvZiB0aGUgcXVlc3Rpb24gYW5zd2VyaW5nIHN5c3RlbSB0byB1c2Ugb3IgXCJERUZBVUxUXCInKSxcbiAgICAgICAgICAgIG5leHRfaW5wdXRzOiB6XG4gICAgICAgICAgICAgICAgLm9iamVjdCh7XG4gICAgICAgICAgICAgICAgcXVlcnk6IHpcbiAgICAgICAgICAgICAgICAgICAgLnN0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIC5kZXNjcmliZShcImEgcG90ZW50aWFsbHkgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgb3JpZ2luYWwgaW5wdXRcIiksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5kZXNjcmliZShcImlucHV0IHRvIGJlIGZlZCB0byB0aGUgbmV4dCBtb2RlbFwiKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG91dHB1dFBhcnNlciA9IG5ldyBSb3V0ZXJPdXRwdXRQYXJzZXIoc3RydWN0dXJlZE91dHB1dFBhcnNlclNjaGVtYSk7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uc1N0ciA9IGRlc3RpbmF0aW9ucy5qb2luKFwiXFxuXCIpO1xuICAgICAgICBjb25zdCByb3V0ZXJUZW1wbGF0ZSA9IGludGVycG9sYXRlRlN0cmluZyhTVFJVQ1RVUkVEX01VTFRJX1JFVFJJRVZBTF9ST1VURVJfVEVNUExBVEUob3V0cHV0UGFyc2VyLmdldEZvcm1hdEluc3RydWN0aW9ucyh7IGludGVycG9sYXRpb25EZXB0aDogNCB9KSksIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uczogZGVzdGluYXRpb25zU3RyLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgcm91dGVyUHJvbXB0ID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiByb3V0ZXJUZW1wbGF0ZSxcbiAgICAgICAgICAgIGlucHV0VmFyaWFibGVzOiBbXCJpbnB1dFwiXSxcbiAgICAgICAgICAgIG91dHB1dFBhcnNlcixcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJvdXRlckNoYWluID0gTExNUm91dGVyQ2hhaW4uZnJvbUxMTShsbG0sIHJvdXRlclByb21wdCk7XG4gICAgICAgIGNvbnN0IHByb21wdHMgPSByZXRyaWV2ZXJQcm9tcHRzID8/IHJldHJpZXZlcnMubWFwKCgpID0+IG51bGwpO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvbkNoYWlucyA9IHppcEVudHJpZXMocmV0cmlldmVyTmFtZXMsIHJldHJpZXZlcnMsIHByb21wdHMpLnJlZHVjZSgoYWNjLCBbbmFtZSwgcmV0cmlldmVyLCBwcm9tcHRdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcHQgPSByZXRyaWV2YWxRQUNoYWluT3B0cyA/PyB7fTtcbiAgICAgICAgICAgIGlmIChwcm9tcHQpIHtcbiAgICAgICAgICAgICAgICBvcHQucHJvbXB0ID0gcHJvbXB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWNjW25hbWVdID0gUmV0cmlldmFsUUFDaGFpbi5mcm9tTExNKGxsbSwgcmV0cmlldmVyLCBvcHQpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuICAgICAgICBsZXQgX2RlZmF1bHRDaGFpbjtcbiAgICAgICAgaWYgKGRlZmF1bHRDaGFpbikge1xuICAgICAgICAgICAgX2RlZmF1bHRDaGFpbiA9IGRlZmF1bHRDaGFpbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWZhdWx0UmV0cmlldmVyKSB7XG4gICAgICAgICAgICBfZGVmYXVsdENoYWluID0gUmV0cmlldmFsUUFDaGFpbi5mcm9tTExNKGxsbSwgZGVmYXVsdFJldHJpZXZlciwge1xuICAgICAgICAgICAgICAgIC4uLnJldHJpZXZhbFFBQ2hhaW5PcHRzLFxuICAgICAgICAgICAgICAgIHByb21wdDogZGVmYXVsdFByb21wdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0VGVtcGxhdGUgPSBERUZBVUxUX1RFTVBMQVRFLnJlcGxhY2UoXCJpbnB1dFwiLCBcInF1ZXJ5XCIpO1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogcHJvbXB0VGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgaW5wdXRWYXJpYWJsZXM6IFtcImhpc3RvcnlcIiwgXCJxdWVyeVwiXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX2RlZmF1bHRDaGFpbiA9IG5ldyBDb252ZXJzYXRpb25DaGFpbih7XG4gICAgICAgICAgICAgICAgbGxtLFxuICAgICAgICAgICAgICAgIHByb21wdCxcbiAgICAgICAgICAgICAgICBvdXRwdXRLZXk6IFwicmVzdWx0XCIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE11bHRpUmV0cmlldmFsUUFDaGFpbih7XG4gICAgICAgICAgICAuLi5tdWx0aVJldHJpZXZhbENoYWluT3B0cyxcbiAgICAgICAgICAgIHJvdXRlckNoYWluLFxuICAgICAgICAgICAgZGVzdGluYXRpb25DaGFpbnMsXG4gICAgICAgICAgICBkZWZhdWx0Q2hhaW46IF9kZWZhdWx0Q2hhaW4sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfY2hhaW5UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJtdWx0aV9yZXRyaWV2YWxfcWFfY2hhaW5cIjtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/router/multi_retrieval_qa.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/router/multi_route.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/router/multi_route.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiRouteChain: () => (/* binding */ MultiRouteChain),\n/* harmony export */   RouterChain: () => (/* binding */ RouterChain)\n/* harmony export */ });\n/* harmony import */ var _chains_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chains/base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n\n/**\n * A class that represents a router chain. It\n * extends the BaseChain class and provides functionality for routing\n * inputs to different chains.\n */\nclass RouterChain extends _chains_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    get outputKeys() {\n        return [\"destination\", \"next_inputs\"];\n    }\n    async route(inputs, callbacks) {\n        const result = await this.call(inputs, callbacks);\n        return {\n            destination: result.destination,\n            nextInputs: result.next_inputs,\n        };\n    }\n}\n/**\n * A class that represents a multi-route chain.\n * It extends the BaseChain class and provides functionality for routing\n * inputs to different chains based on a router chain.\n */\nclass MultiRouteChain extends _chains_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"MultiRouteChain\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"routerChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"destinationChains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"defaultChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"silentErrors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.routerChain = fields.routerChain;\n        this.destinationChains = fields.destinationChains;\n        this.defaultChain = fields.defaultChain;\n        this.silentErrors = fields.silentErrors ?? this.silentErrors;\n    }\n    get inputKeys() {\n        return this.routerChain.inputKeys;\n    }\n    get outputKeys() {\n        return [];\n    }\n    async _call(values, runManager) {\n        const { destination, nextInputs } = await this.routerChain.route(values, runManager?.getChild());\n        await runManager?.handleText(`${destination}: ${JSON.stringify(nextInputs)}`);\n        if (!destination) {\n            return this.defaultChain\n                .call(nextInputs, runManager?.getChild())\n                .catch((err) => {\n                throw new Error(`Error in default chain: ${err}`);\n            });\n        }\n        if (destination in this.destinationChains) {\n            return this.destinationChains[destination]\n                .call(nextInputs, runManager?.getChild())\n                .catch((err) => {\n                throw new Error(`Error in ${destination} chain: ${err}`);\n            });\n        }\n        if (this.silentErrors) {\n            return this.defaultChain\n                .call(nextInputs, runManager?.getChild())\n                .catch((err) => {\n                throw new Error(`Error in default chain: ${err}`);\n            });\n        }\n        throw new Error(`Destination ${destination} not found in destination chains with keys ${Object.keys(this.destinationChains)}`);\n    }\n    _chainType() {\n        return \"multi_route_chain\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JvdXRlci9tdWx0aV9yb3V0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQixzREFBUztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDhCQUE4QixzREFBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDLHdDQUF3QyxZQUFZLElBQUksMkJBQTJCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELElBQUk7QUFDL0QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsYUFBYSxTQUFTLElBQUk7QUFDdEUsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsSUFBSTtBQUMvRCxhQUFhO0FBQ2I7QUFDQSx1Q0FBdUMsYUFBYSw0Q0FBNEMsb0NBQW9DO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JvdXRlci9tdWx0aV9yb3V0ZS5qcz84Yjk2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDaGFpbiB9IGZyb20gXCIuLi8uLi9jaGFpbnMvYmFzZS5qc1wiO1xuLyoqXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHJvdXRlciBjaGFpbi4gSXRcbiAqIGV4dGVuZHMgdGhlIEJhc2VDaGFpbiBjbGFzcyBhbmQgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSBmb3Igcm91dGluZ1xuICogaW5wdXRzIHRvIGRpZmZlcmVudCBjaGFpbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZXJDaGFpbiBleHRlbmRzIEJhc2VDaGFpbiB7XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiBbXCJkZXN0aW5hdGlvblwiLCBcIm5leHRfaW5wdXRzXCJdO1xuICAgIH1cbiAgICBhc3luYyByb3V0ZShpbnB1dHMsIGNhbGxiYWNrcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNhbGwoaW5wdXRzLCBjYWxsYmFja3MpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVzdGluYXRpb246IHJlc3VsdC5kZXN0aW5hdGlvbixcbiAgICAgICAgICAgIG5leHRJbnB1dHM6IHJlc3VsdC5uZXh0X2lucHV0cyxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIEEgY2xhc3MgdGhhdCByZXByZXNlbnRzIGEgbXVsdGktcm91dGUgY2hhaW4uXG4gKiBJdCBleHRlbmRzIHRoZSBCYXNlQ2hhaW4gY2xhc3MgYW5kIHByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgZm9yIHJvdXRpbmdcbiAqIGlucHV0cyB0byBkaWZmZXJlbnQgY2hhaW5zIGJhc2VkIG9uIGEgcm91dGVyIGNoYWluLlxuICovXG5leHBvcnQgY2xhc3MgTXVsdGlSb3V0ZUNoYWluIGV4dGVuZHMgQmFzZUNoYWluIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTXVsdGlSb3V0ZUNoYWluXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyb3V0ZXJDaGFpblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZXN0aW5hdGlvbkNoYWluc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZWZhdWx0Q2hhaW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2lsZW50RXJyb3JzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yb3V0ZXJDaGFpbiA9IGZpZWxkcy5yb3V0ZXJDaGFpbjtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkNoYWlucyA9IGZpZWxkcy5kZXN0aW5hdGlvbkNoYWlucztcbiAgICAgICAgdGhpcy5kZWZhdWx0Q2hhaW4gPSBmaWVsZHMuZGVmYXVsdENoYWluO1xuICAgICAgICB0aGlzLnNpbGVudEVycm9ycyA9IGZpZWxkcy5zaWxlbnRFcnJvcnMgPz8gdGhpcy5zaWxlbnRFcnJvcnM7XG4gICAgfVxuICAgIGdldCBpbnB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdXRlckNoYWluLmlucHV0S2V5cztcbiAgICB9XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgYXN5bmMgX2NhbGwodmFsdWVzLCBydW5NYW5hZ2VyKSB7XG4gICAgICAgIGNvbnN0IHsgZGVzdGluYXRpb24sIG5leHRJbnB1dHMgfSA9IGF3YWl0IHRoaXMucm91dGVyQ2hhaW4ucm91dGUodmFsdWVzLCBydW5NYW5hZ2VyPy5nZXRDaGlsZCgpKTtcbiAgICAgICAgYXdhaXQgcnVuTWFuYWdlcj8uaGFuZGxlVGV4dChgJHtkZXN0aW5hdGlvbn06ICR7SlNPTi5zdHJpbmdpZnkobmV4dElucHV0cyl9YCk7XG4gICAgICAgIGlmICghZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRDaGFpblxuICAgICAgICAgICAgICAgIC5jYWxsKG5leHRJbnB1dHMsIHJ1bk1hbmFnZXI/LmdldENoaWxkKCkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGluIGRlZmF1bHQgY2hhaW46ICR7ZXJyfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uIGluIHRoaXMuZGVzdGluYXRpb25DaGFpbnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3RpbmF0aW9uQ2hhaW5zW2Rlc3RpbmF0aW9uXVxuICAgICAgICAgICAgICAgIC5jYWxsKG5leHRJbnB1dHMsIHJ1bk1hbmFnZXI/LmdldENoaWxkKCkpXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGluICR7ZGVzdGluYXRpb259IGNoYWluOiAke2Vycn1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNpbGVudEVycm9ycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENoYWluXG4gICAgICAgICAgICAgICAgLmNhbGwobmV4dElucHV0cywgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgaW4gZGVmYXVsdCBjaGFpbjogJHtlcnJ9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERlc3RpbmF0aW9uICR7ZGVzdGluYXRpb259IG5vdCBmb3VuZCBpbiBkZXN0aW5hdGlvbiBjaGFpbnMgd2l0aCBrZXlzICR7T2JqZWN0LmtleXModGhpcy5kZXN0aW5hdGlvbkNoYWlucyl9YCk7XG4gICAgfVxuICAgIF9jaGFpblR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIm11bHRpX3JvdXRlX2NoYWluXCI7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/router/multi_route.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/router/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/router/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   zipEntries: () => (/* binding */ zipEntries)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction zipEntries(...arrays) {\n    // Check for empty input\n    if (arrays.length === 0) {\n        return [];\n    }\n    // Find the length of the first input array\n    const firstArrayLength = arrays[0].length;\n    // Ensure all input arrays have the same length\n    for (const array of arrays) {\n        if (array.length !== firstArrayLength) {\n            throw new Error(\"All input arrays must have the same length.\");\n        }\n    }\n    // Create an empty array to store the zipped arrays\n    const zipped = [];\n    // Iterate through each element of the first input array\n    for (let i = 0; i < firstArrayLength; i += 1) {\n        // Create an array to store the zipped elements at the current index\n        const zippedElement = [];\n        // Iterate through each input array\n        for (const array of arrays) {\n            // Add the element at the current index to the zipped element array\n            zippedElement.push(array[i]);\n        }\n        // Add the zipped element array to the zipped array\n        zipped.push(zippedElement);\n    }\n    return zipped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3JvdXRlci91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixzQkFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9yb3V0ZXIvdXRpbHMuanM/M2YxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIHppcEVudHJpZXMoLi4uYXJyYXlzKSB7XG4gICAgLy8gQ2hlY2sgZm9yIGVtcHR5IGlucHV0XG4gICAgaWYgKGFycmF5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvLyBGaW5kIHRoZSBsZW5ndGggb2YgdGhlIGZpcnN0IGlucHV0IGFycmF5XG4gICAgY29uc3QgZmlyc3RBcnJheUxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGg7XG4gICAgLy8gRW5zdXJlIGFsbCBpbnB1dCBhcnJheXMgaGF2ZSB0aGUgc2FtZSBsZW5ndGhcbiAgICBmb3IgKGNvbnN0IGFycmF5IG9mIGFycmF5cykge1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoICE9PSBmaXJzdEFycmF5TGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbGwgaW5wdXQgYXJyYXlzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGguXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhbiBlbXB0eSBhcnJheSB0byBzdG9yZSB0aGUgemlwcGVkIGFycmF5c1xuICAgIGNvbnN0IHppcHBlZCA9IFtdO1xuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGVsZW1lbnQgb2YgdGhlIGZpcnN0IGlucHV0IGFycmF5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdEFycmF5TGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGFuIGFycmF5IHRvIHN0b3JlIHRoZSB6aXBwZWQgZWxlbWVudHMgYXQgdGhlIGN1cnJlbnQgaW5kZXhcbiAgICAgICAgY29uc3QgemlwcGVkRWxlbWVudCA9IFtdO1xuICAgICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBpbnB1dCBhcnJheVxuICAgICAgICBmb3IgKGNvbnN0IGFycmF5IG9mIGFycmF5cykge1xuICAgICAgICAgICAgLy8gQWRkIHRoZSBlbGVtZW50IGF0IHRoZSBjdXJyZW50IGluZGV4IHRvIHRoZSB6aXBwZWQgZWxlbWVudCBhcnJheVxuICAgICAgICAgICAgemlwcGVkRWxlbWVudC5wdXNoKGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgdGhlIHppcHBlZCBlbGVtZW50IGFycmF5IHRvIHRoZSB6aXBwZWQgYXJyYXlcbiAgICAgICAgemlwcGVkLnB1c2goemlwcGVkRWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiB6aXBwZWQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/router/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/sequential_chain.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SequentialChain: () => (/* binding */ SequentialChain),\n/* harmony export */   SimpleSequentialChain: () => (/* binding */ SimpleSequentialChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _util_set_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/set.js */ \"(rsc)/./node_modules/langchain/dist/util/set.js\");\n\n\nfunction formatSet(input) {\n    return Array.from(input)\n        .map((i) => `\"${i}\"`)\n        .join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n * @example\n * ```typescript\n * const promptTemplate = new PromptTemplate({\n *   template: `You are a playwright. Given the title of play and the era it is set in, it is your job to write a synopsis for that title.\n * Title: {title}\n * Era: {era}\n * Playwright: This is a synopsis for the above play:`,\n *   inputVariables: [\"title\", \"era\"],\n * });\n\n * const reviewPromptTemplate = new PromptTemplate({\n *   template: `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n *     Play Synopsis:\n *     {synopsis}\n *     Review from a New York Times play critic of the above play:`,\n *   inputVariables: [\"synopsis\"],\n * });\n\n * const overallChain = new SequentialChain({\n *   chains: [\n *     new LLMChain({\n *       llm: new ChatOpenAI({ temperature: 0 }),\n *       prompt: promptTemplate,\n *       outputKey: \"synopsis\",\n *     }),\n *     new LLMChain({\n *       llm: new OpenAI({ temperature: 0 }),\n *       prompt: reviewPromptTemplate,\n *       outputKey: \"review\",\n *     }),\n *   ],\n *   inputVariables: [\"era\", \"title\"],\n *   outputVariables: [\"synopsis\", \"review\"],\n *   verbose: true,\n * });\n\n * const chainExecutionResult = await overallChain.call({\n *   title: \"Tragedy at sunset on the beach\",\n *   era: \"Victorian England\",\n * });\n * console.log(chainExecutionResult);\n * ```\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/expression_language/ | expression language}.\n * Will be removed in 0.2.0\n */\nclass SequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"SequentialChain\";\n    }\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.union)(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains) {\n            let missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(chain.inputKeys), availableKeys);\n            if (chain.memory) {\n                missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(missingKeys, new Set(chain.memory.memoryKeys));\n            }\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet) {\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            }\n            else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        }\n        else {\n            const missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)) {\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables) {\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({ chains, inputVariables, outputVariables });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains,\n        };\n    }\n}\n/**\n * @deprecated Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nclass SimpleSequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"SimpleSequentialChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        for (const chain of this.chains) {\n            if (chain.inputKeys.filter((k) => !chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = (await chain.call({ [chain.inputKeys[0]]: input, signal: values.signal }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return { [this.outputKey]: input };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({ chains });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains,\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/sequential_chain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/summarization/load.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/summarization/load.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadSummarizationChain: () => (/* binding */ loadSummarizationChain)\n/* harmony export */ });\n/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../combine_docs_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/combine_docs_chain.js\");\n/* harmony import */ var _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stuff_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/summarization/stuff_prompts.js\");\n/* harmony import */ var _refine_prompts_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./refine_prompts.js */ \"(rsc)/./node_modules/langchain/dist/chains/summarization/refine_prompts.js\");\n\n\n\n\nconst loadSummarizationChain = (llm, params = { type: \"map_reduce\" }) => {\n    const { verbose } = params;\n    if (params.type === \"stuff\") {\n        const { prompt = _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PROMPT } = params;\n        const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt, llm, verbose });\n        const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({\n            llmChain,\n            documentVariableName: \"text\",\n            verbose,\n        });\n        return chain;\n    }\n    if (params.type === \"map_reduce\") {\n        const { combineMapPrompt = _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PROMPT, combinePrompt = _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PROMPT, combineLLM, returnIntermediateSteps, } = params;\n        const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt: combineMapPrompt, llm, verbose });\n        const combineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n            prompt: combinePrompt,\n            llm: combineLLM ?? llm,\n            verbose,\n        });\n        const combineDocumentChain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.StuffDocumentsChain({\n            llmChain: combineLLMChain,\n            documentVariableName: \"text\",\n            verbose,\n        });\n        const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.MapReduceDocumentsChain({\n            llmChain,\n            combineDocumentChain,\n            documentVariableName: \"text\",\n            returnIntermediateSteps,\n            verbose,\n        });\n        return chain;\n    }\n    if (params.type === \"refine\") {\n        const { refinePrompt = _refine_prompts_js__WEBPACK_IMPORTED_MODULE_3__.REFINE_PROMPT, refineLLM, questionPrompt = _stuff_prompts_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PROMPT, } = params;\n        const llmChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({ prompt: questionPrompt, llm, verbose });\n        const refineLLMChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_0__.LLMChain({\n            prompt: refinePrompt,\n            llm: refineLLM ?? llm,\n            verbose,\n        });\n        const chain = new _combine_docs_chain_js__WEBPACK_IMPORTED_MODULE_1__.RefineDocumentsChain({\n            llmChain,\n            refineLLMChain,\n            documentVariableName: \"text\",\n            verbose,\n        });\n        return chain;\n    }\n    throw new Error(`Invalid _type: ${params.type}`);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3N1bW1hcml6YXRpb24vbG9hZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyQztBQUNvRTtBQUMzRDtBQUNBO0FBQzdDLGdEQUFnRCxvQkFBb0I7QUFDM0UsWUFBWSxVQUFVO0FBQ3RCO0FBQ0EsZ0JBQWdCLFNBQVMsNkRBQWMsR0FBRztBQUMxQyw2QkFBNkIsbURBQVEsR0FBRyxzQkFBc0I7QUFDOUQsMEJBQTBCLHVFQUFtQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQiw2REFBYyxrQkFBa0IsNkRBQWMseUNBQXlDO0FBQzFILDZCQUE2QixtREFBUSxHQUFHLHdDQUF3QztBQUNoRixvQ0FBb0MsbURBQVE7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHlDQUF5Qyx1RUFBbUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDBCQUEwQiwyRUFBdUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZUFBZSw2REFBYSw4QkFBOEIsNkRBQWMsSUFBSTtBQUM1Riw2QkFBNkIsbURBQVEsR0FBRyxzQ0FBc0M7QUFDOUUsbUNBQW1DLG1EQUFRO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCwwQkFBMEIsd0VBQW9CO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxzQ0FBc0MsWUFBWTtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jaGFpbnMvc3VtbWFyaXphdGlvbi9sb2FkLmpzPzM2ODAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTExNQ2hhaW4gfSBmcm9tIFwiLi4vbGxtX2NoYWluLmpzXCI7XG5pbXBvcnQgeyBTdHVmZkRvY3VtZW50c0NoYWluLCBNYXBSZWR1Y2VEb2N1bWVudHNDaGFpbiwgUmVmaW5lRG9jdW1lbnRzQ2hhaW4sIH0gZnJvbSBcIi4uL2NvbWJpbmVfZG9jc19jaGFpbi5qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9QUk9NUFQgfSBmcm9tIFwiLi9zdHVmZl9wcm9tcHRzLmpzXCI7XG5pbXBvcnQgeyBSRUZJTkVfUFJPTVBUIH0gZnJvbSBcIi4vcmVmaW5lX3Byb21wdHMuanNcIjtcbmV4cG9ydCBjb25zdCBsb2FkU3VtbWFyaXphdGlvbkNoYWluID0gKGxsbSwgcGFyYW1zID0geyB0eXBlOiBcIm1hcF9yZWR1Y2VcIiB9KSA9PiB7XG4gICAgY29uc3QgeyB2ZXJib3NlIH0gPSBwYXJhbXM7XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSBcInN0dWZmXCIpIHtcbiAgICAgICAgY29uc3QgeyBwcm9tcHQgPSBERUZBVUxUX1BST01QVCB9ID0gcGFyYW1zO1xuICAgICAgICBjb25zdCBsbG1DaGFpbiA9IG5ldyBMTE1DaGFpbih7IHByb21wdCwgbGxtLCB2ZXJib3NlIH0pO1xuICAgICAgICBjb25zdCBjaGFpbiA9IG5ldyBTdHVmZkRvY3VtZW50c0NoYWluKHtcbiAgICAgICAgICAgIGxsbUNoYWluLFxuICAgICAgICAgICAgZG9jdW1lbnRWYXJpYWJsZU5hbWU6IFwidGV4dFwiLFxuICAgICAgICAgICAgdmVyYm9zZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjaGFpbjtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSBcIm1hcF9yZWR1Y2VcIikge1xuICAgICAgICBjb25zdCB7IGNvbWJpbmVNYXBQcm9tcHQgPSBERUZBVUxUX1BST01QVCwgY29tYmluZVByb21wdCA9IERFRkFVTFRfUFJPTVBULCBjb21iaW5lTExNLCByZXR1cm5JbnRlcm1lZGlhdGVTdGVwcywgfSA9IHBhcmFtcztcbiAgICAgICAgY29uc3QgbGxtQ2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBwcm9tcHQ6IGNvbWJpbmVNYXBQcm9tcHQsIGxsbSwgdmVyYm9zZSB9KTtcbiAgICAgICAgY29uc3QgY29tYmluZUxMTUNoYWluID0gbmV3IExMTUNoYWluKHtcbiAgICAgICAgICAgIHByb21wdDogY29tYmluZVByb21wdCxcbiAgICAgICAgICAgIGxsbTogY29tYmluZUxMTSA/PyBsbG0sXG4gICAgICAgICAgICB2ZXJib3NlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY29tYmluZURvY3VtZW50Q2hhaW4gPSBuZXcgU3R1ZmZEb2N1bWVudHNDaGFpbih7XG4gICAgICAgICAgICBsbG1DaGFpbjogY29tYmluZUxMTUNoYWluLFxuICAgICAgICAgICAgZG9jdW1lbnRWYXJpYWJsZU5hbWU6IFwidGV4dFwiLFxuICAgICAgICAgICAgdmVyYm9zZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYWluID0gbmV3IE1hcFJlZHVjZURvY3VtZW50c0NoYWluKHtcbiAgICAgICAgICAgIGxsbUNoYWluLFxuICAgICAgICAgICAgY29tYmluZURvY3VtZW50Q2hhaW4sXG4gICAgICAgICAgICBkb2N1bWVudFZhcmlhYmxlTmFtZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICByZXR1cm5JbnRlcm1lZGlhdGVTdGVwcyxcbiAgICAgICAgICAgIHZlcmJvc2UsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2hhaW47XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gXCJyZWZpbmVcIikge1xuICAgICAgICBjb25zdCB7IHJlZmluZVByb21wdCA9IFJFRklORV9QUk9NUFQsIHJlZmluZUxMTSwgcXVlc3Rpb25Qcm9tcHQgPSBERUZBVUxUX1BST01QVCwgfSA9IHBhcmFtcztcbiAgICAgICAgY29uc3QgbGxtQ2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBwcm9tcHQ6IHF1ZXN0aW9uUHJvbXB0LCBsbG0sIHZlcmJvc2UgfSk7XG4gICAgICAgIGNvbnN0IHJlZmluZUxMTUNoYWluID0gbmV3IExMTUNoYWluKHtcbiAgICAgICAgICAgIHByb21wdDogcmVmaW5lUHJvbXB0LFxuICAgICAgICAgICAgbGxtOiByZWZpbmVMTE0gPz8gbGxtLFxuICAgICAgICAgICAgdmVyYm9zZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYWluID0gbmV3IFJlZmluZURvY3VtZW50c0NoYWluKHtcbiAgICAgICAgICAgIGxsbUNoYWluLFxuICAgICAgICAgICAgcmVmaW5lTExNQ2hhaW4sXG4gICAgICAgICAgICBkb2N1bWVudFZhcmlhYmxlTmFtZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB2ZXJib3NlLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNoYWluO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgX3R5cGU6ICR7cGFyYW1zLnR5cGV9YCk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/summarization/load.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/summarization/refine_prompts.js":
/*!****************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/summarization/refine_prompts.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REFINE_PROMPT: () => (/* binding */ REFINE_PROMPT)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n\nconst refinePromptTemplate = `Your job is to produce a final summary\nWe have provided an existing summary up to a certain point: \"{existing_answer}\"\nWe have the opportunity to refine the existing summary\n(only if needed) with some more context below.\n------------\n\"{text}\"\n------------\n\nGiven the new context, refine the original summary\nIf the context isn't useful, return the original summary.\n\nREFINED SUMMARY:`;\nconst REFINE_PROMPT = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    template: refinePromptTemplate,\n    inputVariables: [\"existing_answer\", \"text\"],\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3N1bW1hcml6YXRpb24vcmVmaW5lX3Byb21wdHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUQ7QUFDekQ7QUFDQSw4REFBOEQsZ0JBQWdCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLEVBQUUsS0FBSztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDTywwQ0FBMEMsbUVBQWM7QUFDL0Q7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3N1bW1hcml6YXRpb24vcmVmaW5lX3Byb21wdHMuanM/NDg2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9tcHRUZW1wbGF0ZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvcHJvbXB0c1wiO1xuY29uc3QgcmVmaW5lUHJvbXB0VGVtcGxhdGUgPSBgWW91ciBqb2IgaXMgdG8gcHJvZHVjZSBhIGZpbmFsIHN1bW1hcnlcbldlIGhhdmUgcHJvdmlkZWQgYW4gZXhpc3Rpbmcgc3VtbWFyeSB1cCB0byBhIGNlcnRhaW4gcG9pbnQ6IFwie2V4aXN0aW5nX2Fuc3dlcn1cIlxuV2UgaGF2ZSB0aGUgb3Bwb3J0dW5pdHkgdG8gcmVmaW5lIHRoZSBleGlzdGluZyBzdW1tYXJ5XG4ob25seSBpZiBuZWVkZWQpIHdpdGggc29tZSBtb3JlIGNvbnRleHQgYmVsb3cuXG4tLS0tLS0tLS0tLS1cblwie3RleHR9XCJcbi0tLS0tLS0tLS0tLVxuXG5HaXZlbiB0aGUgbmV3IGNvbnRleHQsIHJlZmluZSB0aGUgb3JpZ2luYWwgc3VtbWFyeVxuSWYgdGhlIGNvbnRleHQgaXNuJ3QgdXNlZnVsLCByZXR1cm4gdGhlIG9yaWdpbmFsIHN1bW1hcnkuXG5cblJFRklORUQgU1VNTUFSWTpgO1xuZXhwb3J0IGNvbnN0IFJFRklORV9QUk9NUFQgPSAvKiAjX19QVVJFX18gKi8gbmV3IFByb21wdFRlbXBsYXRlKHtcbiAgICB0ZW1wbGF0ZTogcmVmaW5lUHJvbXB0VGVtcGxhdGUsXG4gICAgaW5wdXRWYXJpYWJsZXM6IFtcImV4aXN0aW5nX2Fuc3dlclwiLCBcInRleHRcIl0sXG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/summarization/refine_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/summarization/stuff_prompts.js":
/*!***************************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/summarization/stuff_prompts.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PROMPT: () => (/* binding */ DEFAULT_PROMPT)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* eslint-disable spaced-comment */\n\nconst template = `Write a concise summary of the following:\n\n\n\"{text}\"\n\n\nCONCISE SUMMARY:`;\nconst DEFAULT_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    template,\n    inputVariables: [\"text\"],\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3N1bW1hcml6YXRpb24vc3R1ZmZfcHJvbXB0cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ3lEO0FBQ3pEOzs7QUFHQSxFQUFFLEtBQUs7OztBQUdQO0FBQ08seUNBQXlDLG1FQUFjO0FBQzlEO0FBQ0E7QUFDQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2NoYWlucy9zdW1tYXJpemF0aW9uL3N0dWZmX3Byb21wdHMuanM/Yjk5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBzcGFjZWQtY29tbWVudCAqL1xuaW1wb3J0IHsgUHJvbXB0VGVtcGxhdGUgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3Byb21wdHNcIjtcbmNvbnN0IHRlbXBsYXRlID0gYFdyaXRlIGEgY29uY2lzZSBzdW1tYXJ5IG9mIHRoZSBmb2xsb3dpbmc6XG5cblxuXCJ7dGV4dH1cIlxuXG5cbkNPTkNJU0UgU1VNTUFSWTpgO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPTVBUID0gLyojX19QVVJFX18qLyBuZXcgUHJvbXB0VGVtcGxhdGUoe1xuICAgIHRlbXBsYXRlLFxuICAgIGlucHV0VmFyaWFibGVzOiBbXCJ0ZXh0XCJdLFxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/summarization/stuff_prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/transform.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/dist/chains/transform.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransformChain: () => (/* binding */ TransformChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n\n/**\n * Class that represents a transform chain. It extends the `BaseChain`\n * class and implements the `TransformChainFields` interface. It provides\n * a way to transform input values to output values using a specified\n * transform function.\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/expression_language/ | expression language}.\n * Will be removed in 0.2.0\n */\nclass TransformChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"TransformChain\";\n    }\n    _chainType() {\n        return \"transform\";\n    }\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"transformFunc\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.transformFunc = fields.transform;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables;\n    }\n    async _call(values, runManager) {\n        return this.transformFunc(values, runManager?.getChild(\"transform\"));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsK0VBQStFO0FBQzdGO0FBQ0E7QUFDTyw2QkFBNkIsK0NBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3RyYW5zZm9ybS5qcz81NWZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDaGFpbiB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQ2xhc3MgdGhhdCByZXByZXNlbnRzIGEgdHJhbnNmb3JtIGNoYWluLiBJdCBleHRlbmRzIHRoZSBgQmFzZUNoYWluYFxuICogY2xhc3MgYW5kIGltcGxlbWVudHMgdGhlIGBUcmFuc2Zvcm1DaGFpbkZpZWxkc2AgaW50ZXJmYWNlLiBJdCBwcm92aWRlc1xuICogYSB3YXkgdG8gdHJhbnNmb3JtIGlucHV0IHZhbHVlcyB0byBvdXRwdXQgdmFsdWVzIHVzaW5nIGEgc3BlY2lmaWVkXG4gKiB0cmFuc2Zvcm0gZnVuY3Rpb24uXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIFN3aXRjaCB0byB7QGxpbmsgaHR0cHM6Ly9qcy5sYW5nY2hhaW4uY29tL2RvY3MvZXhwcmVzc2lvbl9sYW5ndWFnZS8gfCBleHByZXNzaW9uIGxhbmd1YWdlfS5cbiAqIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjIuMFxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtQ2hhaW4gZXh0ZW5kcyBCYXNlQ2hhaW4ge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJUcmFuc2Zvcm1DaGFpblwiO1xuICAgIH1cbiAgICBfY2hhaW5UeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJ0cmFuc2Zvcm1cIjtcbiAgICB9XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRWYXJpYWJsZXM7XG4gICAgfVxuICAgIGdldCBvdXRwdXRLZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vdXRwdXRWYXJpYWJsZXM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0cmFuc2Zvcm1GdW5jXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlucHV0VmFyaWFibGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dFZhcmlhYmxlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUZ1bmMgPSBmaWVsZHMudHJhbnNmb3JtO1xuICAgICAgICB0aGlzLmlucHV0VmFyaWFibGVzID0gZmllbGRzLmlucHV0VmFyaWFibGVzO1xuICAgICAgICB0aGlzLm91dHB1dFZhcmlhYmxlcyA9IGZpZWxkcy5vdXRwdXRWYXJpYWJsZXM7XG4gICAgfVxuICAgIGFzeW5jIF9jYWxsKHZhbHVlcywgcnVuTWFuYWdlcikge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1GdW5jKHZhbHVlcywgcnVuTWFuYWdlcj8uZ2V0Q2hpbGQoXCJ0cmFuc2Zvcm1cIikpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/vector_db_qa.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorDBQAChain: () => (/* binding */ VectorDBQAChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./question_answering/load.js */ \"(rsc)/./node_modules/langchain/dist/chains/question_answering/load.js\");\n\n\n/**\n * Class that represents a VectorDBQAChain. It extends the `BaseChain`\n * class and implements the `VectorDBQAChainInput` interface. It performs\n * a similarity search using a vector store and combines the search\n * results using a specified combine documents chain.\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/modules/chains/ | createRetrievalChain}\n * Will be removed in 0.2.0\n */\nclass VectorDBQAChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    static lc_name() {\n        return \"VectorDBQAChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return this.combineDocumentsChain.outputKeys.concat(this.returnSourceDocuments ? [\"sourceDocuments\"] : []);\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"query\"\n        });\n        Object.defineProperty(this, \"vectorstore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"combineDocumentsChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnSourceDocuments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.vectorstore = fields.vectorstore;\n        this.combineDocumentsChain = fields.combineDocumentsChain;\n        this.inputKey = fields.inputKey ?? this.inputKey;\n        this.k = fields.k ?? this.k;\n        this.returnSourceDocuments =\n            fields.returnSourceDocuments ?? this.returnSourceDocuments;\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        if (!(this.inputKey in values)) {\n            throw new Error(`Question key ${this.inputKey} not found.`);\n        }\n        const question = values[this.inputKey];\n        const docs = await this.vectorstore.similaritySearch(question, this.k, values.filter, runManager?.getChild(\"vectorstore\"));\n        const inputs = { question, input_documents: docs };\n        const result = await this.combineDocumentsChain.call(inputs, runManager?.getChild(\"combine_documents\"));\n        if (this.returnSourceDocuments) {\n            return {\n                ...result,\n                sourceDocuments: docs,\n            };\n        }\n        return result;\n    }\n    _chainType() {\n        return \"vector_db_qa\";\n    }\n    static async deserialize(data, values) {\n        if (!(\"vectorstore\" in values)) {\n            throw new Error(`Need to pass in a vectorstore to deserialize VectorDBQAChain`);\n        }\n        const { vectorstore } = values;\n        if (!data.combine_documents_chain) {\n            throw new Error(`VectorDBQAChain must have combine_documents_chain in serialized data`);\n        }\n        return new VectorDBQAChain({\n            combineDocumentsChain: await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(data.combine_documents_chain),\n            k: data.k,\n            vectorstore,\n        });\n    }\n    serialize() {\n        return {\n            _type: this._chainType(),\n            combine_documents_chain: this.combineDocumentsChain.serialize(),\n            k: this.k,\n        };\n    }\n    /**\n     * Static method that creates a VectorDBQAChain instance from a\n     * BaseLanguageModel and a vector store. It also accepts optional options\n     * to customize the chain.\n     * @param llm The BaseLanguageModel instance.\n     * @param vectorstore The vector store used for similarity search.\n     * @param options Optional options to customize the chain.\n     * @returns A new instance of VectorDBQAChain.\n     */\n    static fromLLM(llm, vectorstore, options) {\n        const qaChain = (0,_question_answering_load_js__WEBPACK_IMPORTED_MODULE_1__.loadQAStuffChain)(llm);\n        return new this({\n            vectorstore,\n            combineDocumentsChain: qaChain,\n            ...options,\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3ZlY3Rvcl9kYl9xYS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBc0M7QUFDMEI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNPLDhCQUE4QiwrQ0FBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGVBQWU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsK0NBQVM7QUFDbEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsNkVBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2hhaW5zL3ZlY3Rvcl9kYl9xYS5qcz9mNDNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDaGFpbiB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmltcG9ydCB7IGxvYWRRQVN0dWZmQ2hhaW4gfSBmcm9tIFwiLi9xdWVzdGlvbl9hbnN3ZXJpbmcvbG9hZC5qc1wiO1xuLyoqXG4gKiBDbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBWZWN0b3JEQlFBQ2hhaW4uIEl0IGV4dGVuZHMgdGhlIGBCYXNlQ2hhaW5gXG4gKiBjbGFzcyBhbmQgaW1wbGVtZW50cyB0aGUgYFZlY3RvckRCUUFDaGFpbklucHV0YCBpbnRlcmZhY2UuIEl0IHBlcmZvcm1zXG4gKiBhIHNpbWlsYXJpdHkgc2VhcmNoIHVzaW5nIGEgdmVjdG9yIHN0b3JlIGFuZCBjb21iaW5lcyB0aGUgc2VhcmNoXG4gKiByZXN1bHRzIHVzaW5nIGEgc3BlY2lmaWVkIGNvbWJpbmUgZG9jdW1lbnRzIGNoYWluLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBTd2l0Y2ggdG8ge0BsaW5rIGh0dHBzOi8vanMubGFuZ2NoYWluLmNvbS9kb2NzL21vZHVsZXMvY2hhaW5zLyB8IGNyZWF0ZVJldHJpZXZhbENoYWlufVxuICogV2lsbCBiZSByZW1vdmVkIGluIDAuMi4wXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3JEQlFBQ2hhaW4gZXh0ZW5kcyBCYXNlQ2hhaW4ge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJWZWN0b3JEQlFBQ2hhaW5cIjtcbiAgICB9XG4gICAgZ2V0IGlucHV0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmlucHV0S2V5XTtcbiAgICB9XG4gICAgZ2V0IG91dHB1dEtleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbi5vdXRwdXRLZXlzLmNvbmNhdCh0aGlzLnJldHVyblNvdXJjZURvY3VtZW50cyA/IFtcInNvdXJjZURvY3VtZW50c1wiXSA6IFtdKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImtcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDRcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlucHV0S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcInF1ZXJ5XCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlY3RvcnN0b3JlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbWJpbmVEb2N1bWVudHNDaGFpblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXR1cm5Tb3VyY2VEb2N1bWVudHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZlY3RvcnN0b3JlID0gZmllbGRzLnZlY3RvcnN0b3JlO1xuICAgICAgICB0aGlzLmNvbWJpbmVEb2N1bWVudHNDaGFpbiA9IGZpZWxkcy5jb21iaW5lRG9jdW1lbnRzQ2hhaW47XG4gICAgICAgIHRoaXMuaW5wdXRLZXkgPSBmaWVsZHMuaW5wdXRLZXkgPz8gdGhpcy5pbnB1dEtleTtcbiAgICAgICAgdGhpcy5rID0gZmllbGRzLmsgPz8gdGhpcy5rO1xuICAgICAgICB0aGlzLnJldHVyblNvdXJjZURvY3VtZW50cyA9XG4gICAgICAgICAgICBmaWVsZHMucmV0dXJuU291cmNlRG9jdW1lbnRzID8/IHRoaXMucmV0dXJuU291cmNlRG9jdW1lbnRzO1xuICAgIH1cbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIGFzeW5jIF9jYWxsKHZhbHVlcywgcnVuTWFuYWdlcikge1xuICAgICAgICBpZiAoISh0aGlzLmlucHV0S2V5IGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUXVlc3Rpb24ga2V5ICR7dGhpcy5pbnB1dEtleX0gbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uID0gdmFsdWVzW3RoaXMuaW5wdXRLZXldO1xuICAgICAgICBjb25zdCBkb2NzID0gYXdhaXQgdGhpcy52ZWN0b3JzdG9yZS5zaW1pbGFyaXR5U2VhcmNoKHF1ZXN0aW9uLCB0aGlzLmssIHZhbHVlcy5maWx0ZXIsIHJ1bk1hbmFnZXI/LmdldENoaWxkKFwidmVjdG9yc3RvcmVcIikpO1xuICAgICAgICBjb25zdCBpbnB1dHMgPSB7IHF1ZXN0aW9uLCBpbnB1dF9kb2N1bWVudHM6IGRvY3MgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb21iaW5lRG9jdW1lbnRzQ2hhaW4uY2FsbChpbnB1dHMsIHJ1bk1hbmFnZXI/LmdldENoaWxkKFwiY29tYmluZV9kb2N1bWVudHNcIikpO1xuICAgICAgICBpZiAodGhpcy5yZXR1cm5Tb3VyY2VEb2N1bWVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgICAgIHNvdXJjZURvY3VtZW50czogZG9jcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX2NoYWluVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwidmVjdG9yX2RiX3FhXCI7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBkZXNlcmlhbGl6ZShkYXRhLCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKCEoXCJ2ZWN0b3JzdG9yZVwiIGluIHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTmVlZCB0byBwYXNzIGluIGEgdmVjdG9yc3RvcmUgdG8gZGVzZXJpYWxpemUgVmVjdG9yREJRQUNoYWluYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB2ZWN0b3JzdG9yZSB9ID0gdmFsdWVzO1xuICAgICAgICBpZiAoIWRhdGEuY29tYmluZV9kb2N1bWVudHNfY2hhaW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVmVjdG9yREJRQUNoYWluIG11c3QgaGF2ZSBjb21iaW5lX2RvY3VtZW50c19jaGFpbiBpbiBzZXJpYWxpemVkIGRhdGFgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvckRCUUFDaGFpbih7XG4gICAgICAgICAgICBjb21iaW5lRG9jdW1lbnRzQ2hhaW46IGF3YWl0IEJhc2VDaGFpbi5kZXNlcmlhbGl6ZShkYXRhLmNvbWJpbmVfZG9jdW1lbnRzX2NoYWluKSxcbiAgICAgICAgICAgIGs6IGRhdGEuayxcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX3R5cGU6IHRoaXMuX2NoYWluVHlwZSgpLFxuICAgICAgICAgICAgY29tYmluZV9kb2N1bWVudHNfY2hhaW46IHRoaXMuY29tYmluZURvY3VtZW50c0NoYWluLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgazogdGhpcy5rLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGF0aWMgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIFZlY3RvckRCUUFDaGFpbiBpbnN0YW5jZSBmcm9tIGFcbiAgICAgKiBCYXNlTGFuZ3VhZ2VNb2RlbCBhbmQgYSB2ZWN0b3Igc3RvcmUuIEl0IGFsc28gYWNjZXB0cyBvcHRpb25hbCBvcHRpb25zXG4gICAgICogdG8gY3VzdG9taXplIHRoZSBjaGFpbi5cbiAgICAgKiBAcGFyYW0gbGxtIFRoZSBCYXNlTGFuZ3VhZ2VNb2RlbCBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gdmVjdG9yc3RvcmUgVGhlIHZlY3RvciBzdG9yZSB1c2VkIGZvciBzaW1pbGFyaXR5IHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgY2hhaW4uXG4gICAgICogQHJldHVybnMgQSBuZXcgaW5zdGFuY2Ugb2YgVmVjdG9yREJRQUNoYWluLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tTExNKGxsbSwgdmVjdG9yc3RvcmUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcWFDaGFpbiA9IGxvYWRRQVN0dWZmQ2hhaW4obGxtKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHtcbiAgICAgICAgICAgIHZlY3RvcnN0b3JlLFxuICAgICAgICAgICAgY29tYmluZURvY3VtZW50c0NoYWluOiBxYUNoYWluLFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/chains/vector_db_qa.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerativeAgent: () => (/* binding */ GenerativeAgent)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _chains_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chains/base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n\n\n\n/**\n * Implementation of a generative agent that can learn and form new memories over\n * time. It extends the BaseChain class, which is a generic\n * sequence of calls to components, including other chains.\n * @example\n * ```typescript\n * const tommie: GenerativeAgent = new GenerativeAgent(\n *   new OpenAI({ temperature: 0.9, maxTokens: 1500 }),\n *   new GenerativeAgentMemory(\n *     new ChatOpenAI(),\n *     new TimeWeightedVectorStoreRetriever({\n *       vectorStore: new MemoryVectorStore(new OpenAIEmbeddings()),\n *       otherScoreKeys: [\"importance\"],\n *       k: 15,\n *     }),\n *     { reflectionThreshold: 8 },\n *   ),\n *   {\n *     name: \"Tommie\",\n *     age: 25,\n *     traits: \"anxious, likes design, talkative\",\n *     status: \"looking for a job\",\n *   },\n * );\n *\n * await tommie.addMemory(\n *   \"Tommie remembers his dog, Bruno, from when he was a kid\",\n *   new Date(),\n * );\n * const summary = await tommie.getSummary({ forceRefresh: true });\n * const response = await tommie.generateDialogueResponse(\n *   \"USER says Hello Tommie, how are you today?\",\n * );\n * ```\n */\nclass GenerativeAgent extends _chains_base_js__WEBPACK_IMPORTED_MODULE_2__.BaseChain {\n    static lc_name() {\n        return \"GenerativeAgent\";\n    }\n    // TODO: Add support for daily summaries\n    // private dailySummaries: string[] = []; // summary of the events in the plan that the agent took.\n    _chainType() {\n        return \"generative_agent_executor\";\n    }\n    get inputKeys() {\n        return [\"observation\", \"suffix\", \"now\"];\n    }\n    get outputKeys() {\n        return [\"output\", \"continue_dialogue\"];\n    }\n    constructor(llm, longTermMemory, config) {\n        super();\n        // a character with memory and innate characterisitics\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the character's name\n        Object.defineProperty(this, \"age\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the optional age of the character\n        Object.defineProperty(this, \"traits\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // permanent traits to ascribe to the character\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the traits of the character you wish not to change\n        Object.defineProperty(this, \"longTermMemory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the underlying language model\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // false\n        Object.defineProperty(this, \"summary\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // stateful self-summary generated via reflection on the character's memory.\n        Object.defineProperty(this, \"summaryRefreshSeconds\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3600\n        });\n        Object.defineProperty(this, \"lastRefreshed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        }); // the last time the character's summary was regenerated\n        this.llm = llm;\n        this.longTermMemory = longTermMemory;\n        this.name = config.name;\n        this.age = config.age;\n        this.traits = config.traits;\n        this.status = config.status;\n        this.verbose = config.verbose ?? this.verbose;\n        this.summary = \"\";\n        this.summaryRefreshSeconds =\n            config.summaryRefreshSeconds ?? this.summaryRefreshSeconds;\n        this.lastRefreshed = new Date();\n        // this.dailySummaries = config.dailySummaries ?? this.dailySummaries;\n    }\n    // LLM methods\n    /**\n     * Parses a newline-separated string into a list of strings.\n     * @param text The string to parse.\n     * @returns An array of strings parsed from the input text.\n     */\n    parseList(text) {\n        // parse a newline-seperated string into a list of strings\n        const lines = text.trim().split(\"\\n\");\n        const result = lines.map((line) => line.replace(/^\\s*\\d+\\.\\s*/, \"\").trim());\n        return result;\n    }\n    /**\n     * Creates a new LLMChain with the given prompt and the agent's language\n     * model, verbosity, output key, and memory.\n     * @param prompt The prompt to use for the LLMChain.\n     * @returns A new LLMChain instance.\n     */\n    chain(prompt) {\n        const chain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({\n            llm: this.llm,\n            prompt,\n            verbose: this.verbose,\n            outputKey: \"output\",\n            memory: this.longTermMemory,\n        });\n        return chain;\n    }\n    /**\n     * Extracts the observed entity from the given observation.\n     * @param observation The observation to extract the entity from.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The extracted entity as a string.\n     */\n    async getEntityFromObservations(observation, runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"What is the observed entity in the following observation? {observation}\" +\n            \"\\nEntity=\");\n        const result = await this.chain(prompt).call({\n            observation,\n        }, runManager?.getChild(\"entity_extractor\"));\n        return result.output;\n    }\n    /**\n     * Extracts the action of the given entity from the given observation.\n     * @param observation The observation to extract the action from.\n     * @param entityName The name of the entity to extract the action for.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The extracted action as a string.\n     */\n    async getEntityAction(observation, entityName, runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"What is the {entity} doing in the following observation? {observation}\" +\n            \"\\nThe {entity} is\");\n        const result = await this.chain(prompt).call({\n            entity: entityName,\n            observation,\n        }, runManager?.getChild(\"entity_action_extractor\"));\n        const trimmedResult = result.output.trim();\n        return trimmedResult;\n    }\n    /**\n     * Summarizes memories that are most relevant to an observation.\n     * @param observation The observation to summarize related memories for.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The summarized memories as a string.\n     */\n    async summarizeRelatedMemories(observation, runManager) {\n        // summarize memories that are most relevant to an observation\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(`\n{q1}?\nContext from memory:\n{relevant_memories}\nRelevant context:`);\n        const entityName = await this.getEntityFromObservations(observation, runManager);\n        const entityAction = await this.getEntityAction(observation, entityName, runManager);\n        const q1 = `What is the relationship between ${this.name} and ${entityName}`;\n        const q2 = `${entityName} is ${entityAction}`;\n        const response = await this.chain(prompt).call({\n            q1,\n            queries: [q1, q2],\n        }, runManager?.getChild(\"entity_relationships\"));\n        return response.output.trim(); // added output\n    }\n    async _call(values, runManager) {\n        const { observation, suffix, now } = values;\n        // react to a given observation or dialogue act\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(`{agent_summary_description}` +\n            `\\nIt is {current_time}.` +\n            `\\n{agent_name}'s status: {agent_status}` +\n            `\\nSummary of relevant context from {agent_name}'s memory:` +\n            \"\\n{relevant_memories}\" +\n            `\\nMost recent observations: {most_recent_memories}` +\n            `\\nObservation: {observation}` +\n            `\\n\\n${suffix}`);\n        const agentSummaryDescription = await this.getSummary({}, runManager); // now = now in param\n        const relevantMemoriesStr = await this.summarizeRelatedMemories(observation, runManager);\n        const currentTime = (now || new Date()).toLocaleString(\"en-US\", {\n            month: \"long\",\n            day: \"numeric\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            hour12: true,\n        });\n        const chainInputs = {\n            agent_summary_description: agentSummaryDescription,\n            current_time: currentTime,\n            agent_name: this.name,\n            observation,\n            agent_status: this.status,\n            most_recent_memories: \"\",\n        };\n        chainInputs[this.longTermMemory.getRelevantMemoriesKey()] =\n            relevantMemoriesStr;\n        const consumedTokens = await this.llm.getNumTokens(await prompt.format({ ...chainInputs }));\n        chainInputs[this.longTermMemory.getMostRecentMemoriesTokenKey()] =\n            consumedTokens;\n        const response = await this.chain(prompt).call(chainInputs, runManager?.getChild(\"reaction_from_summary\"));\n        const rawOutput = response.output;\n        let output = rawOutput;\n        let continue_dialogue = false;\n        if (rawOutput.includes(\"REACT:\")) {\n            const reaction = this._cleanResponse(rawOutput.split(\"REACT:\").pop());\n            await this.addMemory(`${this.name} observed ${observation} and reacted by ${reaction}`, now, {}, runManager?.getChild(\"memory\"));\n            output = `${reaction}`;\n            continue_dialogue = false;\n        }\n        else if (rawOutput.includes(\"SAY:\")) {\n            const saidValue = this._cleanResponse(rawOutput.split(\"SAY:\").pop());\n            await this.addMemory(`${this.name} observed ${observation} and said ${saidValue}`, now, {}, runManager?.getChild(\"memory\"));\n            output = `${this.name} said ${saidValue}`;\n            continue_dialogue = true;\n        }\n        else if (rawOutput.includes(\"GOODBYE:\")) {\n            const farewell = this._cleanResponse(rawOutput.split(\"GOODBYE:\").pop() ?? \"\");\n            await this.addMemory(`${this.name} observed ${observation} and said ${farewell}`, now, {}, runManager?.getChild(\"memory\"));\n            output = `${this.name} said ${farewell}`;\n            continue_dialogue = false;\n        }\n        return { output, continue_dialogue };\n    }\n    _cleanResponse(text) {\n        if (text === undefined) {\n            return \"\";\n        }\n        const regex = new RegExp(`^${this.name} `);\n        return text.replace(regex, \"\").trim();\n    }\n    /**\n     * Generates a reaction to the given observation.\n     * @param observation The observation to generate a reaction for.\n     * @param now Optional current date.\n     * @returns A boolean indicating whether to continue the dialogue and the output string.\n     */\n    async generateReaction(observation, now) {\n        const callToActionTemplate = `Should {agent_name} react to the observation, and if so,` +\n            ` what would be an appropriate reaction? Respond in one line.` +\n            ` If the action is to engage in dialogue, write:\\nSAY: \"what to say\"` +\n            ` \\notherwise, write:\\nREACT: {agent_name}'s reaction (if anything).` +\n            ` \\nEither do nothing, react, or say something but not both.\\n\\n`;\n        const { output, continue_dialogue } = await this.call({\n            observation,\n            suffix: callToActionTemplate,\n            now,\n        });\n        return [continue_dialogue, output];\n    }\n    /**\n     * Generates a dialogue response to the given observation.\n     * @param observation The observation to generate a dialogue response for.\n     * @param now Optional current date.\n     * @returns A boolean indicating whether to continue the dialogue and the output string.\n     */\n    async generateDialogueResponse(observation, now) {\n        const callToActionTemplate = `What would ${this.name} say? To end the conversation, write: GOODBYE: \"what to say\". Otherwise to continue the conversation, write: SAY: \"what to say next\"\\n\\n`;\n        const { output, continue_dialogue } = await this.call({\n            observation,\n            suffix: callToActionTemplate,\n            now,\n        });\n        return [continue_dialogue, output];\n    }\n    // Agent stateful' summary methods\n    // Each dialog or response prompt includes a header\n    // summarizing the agent's self-description. This is\n    // updated periodically through probing it's memories\n    /**\n     * Gets the agent's summary, which includes the agent's name, age, traits,\n     * and a summary of the agent's core characteristics. The summary is\n     * updated periodically through probing the agent's memories.\n     * @param config Optional configuration object with current date and a boolean to force refresh.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The agent's summary as a string.\n     */\n    async getSummary(config, runManager) {\n        const { now = new Date(), forceRefresh = false } = config ?? {};\n        const sinceRefresh = Math.floor((now.getTime() - this.lastRefreshed.getTime()) / 1000);\n        if (!this.summary ||\n            sinceRefresh >= this.summaryRefreshSeconds ||\n            forceRefresh) {\n            this.summary = await this.computeAgentSummary(runManager);\n            this.lastRefreshed = now;\n        }\n        let age;\n        if (this.age) {\n            age = this.age;\n        }\n        else {\n            age = \"N/A\";\n        }\n        return `Name: ${this.name} (age: ${age})\nInnate traits: ${this.traits}\n${this.summary}`;\n    }\n    /**\n     * Computes the agent's summary by summarizing the agent's core\n     * characteristics given the agent's relevant memories.\n     * @param runManager Optional CallbackManagerForChainRun instance.\n     * @returns The computed summary as a string.\n     */\n    async computeAgentSummary(runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"How would you summarize {name}'s core characteristics given the following statements:\\n\" +\n            \"----------\" +\n            \"{relevant_memories}\" +\n            \"----------\" +\n            \"Do not embellish.\" +\n            \"\\n\\nSummary: \");\n        // the agent seeks to think about their core characterisitics\n        const result = await this.chain(prompt).call({\n            name: this.name,\n            queries: [`${this.name}'s core characteristics`],\n        }, runManager?.getChild(\"compute_agent_summary\"));\n        return result.output.trim();\n    }\n    /**\n     * Returns a full header of the agent's status, summary, and current time.\n     * @param config Optional configuration object with current date and a boolean to force refresh.\n     * @returns The full header as a string.\n     */\n    getFullHeader(config = {}) {\n        const { now = new Date(), forceRefresh = false } = config;\n        // return a full header of the agent's status, summary, and current time.\n        const summary = this.getSummary({ now, forceRefresh });\n        const currentTimeString = now.toLocaleString(\"en-US\", {\n            month: \"long\",\n            day: \"numeric\",\n            year: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            hour12: true,\n        });\n        return `${summary}\\nIt is ${currentTimeString}.\\n${this.name}'s status: ${this.status}`;\n    }\n    /**\n     * Adds a memory to the agent's long-term memory.\n     * @param memoryContent The content of the memory to add.\n     * @param now Optional current date.\n     * @param metadata Optional metadata for the memory.\n     * @param callbacks Optional Callbacks instance.\n     * @returns The result of adding the memory to the agent's long-term memory.\n     */\n    async addMemory(memoryContent, now, metadata, callbacks) {\n        return this.longTermMemory.addMemory(memoryContent, now, metadata, callbacks);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerativeAgentMemory: () => (/* binding */ GenerativeAgentMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/memory */ \"(rsc)/./node_modules/@langchain/core/memory.js\");\n/* harmony import */ var _chains_base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chains/base.js */ \"(rsc)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n\n\n\n\n\n/**\n * Class that manages the memory of a generative agent in LangChain. It\n * extends the `BaseChain` class and has methods for adding observations\n * or memories to the agent's memory, scoring the importance of a memory,\n * reflecting on recent events to add synthesized memories, and generating\n * insights on a topic of reflection based on pertinent memories.\n */\nclass GenerativeAgentMemoryChain extends _chains_base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChain {\n    static lc_name() {\n        return \"GenerativeAgentMemoryChain\";\n    }\n    constructor(llm, memoryRetriever, config) {\n        super();\n        Object.defineProperty(this, \"reflecting\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"reflectionThreshold\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"importanceWeight\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.15\n        });\n        Object.defineProperty(this, \"memoryRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"aggregateImportance\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.0\n        });\n        this.llm = llm;\n        this.memoryRetriever = memoryRetriever;\n        this.reflectionThreshold = config.reflectionThreshold;\n        this.importanceWeight = config.importanceWeight ?? this.importanceWeight;\n        this.verbose = config.verbose ?? this.verbose;\n    }\n    _chainType() {\n        return \"generative_agent_memory\";\n    }\n    get inputKeys() {\n        return [\"memory_content\", \"now\", \"memory_metadata\"];\n    }\n    get outputKeys() {\n        return [\"output\"];\n    }\n    /**\n     * Method that creates a new LLMChain with the given prompt.\n     * @param prompt The PromptTemplate to use for the new LLMChain.\n     * @returns A new LLMChain instance.\n     */\n    chain(prompt) {\n        const chain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_4__.LLMChain({\n            llm: this.llm,\n            prompt,\n            verbose: this.verbose,\n            outputKey: \"output\",\n        });\n        return chain;\n    }\n    async _call(values, runManager) {\n        const { memory_content: memoryContent, now } = values;\n        // add an observation or memory to the agent's memory\n        const importanceScore = await this.scoreMemoryImportance(memoryContent, runManager);\n        this.aggregateImportance += importanceScore;\n        const document = new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_1__.Document({\n            pageContent: memoryContent,\n            metadata: {\n                importance: importanceScore,\n                ...values.memory_metadata,\n            },\n        });\n        await this.memoryRetriever.addDocuments([document]);\n        // after an agent has processed a certain amount of memories (as measured by aggregate importance),\n        // it is time to pause and reflect on recent events to add more synthesized memories to the agent's\n        // memory stream.\n        if (this.reflectionThreshold !== undefined &&\n            this.aggregateImportance > this.reflectionThreshold &&\n            !this.reflecting) {\n            console.log(\"Reflecting on current memories...\");\n            this.reflecting = true;\n            await this.pauseToReflect(now, runManager);\n            this.aggregateImportance = 0.0;\n            this.reflecting = false;\n        }\n        return { output: importanceScore };\n    }\n    /**\n     * Method that pauses the agent to reflect on recent events and generate\n     * new insights.\n     * @param now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for the reflection.\n     * @returns An array of new insights as strings.\n     */\n    async pauseToReflect(now, runManager) {\n        if (this.verbose) {\n            console.log(\"Pausing to reflect...\");\n        }\n        const newInsights = [];\n        const topics = await this.getTopicsOfReflection(50, runManager);\n        for (const topic of topics) {\n            const insights = await this.getInsightsOnTopic(topic, now, runManager);\n            for (const insight of insights) {\n                // add memory\n                await this.call({\n                    memory_content: insight,\n                    now,\n                    memory_metadata: {\n                        source: \"reflection_insight\",\n                    },\n                }, runManager?.getChild(\"reflection_insight_memory\"));\n            }\n            newInsights.push(...insights);\n        }\n        return newInsights;\n    }\n    /**\n     * Method that scores the importance of a given memory.\n     * @param memoryContent The content of the memory to score.\n     * @param runManager The CallbackManagerForChainRun to use for scoring.\n     * @returns The importance score of the memory as a number.\n     */\n    async scoreMemoryImportance(memoryContent, runManager) {\n        // score the absolute importance of a given memory\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"On the scale of 1 to 10, where 1 is purely mundane\" +\n            \" (e.g., brushing teeth, making bed) and 10 is\" +\n            \" extremely poignant (e.g., a break up, college\" +\n            \" acceptance), rate the likely poignancy of the\" +\n            \" following piece of memory. Respond with a single integer.\" +\n            \"\\nMemory: {memory_content}\" +\n            \"\\nRating: \");\n        const score = await this.chain(prompt).run(memoryContent, runManager?.getChild(\"determine_importance\"));\n        const strippedScore = score.trim();\n        if (this.verbose) {\n            console.log(\"Importance score:\", strippedScore);\n        }\n        const match = strippedScore.match(/^\\D*(\\d+)/);\n        if (match) {\n            const capturedNumber = parseFloat(match[1]);\n            const result = (capturedNumber / 10) * this.importanceWeight;\n            return result;\n        }\n        else {\n            return 0.0;\n        }\n    }\n    /**\n     * Method that retrieves the topics of reflection based on the last K\n     * memories.\n     * @param lastK The number of most recent memories to consider for generating topics.\n     * @param runManager The CallbackManagerForChainRun to use for retrieving topics.\n     * @returns An array of topics of reflection as strings.\n     */\n    async getTopicsOfReflection(lastK, runManager) {\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"{observations}\\n\\n\" +\n            \"Given only the information above, what are the 3 most salient\" +\n            \" high-level questions we can answer about the subjects in\" +\n            \" the statements? Provide each question on a new line.\\n\\n\");\n        const observations = this.memoryRetriever.getMemoryStream().slice(-lastK);\n        const observationStr = observations\n            .map((o) => o.pageContent)\n            .join(\"\\n\");\n        const result = await this.chain(prompt).run(observationStr, runManager?.getChild(\"reflection_topics\"));\n        return GenerativeAgentMemoryChain.parseList(result);\n    }\n    /**\n     * Method that generates insights on a given topic of reflection based on\n     * pertinent memories.\n     * @param topic The topic of reflection.\n     * @param now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for generating insights.\n     * @returns An array of insights as strings.\n     */\n    async getInsightsOnTopic(topic, now, runManager) {\n        // generate insights on a topic of reflection, based on pertinent memories\n        const prompt = _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate.fromTemplate(\"Statements about {topic}\\n\" +\n            \"{related_statements}\\n\\n\" +\n            \"What 5 high-level insights can you infer from the above statements?\" +\n            \" (example format: insight (because of 1, 5, 3))\");\n        const relatedMemories = await this.fetchMemories(topic, now, runManager);\n        const relatedStatements = relatedMemories\n            .map((memory, index) => `${index + 1}. ${memory.pageContent}`)\n            .join(\"\\n\");\n        const result = await this.chain(prompt).call({\n            topic,\n            related_statements: relatedStatements,\n        }, runManager?.getChild(\"reflection_insights\"));\n        return GenerativeAgentMemoryChain.parseList(result.output); // added output\n    }\n    /**\n     * Method that parses a newline-separated string into a list of strings.\n     * @param text The newline-separated string to parse.\n     * @returns An array of strings.\n     */\n    static parseList(text) {\n        // parse a newine seperates string into a list of strings\n        return text.split(\"\\n\").map((s) => s.trim());\n    }\n    // TODO: Mock \"now\" to simulate different times\n    /**\n     * Method that fetches memories related to a given observation.\n     * @param observation The observation to fetch memories for.\n     * @param _now The current date.\n     * @param runManager The CallbackManagerForChainRun to use for fetching memories.\n     * @returns An array of Document instances representing the fetched memories.\n     */\n    async fetchMemories(observation, _now, runManager) {\n        return this.memoryRetriever.getRelevantDocuments(observation, runManager?.getChild(\"memory_retriever\"));\n    }\n}\n/**\n * Class that manages the memory of a generative agent in LangChain. It\n * extends the `BaseMemory` class and has methods for adding a memory,\n * formatting memories, getting memories until a token limit is reached,\n * loading memory variables, saving the context of a model run to memory,\n * and clearing memory contents.\n * @example\n * ```typescript\n * const createNewMemoryRetriever = async () => {\n *   const vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n *   const retriever = new TimeWeightedVectorStoreRetriever({\n *     vectorStore,\n *     otherScoreKeys: [\"importance\"],\n *     k: 15,\n *   });\n *   return retriever;\n * };\n * const tommiesMemory = new GenerativeAgentMemory(\n *   llm,\n *   await createNewMemoryRetriever(),\n *   { reflectionThreshold: 8 },\n * );\n * const summary = await tommiesMemory.getSummary();\n * ```\n */\nclass GenerativeAgentMemory extends _langchain_core_memory__WEBPACK_IMPORTED_MODULE_2__.BaseMemory {\n    constructor(llm, memoryRetriever, config) {\n        super();\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"memoryRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reflectionThreshold\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokensLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1200\n        });\n        Object.defineProperty(this, \"queriesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"queries\"\n        });\n        Object.defineProperty(this, \"mostRecentMemoriesTokenKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"recent_memories_token\"\n        });\n        Object.defineProperty(this, \"addMemoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"addMemory\"\n        });\n        Object.defineProperty(this, \"relevantMemoriesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"relevant_memories\"\n        });\n        Object.defineProperty(this, \"relevantMemoriesSimpleKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"relevant_memories_simple\"\n        });\n        Object.defineProperty(this, \"mostRecentMemoriesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"most_recent_memories\"\n        });\n        Object.defineProperty(this, \"nowKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"now\"\n        });\n        Object.defineProperty(this, \"memoryChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llm = llm;\n        this.memoryRetriever = memoryRetriever;\n        this.verbose = config?.verbose ?? this.verbose;\n        this.reflectionThreshold =\n            config?.reflectionThreshold ?? this.reflectionThreshold;\n        this.maxTokensLimit = config?.maxTokensLimit ?? this.maxTokensLimit;\n        this.memoryChain = new GenerativeAgentMemoryChain(llm, memoryRetriever, {\n            reflectionThreshold: config?.reflectionThreshold,\n            importanceWeight: config?.importanceWeight,\n        });\n    }\n    /**\n     * Method that returns the key for relevant memories.\n     * @returns The key for relevant memories as a string.\n     */\n    getRelevantMemoriesKey() {\n        return this.relevantMemoriesKey;\n    }\n    /**\n     * Method that returns the key for the most recent memories token.\n     * @returns The key for the most recent memories token as a string.\n     */\n    getMostRecentMemoriesTokenKey() {\n        return this.mostRecentMemoriesTokenKey;\n    }\n    /**\n     * Method that returns the key for adding a memory.\n     * @returns The key for adding a memory as a string.\n     */\n    getAddMemoryKey() {\n        return this.addMemoryKey;\n    }\n    /**\n     * Method that returns the key for the current time.\n     * @returns The key for the current time as a string.\n     */\n    getCurrentTimeKey() {\n        return this.nowKey;\n    }\n    get memoryKeys() {\n        // Return an array of memory keys\n        return [this.relevantMemoriesKey, this.mostRecentMemoriesKey];\n    }\n    /**\n     * Method that adds a memory to the agent's memory.\n     * @param memoryContent The content of the memory to add.\n     * @param now The current date.\n     * @param metadata The metadata for the memory.\n     * @param callbacks The Callbacks to use for adding the memory.\n     * @returns The result of the memory addition.\n     */\n    async addMemory(memoryContent, now, metadata, callbacks) {\n        return this.memoryChain.call({ memory_content: memoryContent, now, memory_metadata: metadata }, callbacks);\n    }\n    /**\n     * Method that formats the given relevant memories in detail.\n     * @param relevantMemories The relevant memories to format.\n     * @returns The formatted memories as a string.\n     */\n    formatMemoriesDetail(relevantMemories) {\n        if (!relevantMemories.length) {\n            return \"No relevant information.\";\n        }\n        const contentStrings = new Set();\n        const content = [];\n        for (const memory of relevantMemories) {\n            if (memory.pageContent in contentStrings) {\n                continue;\n            }\n            contentStrings.add(memory.pageContent);\n            const createdTime = memory.metadata.created_at.toLocaleString(\"en-US\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n                hour: \"numeric\",\n                minute: \"numeric\",\n                hour12: true,\n            });\n            content.push(`${createdTime}: ${memory.pageContent.trim()}`);\n        }\n        const joinedContent = content.map((mem) => `${mem}`).join(\"\\n\");\n        return joinedContent;\n    }\n    /**\n     * Method that formats the given relevant memories in a simple manner.\n     * @param relevantMemories The relevant memories to format.\n     * @returns The formatted memories as a string.\n     */\n    formatMemoriesSimple(relevantMemories) {\n        const joinedContent = relevantMemories\n            .map((mem) => `${mem.pageContent}`)\n            .join(\"; \");\n        return joinedContent;\n    }\n    /**\n     * Method that retrieves memories until a token limit is reached.\n     * @param consumedTokens The number of tokens consumed so far.\n     * @returns The memories as a string.\n     */\n    async getMemoriesUntilLimit(consumedTokens) {\n        // reduce the number of tokens in the documents\n        const result = [];\n        for (const doc of this.memoryRetriever\n            .getMemoryStream()\n            .slice()\n            .reverse()) {\n            if (consumedTokens >= this.maxTokensLimit) {\n                if (this.verbose) {\n                    console.log(\"Exceeding max tokens for LLM, filtering memories\");\n                }\n                break;\n            }\n            // eslint-disable-next-line no-param-reassign\n            consumedTokens += await this.llm.getNumTokens(doc.pageContent);\n            if (consumedTokens < this.maxTokensLimit) {\n                result.push(doc);\n            }\n        }\n        return this.formatMemoriesSimple(result);\n    }\n    get memoryVariables() {\n        // input keys this memory class will load dynamically\n        return [];\n    }\n    /**\n     * Method that loads memory variables based on the given inputs.\n     * @param inputs The inputs to use for loading memory variables.\n     * @returns An object containing the loaded memory variables.\n     */\n    async loadMemoryVariables(inputs) {\n        const queries = inputs[this.queriesKey];\n        const now = inputs[this.nowKey];\n        if (queries !== undefined) {\n            const relevantMemories = (await Promise.all(queries.map((query) => this.memoryChain.fetchMemories(query, now)))).flat();\n            return {\n                [this.relevantMemoriesKey]: this.formatMemoriesDetail(relevantMemories),\n                [this.relevantMemoriesSimpleKey]: this.formatMemoriesSimple(relevantMemories),\n            };\n        }\n        const mostRecentMemoriesToken = inputs[this.mostRecentMemoriesTokenKey];\n        if (mostRecentMemoriesToken !== undefined) {\n            return {\n                [this.mostRecentMemoriesKey]: await this.getMemoriesUntilLimit(mostRecentMemoriesToken),\n            };\n        }\n        return {};\n    }\n    /**\n     * Method that saves the context of a model run to memory.\n     * @param _inputs The inputs of the model run.\n     * @param outputs The outputs of the model run.\n     * @returns Nothing.\n     */\n    async saveContext(_inputs, outputs) {\n        // save the context of this model run to memory\n        const mem = outputs[this.addMemoryKey];\n        const now = outputs[this.nowKey];\n        if (mem) {\n            await this.addMemory(mem, now, {});\n        }\n    }\n    /**\n     * Method that clears the memory contents.\n     * @returns Nothing.\n     */\n    clear() {\n        // TODO: clear memory contents\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/dist/experimental/generative_agents/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerativeAgent: () => (/* reexport safe */ _generative_agent_js__WEBPACK_IMPORTED_MODULE_1__.GenerativeAgent),\n/* harmony export */   GenerativeAgentMemory: () => (/* reexport safe */ _generative_agent_memory_js__WEBPACK_IMPORTED_MODULE_0__.GenerativeAgentMemory)\n/* harmony export */ });\n/* harmony import */ var _generative_agent_memory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generative_agent_memory.js */ \"(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent_memory.js\");\n/* harmony import */ var _generative_agent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generative_agent.js */ \"(rsc)/./node_modules/langchain/dist/experimental/generative_agents/generative_agent.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZXhwZXJpbWVudGFsL2dlbmVyYXRpdmVfYWdlbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUU7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9leHBlcmltZW50YWwvZ2VuZXJhdGl2ZV9hZ2VudHMvaW5kZXguanM/NjI2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBHZW5lcmF0aXZlQWdlbnRNZW1vcnkgfSBmcm9tIFwiLi9nZW5lcmF0aXZlX2FnZW50X21lbW9yeS5qc1wiO1xuZXhwb3J0IHsgR2VuZXJhdGl2ZUFnZW50IH0gZnJvbSBcIi4vZ2VuZXJhdGl2ZV9hZ2VudC5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/experimental/generative_agents/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/base.js":
/*!****************************************************!*\
  !*** ./node_modules/langchain/dist/memory/base.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMemory: () => (/* reexport safe */ _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.BaseMemory),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.getBufferString),\n/* harmony export */   getInputValue: () => (/* reexport safe */ _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.getInputValue),\n/* harmony export */   getOutputValue: () => (/* reexport safe */ _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.getOutputValue),\n/* harmony export */   getPromptInputKey: () => (/* reexport safe */ _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.getPromptInputKey)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/memory */ \"(rsc)/./node_modules/@langchain/core/memory.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF1QztBQUNvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9tZW1vcnkvYmFzZS5qcz83YzM3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvbWVtb3J5XCI7XG5leHBvcnQgeyBnZXRCdWZmZXJTdHJpbmcgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/buffer_memory.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/buffer_memory.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferMemory: () => (/* binding */ BufferMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _chat_memory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\");\n\n\n/**\n * The `BufferMemory` class is a type of memory component used for storing\n * and managing previous chat messages. It is a wrapper around\n * `ChatMessageHistory` that extracts the messages into an input variable.\n * This class is particularly useful in applications like chatbots where\n * it is essential to remember previous interactions. Note: The memory\n * instance represents the history of a single conversation. Therefore, it\n * is not recommended to share the same history or memory instance between\n * two different chains. If you deploy your LangChain app on a serverless\n * environment, do not store memory instances in a variable, as your\n * hosting provider may reset it by the next time the function is called.\n * @example\n * ```typescript\n * // Initialize the memory to store chat history and set up the language model with a specific temperature.\n * const memory = new BufferMemory({ memoryKey: \"chat_history\" });\n * const model = new ChatOpenAI({ temperature: 0.9 });\n *\n * // Create a prompt template for a friendly conversation between a human and an AI.\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n *\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n *\n * // Set up the chain with the language model, prompt, and memory.\n * const chain = new LLMChain({ llm: model, prompt, memory });\n *\n * // Example usage of the chain to continue the conversation.\n * // The `call` method sends the input to the model and returns the AI's response.\n * const res = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res });\n *\n * ```\n */\nclass BufferMemory extends _chat_memory_js__WEBPACK_IMPORTED_MODULE_1__.BaseChatMemory {\n    constructor(fields) {\n        super({\n            chatHistory: fields?.chatHistory,\n            returnMessages: fields?.returnMessages ?? false,\n            inputKey: fields?.inputKey,\n            outputKey: fields?.outputKey,\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Loads the memory variables. It takes an `InputValues` object as a\n     * parameter and returns a `Promise` that resolves with a\n     * `MemoryVariables` object.\n     * @param _values `InputValues` object.\n     * @returns A `Promise` that resolves with a `MemoryVariables` object.\n     */\n    async loadMemoryVariables(_values) {\n        const messages = await this.chatHistory.getMessages();\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: messages,\n            };\n            return result;\n        }\n        const result = {\n            [this.memoryKey]: (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(messages, this.humanPrefix, this.aiPrefix),\n        };\n        return result;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2J1ZmZlcl9tZW1vcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBQ1Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywyQkFBMkI7QUFDaEUsa0NBQWtDLGtCQUFrQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw0QkFBNEI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHVCQUF1QjtBQUN6RCxpQkFBaUIsS0FBSztBQUN0QjtBQUNBO0FBQ0E7QUFDTywyQkFBMkIsMkRBQWM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIseUVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2J1ZmZlcl9tZW1vcnkuanM/YzAwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRCdWZmZXJTdHJpbmcgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzXCI7XG5pbXBvcnQgeyBCYXNlQ2hhdE1lbW9yeSB9IGZyb20gXCIuL2NoYXRfbWVtb3J5LmpzXCI7XG4vKipcbiAqIFRoZSBgQnVmZmVyTWVtb3J5YCBjbGFzcyBpcyBhIHR5cGUgb2YgbWVtb3J5IGNvbXBvbmVudCB1c2VkIGZvciBzdG9yaW5nXG4gKiBhbmQgbWFuYWdpbmcgcHJldmlvdXMgY2hhdCBtZXNzYWdlcy4gSXQgaXMgYSB3cmFwcGVyIGFyb3VuZFxuICogYENoYXRNZXNzYWdlSGlzdG9yeWAgdGhhdCBleHRyYWN0cyB0aGUgbWVzc2FnZXMgaW50byBhbiBpbnB1dCB2YXJpYWJsZS5cbiAqIFRoaXMgY2xhc3MgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBpbiBhcHBsaWNhdGlvbnMgbGlrZSBjaGF0Ym90cyB3aGVyZVxuICogaXQgaXMgZXNzZW50aWFsIHRvIHJlbWVtYmVyIHByZXZpb3VzIGludGVyYWN0aW9ucy4gTm90ZTogVGhlIG1lbW9yeVxuICogaW5zdGFuY2UgcmVwcmVzZW50cyB0aGUgaGlzdG9yeSBvZiBhIHNpbmdsZSBjb252ZXJzYXRpb24uIFRoZXJlZm9yZSwgaXRcbiAqIGlzIG5vdCByZWNvbW1lbmRlZCB0byBzaGFyZSB0aGUgc2FtZSBoaXN0b3J5IG9yIG1lbW9yeSBpbnN0YW5jZSBiZXR3ZWVuXG4gKiB0d28gZGlmZmVyZW50IGNoYWlucy4gSWYgeW91IGRlcGxveSB5b3VyIExhbmdDaGFpbiBhcHAgb24gYSBzZXJ2ZXJsZXNzXG4gKiBlbnZpcm9ubWVudCwgZG8gbm90IHN0b3JlIG1lbW9yeSBpbnN0YW5jZXMgaW4gYSB2YXJpYWJsZSwgYXMgeW91clxuICogaG9zdGluZyBwcm92aWRlciBtYXkgcmVzZXQgaXQgYnkgdGhlIG5leHQgdGltZSB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIEluaXRpYWxpemUgdGhlIG1lbW9yeSB0byBzdG9yZSBjaGF0IGhpc3RvcnkgYW5kIHNldCB1cCB0aGUgbGFuZ3VhZ2UgbW9kZWwgd2l0aCBhIHNwZWNpZmljIHRlbXBlcmF0dXJlLlxuICogY29uc3QgbWVtb3J5ID0gbmV3IEJ1ZmZlck1lbW9yeSh7IG1lbW9yeUtleTogXCJjaGF0X2hpc3RvcnlcIiB9KTtcbiAqIGNvbnN0IG1vZGVsID0gbmV3IENoYXRPcGVuQUkoeyB0ZW1wZXJhdHVyZTogMC45IH0pO1xuICpcbiAqIC8vIENyZWF0ZSBhIHByb21wdCB0ZW1wbGF0ZSBmb3IgYSBmcmllbmRseSBjb252ZXJzYXRpb24gYmV0d2VlbiBhIGh1bWFuIGFuZCBhbiBBSS5cbiAqIGNvbnN0IHByb21wdCA9XG4gKiAgIFByb21wdFRlbXBsYXRlLmZyb21UZW1wbGF0ZShgVGhlIGZvbGxvd2luZyBpcyBhIGZyaWVuZGx5IGNvbnZlcnNhdGlvbiBiZXR3ZWVuIGEgaHVtYW4gYW5kIGFuIEFJLiBUaGUgQUkgaXMgdGFsa2F0aXZlIGFuZCBwcm92aWRlcyBsb3RzIG9mIHNwZWNpZmljIGRldGFpbHMgZnJvbSBpdHMgY29udGV4dC4gSWYgdGhlIEFJIGRvZXMgbm90IGtub3cgdGhlIGFuc3dlciB0byBhIHF1ZXN0aW9uLCBpdCB0cnV0aGZ1bGx5IHNheXMgaXQgZG9lcyBub3Qga25vdy5cbiAqXG4gKiBDdXJyZW50IGNvbnZlcnNhdGlvbjpcbiAqIHtjaGF0X2hpc3Rvcnl9XG4gKiBIdW1hbjoge2lucHV0fVxuICogQUk6YCk7XG4gKlxuICogLy8gU2V0IHVwIHRoZSBjaGFpbiB3aXRoIHRoZSBsYW5ndWFnZSBtb2RlbCwgcHJvbXB0LCBhbmQgbWVtb3J5LlxuICogY29uc3QgY2hhaW4gPSBuZXcgTExNQ2hhaW4oeyBsbG06IG1vZGVsLCBwcm9tcHQsIG1lbW9yeSB9KTtcbiAqXG4gKiAvLyBFeGFtcGxlIHVzYWdlIG9mIHRoZSBjaGFpbiB0byBjb250aW51ZSB0aGUgY29udmVyc2F0aW9uLlxuICogLy8gVGhlIGBjYWxsYCBtZXRob2Qgc2VuZHMgdGhlIGlucHV0IHRvIHRoZSBtb2RlbCBhbmQgcmV0dXJucyB0aGUgQUkncyByZXNwb25zZS5cbiAqIGNvbnN0IHJlcyA9IGF3YWl0IGNoYWluLmNhbGwoeyBpbnB1dDogXCJIaSEgSSdtIEppbS5cIiB9KTtcbiAqIGNvbnNvbGUubG9nKHsgcmVzIH0pO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyTWVtb3J5IGV4dGVuZHMgQmFzZUNoYXRNZW1vcnkge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBjaGF0SGlzdG9yeTogZmllbGRzPy5jaGF0SGlzdG9yeSxcbiAgICAgICAgICAgIHJldHVybk1lc3NhZ2VzOiBmaWVsZHM/LnJldHVybk1lc3NhZ2VzID8/IGZhbHNlLFxuICAgICAgICAgICAgaW5wdXRLZXk6IGZpZWxkcz8uaW5wdXRLZXksXG4gICAgICAgICAgICBvdXRwdXRLZXk6IGZpZWxkcz8ub3V0cHV0S2V5LFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaHVtYW5QcmVmaXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiSHVtYW5cIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYWlQcmVmaXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiQUlcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVtb3J5S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcImhpc3RvcnlcIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5odW1hblByZWZpeCA9IGZpZWxkcz8uaHVtYW5QcmVmaXggPz8gdGhpcy5odW1hblByZWZpeDtcbiAgICAgICAgdGhpcy5haVByZWZpeCA9IGZpZWxkcz8uYWlQcmVmaXggPz8gdGhpcy5haVByZWZpeDtcbiAgICAgICAgdGhpcy5tZW1vcnlLZXkgPSBmaWVsZHM/Lm1lbW9yeUtleSA/PyB0aGlzLm1lbW9yeUtleTtcbiAgICB9XG4gICAgZ2V0IG1lbW9yeUtleXMoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5tZW1vcnlLZXldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgbWVtb3J5IHZhcmlhYmxlcy4gSXQgdGFrZXMgYW4gYElucHV0VmFsdWVzYCBvYmplY3QgYXMgYVxuICAgICAqIHBhcmFtZXRlciBhbmQgcmV0dXJucyBhIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggYVxuICAgICAqIGBNZW1vcnlWYXJpYWJsZXNgIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gX3ZhbHVlcyBgSW5wdXRWYWx1ZXNgIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggYSBgTWVtb3J5VmFyaWFibGVzYCBvYmplY3QuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZE1lbW9yeVZhcmlhYmxlcyhfdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgdGhpcy5jaGF0SGlzdG9yeS5nZXRNZXNzYWdlcygpO1xuICAgICAgICBpZiAodGhpcy5yZXR1cm5NZXNzYWdlcykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIFt0aGlzLm1lbW9yeUtleV06IG1lc3NhZ2VzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgW3RoaXMubWVtb3J5S2V5XTogZ2V0QnVmZmVyU3RyaW5nKG1lc3NhZ2VzLCB0aGlzLmh1bWFuUHJlZml4LCB0aGlzLmFpUHJlZml4KSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/buffer_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/buffer_token_memory.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/buffer_token_memory.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationTokenBufferMemory: () => (/* binding */ ConversationTokenBufferMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _chat_memory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\");\n\n\n/**\n * Class that represents a conversation chat memory with a token buffer.\n * It extends the `BaseChatMemory` class and implements the\n * `ConversationTokenBufferMemoryInput` interface.\n * @example\n * ```typescript\n * const memory = new ConversationTokenBufferMemory({\n *   llm: new ChatOpenAI({}),\n *   maxTokenLimit: 10,\n * });\n *\n * // Save conversation context\n * await memory.saveContext({ input: \"hi\" }, { output: \"whats up\" });\n * await memory.saveContext({ input: \"not much you\" }, { output: \"not much\" });\n *\n * // Load memory variables\n * const result = await memory.loadMemoryVariables({});\n * console.log(result);\n * ```\n */\nclass ConversationTokenBufferMemory extends _chat_memory_js__WEBPACK_IMPORTED_MODULE_1__.BaseChatMemory {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"maxTokenLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 2000\n        }); // Default max token limit of 2000 which can be overridden\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llm = fields.llm;\n        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n        this.maxTokenLimit = fields?.maxTokenLimit ?? this.maxTokenLimit;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Loads the memory variables. It takes an `InputValues` object as a\n     * parameter and returns a `Promise` that resolves with a\n     * `MemoryVariables` object.\n     * @param _values `InputValues` object.\n     * @returns A `Promise` that resolves with a `MemoryVariables` object.\n     */\n    async loadMemoryVariables(_values) {\n        const messages = await this.chatHistory.getMessages();\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: messages,\n            };\n            return result;\n        }\n        const result = {\n            [this.memoryKey]: (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(messages, this.humanPrefix, this.aiPrefix),\n        };\n        return result;\n    }\n    /**\n     * Saves the context from this conversation to buffer. If the amount\n     * of tokens required to save the buffer exceeds MAX_TOKEN_LIMIT,\n     * prune it.\n     */\n    async saveContext(inputValues, outputValues) {\n        await super.saveContext(inputValues, outputValues);\n        // Prune buffer if it exceeds the max token limit set for this instance.\n        const buffer = await this.chatHistory.getMessages();\n        let currBufferLength = await this.llm.getNumTokens((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(buffer, this.humanPrefix, this.aiPrefix));\n        if (currBufferLength > this.maxTokenLimit) {\n            const prunedMemory = [];\n            while (currBufferLength > this.maxTokenLimit) {\n                prunedMemory.push(buffer.shift());\n                currBufferLength = await this.llm.getNumTokens((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(buffer, this.humanPrefix, this.aiPrefix));\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2J1ZmZlcl90b2tlbl9tZW1vcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBQ1Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDhCQUE4QixhQUFhLElBQUksb0JBQW9CO0FBQ25FLDhCQUE4Qix1QkFBdUIsSUFBSSxvQkFBb0I7QUFDN0U7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDTyw0Q0FBNEMsMkRBQWM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLEdBQUc7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlFQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCx5RUFBZTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCx5RUFBZTtBQUM5RTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9tZW1vcnkvYnVmZmVyX3Rva2VuX21lbW9yeS5qcz9iM2VkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEJ1ZmZlclN0cmluZyB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvbWVzc2FnZXNcIjtcbmltcG9ydCB7IEJhc2VDaGF0TWVtb3J5IH0gZnJvbSBcIi4vY2hhdF9tZW1vcnkuanNcIjtcbi8qKlxuICogQ2xhc3MgdGhhdCByZXByZXNlbnRzIGEgY29udmVyc2F0aW9uIGNoYXQgbWVtb3J5IHdpdGggYSB0b2tlbiBidWZmZXIuXG4gKiBJdCBleHRlbmRzIHRoZSBgQmFzZUNoYXRNZW1vcnlgIGNsYXNzIGFuZCBpbXBsZW1lbnRzIHRoZVxuICogYENvbnZlcnNhdGlvblRva2VuQnVmZmVyTWVtb3J5SW5wdXRgIGludGVyZmFjZS5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBtZW1vcnkgPSBuZXcgQ29udmVyc2F0aW9uVG9rZW5CdWZmZXJNZW1vcnkoe1xuICogICBsbG06IG5ldyBDaGF0T3BlbkFJKHt9KSxcbiAqICAgbWF4VG9rZW5MaW1pdDogMTAsXG4gKiB9KTtcbiAqXG4gKiAvLyBTYXZlIGNvbnZlcnNhdGlvbiBjb250ZXh0XG4gKiBhd2FpdCBtZW1vcnkuc2F2ZUNvbnRleHQoeyBpbnB1dDogXCJoaVwiIH0sIHsgb3V0cHV0OiBcIndoYXRzIHVwXCIgfSk7XG4gKiBhd2FpdCBtZW1vcnkuc2F2ZUNvbnRleHQoeyBpbnB1dDogXCJub3QgbXVjaCB5b3VcIiB9LCB7IG91dHB1dDogXCJub3QgbXVjaFwiIH0pO1xuICpcbiAqIC8vIExvYWQgbWVtb3J5IHZhcmlhYmxlc1xuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgbWVtb3J5LmxvYWRNZW1vcnlWYXJpYWJsZXMoe30pO1xuICogY29uc29sZS5sb2cocmVzdWx0KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgQ29udmVyc2F0aW9uVG9rZW5CdWZmZXJNZW1vcnkgZXh0ZW5kcyBCYXNlQ2hhdE1lbW9yeSB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImh1bWFuUHJlZml4XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIkh1bWFuXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFpUHJlZml4XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIkFJXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1lbW9yeUtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJoaXN0b3J5XCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1heFRva2VuTGltaXRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDIwMDBcbiAgICAgICAgfSk7IC8vIERlZmF1bHQgbWF4IHRva2VuIGxpbWl0IG9mIDIwMDAgd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGxtXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGxtID0gZmllbGRzLmxsbTtcbiAgICAgICAgdGhpcy5odW1hblByZWZpeCA9IGZpZWxkcz8uaHVtYW5QcmVmaXggPz8gdGhpcy5odW1hblByZWZpeDtcbiAgICAgICAgdGhpcy5haVByZWZpeCA9IGZpZWxkcz8uYWlQcmVmaXggPz8gdGhpcy5haVByZWZpeDtcbiAgICAgICAgdGhpcy5tZW1vcnlLZXkgPSBmaWVsZHM/Lm1lbW9yeUtleSA/PyB0aGlzLm1lbW9yeUtleTtcbiAgICAgICAgdGhpcy5tYXhUb2tlbkxpbWl0ID0gZmllbGRzPy5tYXhUb2tlbkxpbWl0ID8/IHRoaXMubWF4VG9rZW5MaW1pdDtcbiAgICB9XG4gICAgZ2V0IG1lbW9yeUtleXMoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5tZW1vcnlLZXldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgbWVtb3J5IHZhcmlhYmxlcy4gSXQgdGFrZXMgYW4gYElucHV0VmFsdWVzYCBvYmplY3QgYXMgYVxuICAgICAqIHBhcmFtZXRlciBhbmQgcmV0dXJucyBhIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggYVxuICAgICAqIGBNZW1vcnlWYXJpYWJsZXNgIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gX3ZhbHVlcyBgSW5wdXRWYWx1ZXNgIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBBIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIHdpdGggYSBgTWVtb3J5VmFyaWFibGVzYCBvYmplY3QuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZE1lbW9yeVZhcmlhYmxlcyhfdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgdGhpcy5jaGF0SGlzdG9yeS5nZXRNZXNzYWdlcygpO1xuICAgICAgICBpZiAodGhpcy5yZXR1cm5NZXNzYWdlcykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIFt0aGlzLm1lbW9yeUtleV06IG1lc3NhZ2VzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgW3RoaXMubWVtb3J5S2V5XTogZ2V0QnVmZmVyU3RyaW5nKG1lc3NhZ2VzLCB0aGlzLmh1bWFuUHJlZml4LCB0aGlzLmFpUHJlZml4KSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2F2ZXMgdGhlIGNvbnRleHQgZnJvbSB0aGlzIGNvbnZlcnNhdGlvbiB0byBidWZmZXIuIElmIHRoZSBhbW91bnRcbiAgICAgKiBvZiB0b2tlbnMgcmVxdWlyZWQgdG8gc2F2ZSB0aGUgYnVmZmVyIGV4Y2VlZHMgTUFYX1RPS0VOX0xJTUlULFxuICAgICAqIHBydW5lIGl0LlxuICAgICAqL1xuICAgIGFzeW5jIHNhdmVDb250ZXh0KGlucHV0VmFsdWVzLCBvdXRwdXRWYWx1ZXMpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuc2F2ZUNvbnRleHQoaW5wdXRWYWx1ZXMsIG91dHB1dFZhbHVlcyk7XG4gICAgICAgIC8vIFBydW5lIGJ1ZmZlciBpZiBpdCBleGNlZWRzIHRoZSBtYXggdG9rZW4gbGltaXQgc2V0IGZvciB0aGlzIGluc3RhbmNlLlxuICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCB0aGlzLmNoYXRIaXN0b3J5LmdldE1lc3NhZ2VzKCk7XG4gICAgICAgIGxldCBjdXJyQnVmZmVyTGVuZ3RoID0gYXdhaXQgdGhpcy5sbG0uZ2V0TnVtVG9rZW5zKGdldEJ1ZmZlclN0cmluZyhidWZmZXIsIHRoaXMuaHVtYW5QcmVmaXgsIHRoaXMuYWlQcmVmaXgpKTtcbiAgICAgICAgaWYgKGN1cnJCdWZmZXJMZW5ndGggPiB0aGlzLm1heFRva2VuTGltaXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBydW5lZE1lbW9yeSA9IFtdO1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJCdWZmZXJMZW5ndGggPiB0aGlzLm1heFRva2VuTGltaXQpIHtcbiAgICAgICAgICAgICAgICBwcnVuZWRNZW1vcnkucHVzaChidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgY3VyckJ1ZmZlckxlbmd0aCA9IGF3YWl0IHRoaXMubGxtLmdldE51bVRva2VucyhnZXRCdWZmZXJTdHJpbmcoYnVmZmVyLCB0aGlzLmh1bWFuUHJlZml4LCB0aGlzLmFpUHJlZml4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/buffer_token_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/buffer_window_memory.js":
/*!********************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/buffer_window_memory.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferWindowMemory: () => (/* binding */ BufferWindowMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _chat_memory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\");\n\n\n/**\n * Class for managing and storing previous chat messages. It extends the\n * BaseChatMemory class and implements the BufferWindowMemoryInput\n * interface. This class is stateful and stores messages in a buffer. When\n * called in a chain, it returns all of the messages it has stored.\n * @example\n * ```typescript\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n *\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n *   memory: new BufferWindowMemory({ memoryKey: \"chat_history\", k: 1 }),\n * });\n *\n * // Example of initiating a conversation with the AI\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res1 });\n *\n * // Example of following up with another question\n * const res2 = await chain.call({ input: \"What's my name?\" });\n * console.log({ res2 });\n * ```\n */\nclass BufferWindowMemory extends _chat_memory_js__WEBPACK_IMPORTED_MODULE_1__.BaseChatMemory {\n    constructor(fields) {\n        super({\n            returnMessages: fields?.returnMessages ?? false,\n            chatHistory: fields?.chatHistory,\n            inputKey: fields?.inputKey,\n            outputKey: fields?.outputKey,\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5\n        });\n        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n        this.k = fields?.k ?? this.k;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Method to load the memory variables. Retrieves the chat messages from\n     * the history, slices the last 'k' messages, and stores them in the\n     * memory under the memoryKey. If the returnMessages property is set to\n     * true, the method returns the messages as they are. Otherwise, it\n     * returns a string representation of the messages.\n     * @param _values InputValues object.\n     * @returns Promise that resolves to a MemoryVariables object.\n     */\n    async loadMemoryVariables(_values) {\n        const messages = await this.chatHistory.getMessages();\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: messages.slice(-this.k * 2),\n            };\n            return result;\n        }\n        const result = {\n            [this.memoryKey]: (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix),\n        };\n        return result;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2J1ZmZlcl93aW5kb3dfbWVtb3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyRDtBQUNUO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0JBQWtCO0FBQzdDO0FBQ0Esc0NBQXNDLGlDQUFpQztBQUN2RSxJQUFJO0FBQ0o7QUFDQTtBQUNBLG1DQUFtQyx1QkFBdUI7QUFDMUQsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBLG1DQUFtQywwQkFBMEI7QUFDN0QsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNPLGlDQUFpQywyREFBYztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHlFQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L21lbW9yeS9idWZmZXJfd2luZG93X21lbW9yeS5qcz8yMWZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEJ1ZmZlclN0cmluZyB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvbWVzc2FnZXNcIjtcbmltcG9ydCB7IEJhc2VDaGF0TWVtb3J5IH0gZnJvbSBcIi4vY2hhdF9tZW1vcnkuanNcIjtcbi8qKlxuICogQ2xhc3MgZm9yIG1hbmFnaW5nIGFuZCBzdG9yaW5nIHByZXZpb3VzIGNoYXQgbWVzc2FnZXMuIEl0IGV4dGVuZHMgdGhlXG4gKiBCYXNlQ2hhdE1lbW9yeSBjbGFzcyBhbmQgaW1wbGVtZW50cyB0aGUgQnVmZmVyV2luZG93TWVtb3J5SW5wdXRcbiAqIGludGVyZmFjZS4gVGhpcyBjbGFzcyBpcyBzdGF0ZWZ1bCBhbmQgc3RvcmVzIG1lc3NhZ2VzIGluIGEgYnVmZmVyLiBXaGVuXG4gKiBjYWxsZWQgaW4gYSBjaGFpbiwgaXQgcmV0dXJucyBhbGwgb2YgdGhlIG1lc3NhZ2VzIGl0IGhhcyBzdG9yZWQuXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgcHJvbXB0ID1cbiAqICAgUHJvbXB0VGVtcGxhdGUuZnJvbVRlbXBsYXRlKGBUaGUgZm9sbG93aW5nIGlzIGEgZnJpZW5kbHkgY29udmVyc2F0aW9uIGJldHdlZW4gYSBodW1hbiBhbmQgYW4gQUkuIFRoZSBBSSBpcyB0YWxrYXRpdmUgYW5kIHByb3ZpZGVzIGxvdHMgb2Ygc3BlY2lmaWMgZGV0YWlscyBmcm9tIGl0cyBjb250ZXh0LiBJZiB0aGUgQUkgZG9lcyBub3Qga25vdyB0aGUgYW5zd2VyIHRvIGEgcXVlc3Rpb24sIGl0IHRydXRoZnVsbHkgc2F5cyBpdCBkb2VzIG5vdCBrbm93LlxuICogQ3VycmVudCBjb252ZXJzYXRpb246XG4gKiB7Y2hhdF9oaXN0b3J5fVxuICogSHVtYW46IHtpbnB1dH1cbiAqIEFJOmApO1xuICpcbiAqIGNvbnN0IGNoYWluID0gbmV3IExMTUNoYWluKHtcbiAqICAgbGxtOiBuZXcgQ2hhdE9wZW5BSSh7IHRlbXBlcmF0dXJlOiAwLjkgfSksXG4gKiAgIHByb21wdCxcbiAqICAgbWVtb3J5OiBuZXcgQnVmZmVyV2luZG93TWVtb3J5KHsgbWVtb3J5S2V5OiBcImNoYXRfaGlzdG9yeVwiLCBrOiAxIH0pLFxuICogfSk7XG4gKlxuICogLy8gRXhhbXBsZSBvZiBpbml0aWF0aW5nIGEgY29udmVyc2F0aW9uIHdpdGggdGhlIEFJXG4gKiBjb25zdCByZXMxID0gYXdhaXQgY2hhaW4uY2FsbCh7IGlucHV0OiBcIkhpISBJJ20gSmltLlwiIH0pO1xuICogY29uc29sZS5sb2coeyByZXMxIH0pO1xuICpcbiAqIC8vIEV4YW1wbGUgb2YgZm9sbG93aW5nIHVwIHdpdGggYW5vdGhlciBxdWVzdGlvblxuICogY29uc3QgcmVzMiA9IGF3YWl0IGNoYWluLmNhbGwoeyBpbnB1dDogXCJXaGF0J3MgbXkgbmFtZT9cIiB9KTtcbiAqIGNvbnNvbGUubG9nKHsgcmVzMiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyV2luZG93TWVtb3J5IGV4dGVuZHMgQmFzZUNoYXRNZW1vcnkge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICByZXR1cm5NZXNzYWdlczogZmllbGRzPy5yZXR1cm5NZXNzYWdlcyA/PyBmYWxzZSxcbiAgICAgICAgICAgIGNoYXRIaXN0b3J5OiBmaWVsZHM/LmNoYXRIaXN0b3J5LFxuICAgICAgICAgICAgaW5wdXRLZXk6IGZpZWxkcz8uaW5wdXRLZXksXG4gICAgICAgICAgICBvdXRwdXRLZXk6IGZpZWxkcz8ub3V0cHV0S2V5LFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaHVtYW5QcmVmaXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiSHVtYW5cIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYWlQcmVmaXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiQUlcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVtb3J5S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcImhpc3RvcnlcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwia1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogNVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5odW1hblByZWZpeCA9IGZpZWxkcz8uaHVtYW5QcmVmaXggPz8gdGhpcy5odW1hblByZWZpeDtcbiAgICAgICAgdGhpcy5haVByZWZpeCA9IGZpZWxkcz8uYWlQcmVmaXggPz8gdGhpcy5haVByZWZpeDtcbiAgICAgICAgdGhpcy5tZW1vcnlLZXkgPSBmaWVsZHM/Lm1lbW9yeUtleSA/PyB0aGlzLm1lbW9yeUtleTtcbiAgICAgICAgdGhpcy5rID0gZmllbGRzPy5rID8/IHRoaXMuaztcbiAgICB9XG4gICAgZ2V0IG1lbW9yeUtleXMoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5tZW1vcnlLZXldO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gbG9hZCB0aGUgbWVtb3J5IHZhcmlhYmxlcy4gUmV0cmlldmVzIHRoZSBjaGF0IG1lc3NhZ2VzIGZyb21cbiAgICAgKiB0aGUgaGlzdG9yeSwgc2xpY2VzIHRoZSBsYXN0ICdrJyBtZXNzYWdlcywgYW5kIHN0b3JlcyB0aGVtIGluIHRoZVxuICAgICAqIG1lbW9yeSB1bmRlciB0aGUgbWVtb3J5S2V5LiBJZiB0aGUgcmV0dXJuTWVzc2FnZXMgcHJvcGVydHkgaXMgc2V0IHRvXG4gICAgICogdHJ1ZSwgdGhlIG1ldGhvZCByZXR1cm5zIHRoZSBtZXNzYWdlcyBhcyB0aGV5IGFyZS4gT3RoZXJ3aXNlLCBpdFxuICAgICAqIHJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1lc3NhZ2VzLlxuICAgICAqIEBwYXJhbSBfdmFsdWVzIElucHV0VmFsdWVzIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBNZW1vcnlWYXJpYWJsZXMgb2JqZWN0LlxuICAgICAqL1xuICAgIGFzeW5jIGxvYWRNZW1vcnlWYXJpYWJsZXMoX3ZhbHVlcykge1xuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IHRoaXMuY2hhdEhpc3RvcnkuZ2V0TWVzc2FnZXMoKTtcbiAgICAgICAgaWYgKHRoaXMucmV0dXJuTWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICBbdGhpcy5tZW1vcnlLZXldOiBtZXNzYWdlcy5zbGljZSgtdGhpcy5rICogMiksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBbdGhpcy5tZW1vcnlLZXldOiBnZXRCdWZmZXJTdHJpbmcobWVzc2FnZXMuc2xpY2UoLXRoaXMuayAqIDIpLCB0aGlzLmh1bWFuUHJlZml4LCB0aGlzLmFpUHJlZml4KSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/buffer_window_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/chat_memory.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/dist/memory/chat_memory.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatMemory: () => (/* binding */ BaseChatMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/memory */ \"(rsc)/./node_modules/@langchain/core/memory.js\");\n/* harmony import */ var _stores_message_in_memory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stores/message/in_memory.js */ \"(rsc)/./node_modules/langchain/dist/stores/message/in_memory.js\");\n\n\n/**\n * Abstract class that provides a base for implementing different types of\n * memory systems. It is designed to maintain the state of an application,\n * specifically the history of a conversation. This class is typically\n * extended by other classes to create specific types of memory systems.\n */\nclass BaseChatMemory extends _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.BaseMemory {\n    constructor(fields) {\n        super();\n        Object.defineProperty(this, \"chatHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chatHistory = fields?.chatHistory ?? new _stores_message_in_memory_js__WEBPACK_IMPORTED_MODULE_1__.ChatMessageHistory();\n        this.returnMessages = fields?.returnMessages ?? this.returnMessages;\n        this.inputKey = fields?.inputKey ?? this.inputKey;\n        this.outputKey = fields?.outputKey ?? this.outputKey;\n    }\n    /**\n     * Method to add user and AI messages to the chat history in sequence.\n     * @param inputValues The input values from the user.\n     * @param outputValues The output values from the AI.\n     * @returns Promise that resolves when the context has been saved.\n     */\n    async saveContext(inputValues, outputValues) {\n        // this is purposefully done in sequence so they're saved in order\n        await this.chatHistory.addUserMessage((0,_langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.getInputValue)(inputValues, this.inputKey));\n        await this.chatHistory.addAIChatMessage((0,_langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.getOutputValue)(outputValues, this.outputKey));\n    }\n    /**\n     * Method to clear the chat history.\n     * @returns Promise that resolves when the chat history has been cleared.\n     */\n    async clear() {\n        await this.chatHistory.clear();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2NoYXRfbWVtb3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRjtBQUNoQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsOERBQVU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsc0RBQXNELDRFQUFrQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMscUVBQWE7QUFDM0QsZ0RBQWdELHNFQUFjO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9tZW1vcnkvY2hhdF9tZW1vcnkuanM/ZTJiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTWVtb3J5LCBnZXRJbnB1dFZhbHVlLCBnZXRPdXRwdXRWYWx1ZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL21lbW9yeVwiO1xuaW1wb3J0IHsgQ2hhdE1lc3NhZ2VIaXN0b3J5IH0gZnJvbSBcIi4uL3N0b3Jlcy9tZXNzYWdlL2luX21lbW9yeS5qc1wiO1xuLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyB0aGF0IHByb3ZpZGVzIGEgYmFzZSBmb3IgaW1wbGVtZW50aW5nIGRpZmZlcmVudCB0eXBlcyBvZlxuICogbWVtb3J5IHN5c3RlbXMuIEl0IGlzIGRlc2lnbmVkIHRvIG1haW50YWluIHRoZSBzdGF0ZSBvZiBhbiBhcHBsaWNhdGlvbixcbiAqIHNwZWNpZmljYWxseSB0aGUgaGlzdG9yeSBvZiBhIGNvbnZlcnNhdGlvbi4gVGhpcyBjbGFzcyBpcyB0eXBpY2FsbHlcbiAqIGV4dGVuZGVkIGJ5IG90aGVyIGNsYXNzZXMgdG8gY3JlYXRlIHNwZWNpZmljIHR5cGVzIG9mIG1lbW9yeSBzeXN0ZW1zLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZUNoYXRNZW1vcnkgZXh0ZW5kcyBCYXNlTWVtb3J5IHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2hhdEhpc3RvcnlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmV0dXJuTWVzc2FnZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbnB1dEtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJvdXRwdXRLZXlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGF0SGlzdG9yeSA9IGZpZWxkcz8uY2hhdEhpc3RvcnkgPz8gbmV3IENoYXRNZXNzYWdlSGlzdG9yeSgpO1xuICAgICAgICB0aGlzLnJldHVybk1lc3NhZ2VzID0gZmllbGRzPy5yZXR1cm5NZXNzYWdlcyA/PyB0aGlzLnJldHVybk1lc3NhZ2VzO1xuICAgICAgICB0aGlzLmlucHV0S2V5ID0gZmllbGRzPy5pbnB1dEtleSA/PyB0aGlzLmlucHV0S2V5O1xuICAgICAgICB0aGlzLm91dHB1dEtleSA9IGZpZWxkcz8ub3V0cHV0S2V5ID8/IHRoaXMub3V0cHV0S2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gYWRkIHVzZXIgYW5kIEFJIG1lc3NhZ2VzIHRvIHRoZSBjaGF0IGhpc3RvcnkgaW4gc2VxdWVuY2UuXG4gICAgICogQHBhcmFtIGlucHV0VmFsdWVzIFRoZSBpbnB1dCB2YWx1ZXMgZnJvbSB0aGUgdXNlci5cbiAgICAgKiBAcGFyYW0gb3V0cHV0VmFsdWVzIFRoZSBvdXRwdXQgdmFsdWVzIGZyb20gdGhlIEFJLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjb250ZXh0IGhhcyBiZWVuIHNhdmVkLlxuICAgICAqL1xuICAgIGFzeW5jIHNhdmVDb250ZXh0KGlucHV0VmFsdWVzLCBvdXRwdXRWYWx1ZXMpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBwdXJwb3NlZnVsbHkgZG9uZSBpbiBzZXF1ZW5jZSBzbyB0aGV5J3JlIHNhdmVkIGluIG9yZGVyXG4gICAgICAgIGF3YWl0IHRoaXMuY2hhdEhpc3RvcnkuYWRkVXNlck1lc3NhZ2UoZ2V0SW5wdXRWYWx1ZShpbnB1dFZhbHVlcywgdGhpcy5pbnB1dEtleSkpO1xuICAgICAgICBhd2FpdCB0aGlzLmNoYXRIaXN0b3J5LmFkZEFJQ2hhdE1lc3NhZ2UoZ2V0T3V0cHV0VmFsdWUob3V0cHV0VmFsdWVzLCB0aGlzLm91dHB1dEtleSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gY2xlYXIgdGhlIGNoYXQgaGlzdG9yeS5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY2hhdCBoaXN0b3J5IGhhcyBiZWVuIGNsZWFyZWQuXG4gICAgICovXG4gICAgYXN5bmMgY2xlYXIoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY2hhdEhpc3RvcnkuY2xlYXIoKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/combined_memory.js":
/*!***************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/combined_memory.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CombinedMemory: () => (/* binding */ CombinedMemory)\n/* harmony export */ });\n/* harmony import */ var _chat_memory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\");\n\n/**\n * Class that manages and manipulates previous chat messages. It extends\n * from the BaseChatMemory class and implements the CombinedMemoryInput\n * interface.\n */\nclass CombinedMemory extends _chat_memory_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatMemory {\n    constructor(fields) {\n        super({\n            chatHistory: fields?.chatHistory,\n            returnMessages: fields?.returnMessages ?? false,\n            inputKey: fields?.inputKey,\n            outputKey: fields?.outputKey,\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"memories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.memories = fields?.memories ?? this.memories;\n        this.humanPrefix = fields?.humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = fields?.aiPrefix ?? this.aiPrefix;\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n        this.checkRepeatedMemoryVariable();\n        this.checkInputKey();\n    }\n    /**\n     * Checks for repeated memory variables across all memory objects. Throws\n     * an error if any are found.\n     */\n    checkRepeatedMemoryVariable() {\n        const allVariables = [];\n        for (const memory of this.memories) {\n            const overlap = allVariables.filter((x) => memory.memoryKeys.includes(x));\n            if (overlap.length > 0) {\n                throw new Error(`The same variables ${[\n                    ...overlap,\n                ]} are found in multiple memory objects, which is not allowed by CombinedMemory.`);\n            }\n            allVariables.push(...memory.memoryKeys);\n        }\n    }\n    /**\n     * Checks if input keys are set for all memory objects. Logs a warning if\n     * any are missing.\n     */\n    checkInputKey() {\n        for (const memory of this.memories) {\n            if (memory.chatHistory !== undefined &&\n                memory.inputKey === undefined) {\n                console.warn(`When using CombinedMemory, input keys should be set so the input is known. Was not set on ${memory}.`);\n            }\n        }\n    }\n    /**\n     * Loads memory variables from all memory objects.\n     * @param inputValues Input values to load memory variables from.\n     * @returns Promise that resolves with an object containing the loaded memory variables.\n     */\n    async loadMemoryVariables(inputValues) {\n        let memoryData = {};\n        for (const memory of this.memories) {\n            const data = await memory.loadMemoryVariables(inputValues);\n            memoryData = {\n                ...memoryData,\n                ...data,\n            };\n        }\n        return memoryData;\n    }\n    /**\n     * Saves the context to all memory objects.\n     * @param inputValues Input values to save.\n     * @param outputValues Output values to save.\n     * @returns Promise that resolves when the context has been saved to all memory objects.\n     */\n    async saveContext(inputValues, outputValues) {\n        for (const memory of this.memories) {\n            await memory.saveContext(inputValues, outputValues);\n        }\n    }\n    /**\n     * Clears all memory objects.\n     * @returns Promise that resolves when all memory objects have been cleared.\n     */\n    async clear() {\n        for (const memory of this.memories) {\n            if (typeof memory.clear === \"function\") {\n                await memory.clear();\n            }\n        }\n    }\n    get memoryKeys() {\n        const memoryKeys = [];\n        for (const memory of this.memories) {\n            memoryKeys.push(...memory.memoryKeys);\n        }\n        return memoryKeys;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2NvbWJpbmVkX21lbW9yeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sNkJBQTZCLDJEQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBIQUEwSCxPQUFPO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L21lbW9yeS9jb21iaW5lZF9tZW1vcnkuanM/ZmYzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ2hhdE1lbW9yeSB9IGZyb20gXCIuL2NoYXRfbWVtb3J5LmpzXCI7XG4vKipcbiAqIENsYXNzIHRoYXQgbWFuYWdlcyBhbmQgbWFuaXB1bGF0ZXMgcHJldmlvdXMgY2hhdCBtZXNzYWdlcy4gSXQgZXh0ZW5kc1xuICogZnJvbSB0aGUgQmFzZUNoYXRNZW1vcnkgY2xhc3MgYW5kIGltcGxlbWVudHMgdGhlIENvbWJpbmVkTWVtb3J5SW5wdXRcbiAqIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbWJpbmVkTWVtb3J5IGV4dGVuZHMgQmFzZUNoYXRNZW1vcnkge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBjaGF0SGlzdG9yeTogZmllbGRzPy5jaGF0SGlzdG9yeSxcbiAgICAgICAgICAgIHJldHVybk1lc3NhZ2VzOiBmaWVsZHM/LnJldHVybk1lc3NhZ2VzID8/IGZhbHNlLFxuICAgICAgICAgICAgaW5wdXRLZXk6IGZpZWxkcz8uaW5wdXRLZXksXG4gICAgICAgICAgICBvdXRwdXRLZXk6IGZpZWxkcz8ub3V0cHV0S2V5LFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaHVtYW5QcmVmaXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiSHVtYW5cIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYWlQcmVmaXhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiQUlcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVtb3J5S2V5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcImhpc3RvcnlcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVtb3JpZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1lbW9yaWVzID0gZmllbGRzPy5tZW1vcmllcyA/PyB0aGlzLm1lbW9yaWVzO1xuICAgICAgICB0aGlzLmh1bWFuUHJlZml4ID0gZmllbGRzPy5odW1hblByZWZpeCA/PyB0aGlzLmh1bWFuUHJlZml4O1xuICAgICAgICB0aGlzLmFpUHJlZml4ID0gZmllbGRzPy5haVByZWZpeCA/PyB0aGlzLmFpUHJlZml4O1xuICAgICAgICB0aGlzLm1lbW9yeUtleSA9IGZpZWxkcz8ubWVtb3J5S2V5ID8/IHRoaXMubWVtb3J5S2V5O1xuICAgICAgICB0aGlzLmNoZWNrUmVwZWF0ZWRNZW1vcnlWYXJpYWJsZSgpO1xuICAgICAgICB0aGlzLmNoZWNrSW5wdXRLZXkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGZvciByZXBlYXRlZCBtZW1vcnkgdmFyaWFibGVzIGFjcm9zcyBhbGwgbWVtb3J5IG9iamVjdHMuIFRocm93c1xuICAgICAqIGFuIGVycm9yIGlmIGFueSBhcmUgZm91bmQuXG4gICAgICovXG4gICAgY2hlY2tSZXBlYXRlZE1lbW9yeVZhcmlhYmxlKCkge1xuICAgICAgICBjb25zdCBhbGxWYXJpYWJsZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBtZW1vcnkgb2YgdGhpcy5tZW1vcmllcykge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxhcCA9IGFsbFZhcmlhYmxlcy5maWx0ZXIoKHgpID0+IG1lbW9yeS5tZW1vcnlLZXlzLmluY2x1ZGVzKHgpKTtcbiAgICAgICAgICAgIGlmIChvdmVybGFwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBzYW1lIHZhcmlhYmxlcyAke1tcbiAgICAgICAgICAgICAgICAgICAgLi4ub3ZlcmxhcCxcbiAgICAgICAgICAgICAgICBdfSBhcmUgZm91bmQgaW4gbXVsdGlwbGUgbWVtb3J5IG9iamVjdHMsIHdoaWNoIGlzIG5vdCBhbGxvd2VkIGJ5IENvbWJpbmVkTWVtb3J5LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxsVmFyaWFibGVzLnB1c2goLi4ubWVtb3J5Lm1lbW9yeUtleXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBpbnB1dCBrZXlzIGFyZSBzZXQgZm9yIGFsbCBtZW1vcnkgb2JqZWN0cy4gTG9ncyBhIHdhcm5pbmcgaWZcbiAgICAgKiBhbnkgYXJlIG1pc3NpbmcuXG4gICAgICovXG4gICAgY2hlY2tJbnB1dEtleSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBtZW1vcnkgb2YgdGhpcy5tZW1vcmllcykge1xuICAgICAgICAgICAgaWYgKG1lbW9yeS5jaGF0SGlzdG9yeSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgbWVtb3J5LmlucHV0S2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFdoZW4gdXNpbmcgQ29tYmluZWRNZW1vcnksIGlucHV0IGtleXMgc2hvdWxkIGJlIHNldCBzbyB0aGUgaW5wdXQgaXMga25vd24uIFdhcyBub3Qgc2V0IG9uICR7bWVtb3J5fS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyBtZW1vcnkgdmFyaWFibGVzIGZyb20gYWxsIG1lbW9yeSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSBpbnB1dFZhbHVlcyBJbnB1dCB2YWx1ZXMgdG8gbG9hZCBtZW1vcnkgdmFyaWFibGVzIGZyb20uXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGxvYWRlZCBtZW1vcnkgdmFyaWFibGVzLlxuICAgICAqL1xuICAgIGFzeW5jIGxvYWRNZW1vcnlWYXJpYWJsZXMoaW5wdXRWYWx1ZXMpIHtcbiAgICAgICAgbGV0IG1lbW9yeURhdGEgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBtZW1vcnkgb2YgdGhpcy5tZW1vcmllcykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IG1lbW9yeS5sb2FkTWVtb3J5VmFyaWFibGVzKGlucHV0VmFsdWVzKTtcbiAgICAgICAgICAgIG1lbW9yeURhdGEgPSB7XG4gICAgICAgICAgICAgICAgLi4ubWVtb3J5RGF0YSxcbiAgICAgICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtb3J5RGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2F2ZXMgdGhlIGNvbnRleHQgdG8gYWxsIG1lbW9yeSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSBpbnB1dFZhbHVlcyBJbnB1dCB2YWx1ZXMgdG8gc2F2ZS5cbiAgICAgKiBAcGFyYW0gb3V0cHV0VmFsdWVzIE91dHB1dCB2YWx1ZXMgdG8gc2F2ZS5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29udGV4dCBoYXMgYmVlbiBzYXZlZCB0byBhbGwgbWVtb3J5IG9iamVjdHMuXG4gICAgICovXG4gICAgYXN5bmMgc2F2ZUNvbnRleHQoaW5wdXRWYWx1ZXMsIG91dHB1dFZhbHVlcykge1xuICAgICAgICBmb3IgKGNvbnN0IG1lbW9yeSBvZiB0aGlzLm1lbW9yaWVzKSB7XG4gICAgICAgICAgICBhd2FpdCBtZW1vcnkuc2F2ZUNvbnRleHQoaW5wdXRWYWx1ZXMsIG91dHB1dFZhbHVlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBtZW1vcnkgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhbGwgbWVtb3J5IG9iamVjdHMgaGF2ZSBiZWVuIGNsZWFyZWQuXG4gICAgICovXG4gICAgYXN5bmMgY2xlYXIoKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVtb3J5IG9mIHRoaXMubWVtb3JpZXMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb3J5LmNsZWFyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBtZW1vcnkuY2xlYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgbWVtb3J5S2V5cygpIHtcbiAgICAgICAgY29uc3QgbWVtb3J5S2V5cyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG1lbW9yeSBvZiB0aGlzLm1lbW9yaWVzKSB7XG4gICAgICAgICAgICBtZW1vcnlLZXlzLnB1c2goLi4ubWVtb3J5Lm1lbW9yeUtleXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZW1vcnlLZXlzO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/combined_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/entity_memory.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/entity_memory.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityMemory: () => (/* binding */ EntityMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/memory */ \"(rsc)/./node_modules/@langchain/core/memory.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _stores_entity_in_memory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stores/entity/in_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/stores/entity/in_memory.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/langchain/dist/memory/prompt.js\");\n/* harmony import */ var _chat_memory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chat_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\");\n\n\n\n\n\n\n// Entity extractor & summarizer to memory.\n/**\n * Class for managing entity extraction and summarization to memory in\n * chatbot applications. Extends the BaseChatMemory class and implements\n * the EntityMemoryInput interface.\n * @example\n * ```typescript\n * const memory = new EntityMemory({\n *   llm: new ChatOpenAI({ temperature: 0 }),\n *   chatHistoryKey: \"history\",\n *   entitiesKey: \"entities\",\n * });\n * const model = new ChatOpenAI({ temperature: 0.9 });\n * const chain = new LLMChain({\n *   llm: model,\n *   prompt: ENTITY_MEMORY_CONVERSATION_TEMPLATE,\n *   memory,\n * });\n *\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({\n *   res1,\n *   memory: await memory.loadMemoryVariables({ input: \"Who is Jim?\" }),\n * });\n *\n * const res2 = await chain.call({\n *   input: \"I work in construction. What about you?\",\n * });\n * console.log({\n *   res2,\n *   memory: await memory.loadMemoryVariables({ input: \"Who is Jim?\" }),\n * });\n *\n * ```\n */\nclass EntityMemory extends _chat_memory_js__WEBPACK_IMPORTED_MODULE_5__.BaseChatMemory {\n    constructor(fields) {\n        super({\n            chatHistory: fields.chatHistory,\n            returnMessages: fields.returnMessages ?? false,\n            inputKey: fields.inputKey,\n            outputKey: fields.outputKey,\n        });\n        Object.defineProperty(this, \"entityExtractionChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entitySummarizationChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entityStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entityCache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        Object.defineProperty(this, \"chatHistoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"entitiesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"entities\"\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llm = fields.llm;\n        this.humanPrefix = fields.humanPrefix;\n        this.aiPrefix = fields.aiPrefix;\n        this.chatHistoryKey = fields.chatHistoryKey ?? this.chatHistoryKey;\n        this.entitiesKey = fields.entitiesKey ?? this.entitiesKey;\n        this.entityExtractionChain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_3__.LLMChain({\n            llm: this.llm,\n            prompt: fields.entityExtractionPrompt ?? _prompt_js__WEBPACK_IMPORTED_MODULE_4__.ENTITY_EXTRACTION_PROMPT,\n        });\n        this.entitySummarizationChain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_3__.LLMChain({\n            llm: this.llm,\n            prompt: fields.entitySummarizationPrompt ?? _prompt_js__WEBPACK_IMPORTED_MODULE_4__.ENTITY_SUMMARIZATION_PROMPT,\n        });\n        this.entityStore = fields.entityStore ?? new _stores_entity_in_memory_js__WEBPACK_IMPORTED_MODULE_2__.InMemoryEntityStore();\n        this.entityCache = fields.entityCache ?? this.entityCache;\n        this.k = fields.k ?? this.k;\n    }\n    get memoryKeys() {\n        return [this.chatHistoryKey];\n    }\n    // Will always return list of memory variables.\n    get memoryVariables() {\n        return [this.entitiesKey, this.chatHistoryKey];\n    }\n    // Return history buffer.\n    /**\n     * Method to load memory variables and perform entity extraction.\n     * @param inputs Input values for the method.\n     * @returns Promise resolving to an object containing memory variables.\n     */\n    async loadMemoryVariables(inputs) {\n        const promptInputKey = this.inputKey ?? (0,_langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.getPromptInputKey)(inputs, this.memoryVariables);\n        const messages = await this.chatHistory.getMessages();\n        const serializedMessages = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.getBufferString)(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n        const output = await this.entityExtractionChain.predict({\n            history: serializedMessages,\n            input: inputs[promptInputKey],\n        });\n        const entities = output.trim() === \"NONE\" ? [] : output.split(\",\").map((w) => w.trim());\n        const entitySummaries = {};\n        for (const entity of entities) {\n            entitySummaries[entity] = await this.entityStore.get(entity, \"No current information known.\");\n        }\n        this.entityCache = [...entities];\n        const buffer = this.returnMessages\n            ? messages.slice(-this.k * 2)\n            : serializedMessages;\n        return {\n            [this.chatHistoryKey]: buffer,\n            [this.entitiesKey]: entitySummaries,\n        };\n    }\n    // Save context from this conversation to buffer.\n    /**\n     * Method to save the context from a conversation to a buffer and perform\n     * entity summarization.\n     * @param inputs Input values for the method.\n     * @param outputs Output values from the method.\n     * @returns Promise resolving to void.\n     */\n    async saveContext(inputs, outputs) {\n        await super.saveContext(inputs, outputs);\n        const promptInputKey = this.inputKey ?? (0,_langchain_core_memory__WEBPACK_IMPORTED_MODULE_0__.getPromptInputKey)(inputs, this.memoryVariables);\n        const messages = await this.chatHistory.getMessages();\n        const serializedMessages = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.getBufferString)(messages.slice(-this.k * 2), this.humanPrefix, this.aiPrefix);\n        const inputData = inputs[promptInputKey];\n        for (const entity of this.entityCache) {\n            const existingSummary = await this.entityStore.get(entity, \"No current information known.\");\n            const output = await this.entitySummarizationChain.predict({\n                summary: existingSummary,\n                entity,\n                history: serializedMessages,\n                input: inputData,\n            });\n            if (output.trim() !== \"UNCHANGED\") {\n                await this.entityStore.set(entity, output.trim());\n            }\n        }\n    }\n    // Clear memory contents.\n    /**\n     * Method to clear the memory contents.\n     * @returns Promise resolving to void.\n     */\n    async clear() {\n        await super.clear();\n        await this.entityStore.clear();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/entity_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/langchain/dist/memory/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatMemory: () => (/* reexport safe */ _chat_memory_js__WEBPACK_IMPORTED_MODULE_4__.BaseChatMemory),\n/* harmony export */   BaseConversationSummaryMemory: () => (/* reexport safe */ _summary_js__WEBPACK_IMPORTED_MODULE_2__.BaseConversationSummaryMemory),\n/* harmony export */   BaseMemory: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMemory),\n/* harmony export */   BufferMemory: () => (/* reexport safe */ _buffer_memory_js__WEBPACK_IMPORTED_MODULE_0__.BufferMemory),\n/* harmony export */   BufferWindowMemory: () => (/* reexport safe */ _buffer_window_memory_js__WEBPACK_IMPORTED_MODULE_3__.BufferWindowMemory),\n/* harmony export */   ChatMessageHistory: () => (/* reexport safe */ _stores_message_in_memory_js__WEBPACK_IMPORTED_MODULE_5__.ChatMessageHistory),\n/* harmony export */   CombinedMemory: () => (/* reexport safe */ _combined_memory_js__WEBPACK_IMPORTED_MODULE_9__.CombinedMemory),\n/* harmony export */   ConversationSummaryBufferMemory: () => (/* reexport safe */ _summary_buffer_js__WEBPACK_IMPORTED_MODULE_10__.ConversationSummaryBufferMemory),\n/* harmony export */   ConversationSummaryMemory: () => (/* reexport safe */ _summary_js__WEBPACK_IMPORTED_MODULE_2__.ConversationSummaryMemory),\n/* harmony export */   ConversationTokenBufferMemory: () => (/* reexport safe */ _buffer_token_memory_js__WEBPACK_IMPORTED_MODULE_11__.ConversationTokenBufferMemory),\n/* harmony export */   ENTITY_MEMORY_CONVERSATION_TEMPLATE: () => (/* reexport safe */ _prompt_js__WEBPACK_IMPORTED_MODULE_8__.ENTITY_MEMORY_CONVERSATION_TEMPLATE),\n/* harmony export */   EntityMemory: () => (/* reexport safe */ _entity_memory_js__WEBPACK_IMPORTED_MODULE_7__.EntityMemory),\n/* harmony export */   VectorStoreRetrieverMemory: () => (/* reexport safe */ _vector_store_js__WEBPACK_IMPORTED_MODULE_6__.VectorStoreRetrieverMemory),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.getBufferString),\n/* harmony export */   getInputValue: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.getInputValue),\n/* harmony export */   getOutputValue: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.getOutputValue)\n/* harmony export */ });\n/* harmony import */ var _buffer_memory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/buffer_memory.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/memory/base.js\");\n/* harmony import */ var _summary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./summary.js */ \"(rsc)/./node_modules/langchain/dist/memory/summary.js\");\n/* harmony import */ var _buffer_window_memory_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./buffer_window_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/buffer_window_memory.js\");\n/* harmony import */ var _chat_memory_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chat_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\");\n/* harmony import */ var _stores_message_in_memory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../stores/message/in_memory.js */ \"(rsc)/./node_modules/langchain/dist/stores/message/in_memory.js\");\n/* harmony import */ var _vector_store_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vector_store.js */ \"(rsc)/./node_modules/langchain/dist/memory/vector_store.js\");\n/* harmony import */ var _entity_memory_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./entity_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/entity_memory.js\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/langchain/dist/memory/prompt.js\");\n/* harmony import */ var _combined_memory_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./combined_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/combined_memory.js\");\n/* harmony import */ var _summary_buffer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./summary_buffer.js */ \"(rsc)/./node_modules/langchain/dist/memory/summary_buffer.js\");\n/* harmony import */ var _buffer_token_memory_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./buffer_token_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/buffer_token_memory.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBa0Q7QUFDc0M7QUFDQztBQUN6QjtBQUNkO0FBQ2tCO0FBQ0o7QUFDZDtBQUNnQjtBQUNaO0FBQ2lCO0FBQ0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2luZGV4LmpzPzQwMTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQnVmZmVyTWVtb3J5IH0gZnJvbSBcIi4vYnVmZmVyX21lbW9yeS5qc1wiO1xuZXhwb3J0IHsgQmFzZU1lbW9yeSwgZ2V0SW5wdXRWYWx1ZSwgZ2V0T3V0cHV0VmFsdWUsIGdldEJ1ZmZlclN0cmluZywgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgeyBDb252ZXJzYXRpb25TdW1tYXJ5TWVtb3J5LCBCYXNlQ29udmVyc2F0aW9uU3VtbWFyeU1lbW9yeSwgfSBmcm9tIFwiLi9zdW1tYXJ5LmpzXCI7XG5leHBvcnQgeyBCdWZmZXJXaW5kb3dNZW1vcnksIH0gZnJvbSBcIi4vYnVmZmVyX3dpbmRvd19tZW1vcnkuanNcIjtcbmV4cG9ydCB7IEJhc2VDaGF0TWVtb3J5IH0gZnJvbSBcIi4vY2hhdF9tZW1vcnkuanNcIjtcbmV4cG9ydCB7IENoYXRNZXNzYWdlSGlzdG9yeSB9IGZyb20gXCIuLi9zdG9yZXMvbWVzc2FnZS9pbl9tZW1vcnkuanNcIjtcbmV4cG9ydCB7IFZlY3RvclN0b3JlUmV0cmlldmVyTWVtb3J5LCB9IGZyb20gXCIuL3ZlY3Rvcl9zdG9yZS5qc1wiO1xuZXhwb3J0IHsgRW50aXR5TWVtb3J5IH0gZnJvbSBcIi4vZW50aXR5X21lbW9yeS5qc1wiO1xuZXhwb3J0IHsgRU5USVRZX01FTU9SWV9DT05WRVJTQVRJT05fVEVNUExBVEUgfSBmcm9tIFwiLi9wcm9tcHQuanNcIjtcbmV4cG9ydCB7IENvbWJpbmVkTWVtb3J5IH0gZnJvbSBcIi4vY29tYmluZWRfbWVtb3J5LmpzXCI7XG5leHBvcnQgeyBDb252ZXJzYXRpb25TdW1tYXJ5QnVmZmVyTWVtb3J5LCB9IGZyb20gXCIuL3N1bW1hcnlfYnVmZmVyLmpzXCI7XG5leHBvcnQgeyBDb252ZXJzYXRpb25Ub2tlbkJ1ZmZlck1lbW9yeSwgfSBmcm9tIFwiLi9idWZmZXJfdG9rZW5fbWVtb3J5LmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/prompt.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/memory/prompt.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENTITY_EXTRACTION_PROMPT: () => (/* binding */ ENTITY_EXTRACTION_PROMPT),\n/* harmony export */   ENTITY_MEMORY_CONVERSATION_TEMPLATE: () => (/* binding */ ENTITY_MEMORY_CONVERSATION_TEMPLATE),\n/* harmony export */   ENTITY_SUMMARIZATION_PROMPT: () => (/* binding */ ENTITY_SUMMARIZATION_PROMPT),\n/* harmony export */   SUMMARY_PROMPT: () => (/* binding */ SUMMARY_PROMPT),\n/* harmony export */   _DEFAULT_ENTITY_EXTRACTION_TEMPLATE: () => (/* binding */ _DEFAULT_ENTITY_EXTRACTION_TEMPLATE),\n/* harmony export */   _DEFAULT_ENTITY_MEMORY_CONVERSATION_TEMPLATE: () => (/* binding */ _DEFAULT_ENTITY_MEMORY_CONVERSATION_TEMPLATE),\n/* harmony export */   _DEFAULT_ENTITY_SUMMARIZATION_TEMPLATE: () => (/* binding */ _DEFAULT_ENTITY_SUMMARIZATION_TEMPLATE)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ \"(rsc)/./node_modules/@langchain/core/prompts.js\");\n\nconst _DEFAULT_SUMMARIZER_TEMPLATE = `Progressively summarize the lines of conversation provided, adding onto the previous summary returning a new summary.\n\nEXAMPLE\nCurrent summary:\nThe human asks what the AI thinks of artificial intelligence. The AI thinks artificial intelligence is a force for good.\n\nNew lines of conversation:\nHuman: Why do you think artificial intelligence is a force for good?\nAI: Because artificial intelligence will help humans reach their full potential.\n\nNew summary:\nThe human asks what the AI thinks of artificial intelligence. The AI thinks artificial intelligence is a force for good because it will help humans reach their full potential.\nEND OF EXAMPLE\n\nCurrent summary:\n{summary}\n\nNew lines of conversation:\n{new_lines}\n\nNew summary:`;\n// eslint-disable-next-line spaced-comment\nconst SUMMARY_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"summary\", \"new_lines\"],\n    template: _DEFAULT_SUMMARIZER_TEMPLATE,\n});\nconst _DEFAULT_ENTITY_MEMORY_CONVERSATION_TEMPLATE = `You are an assistant to a human, powered by a large language model trained by OpenAI.\n\nYou are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.\n\nYou are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.\n\nOverall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.\n\nContext:\n{entities}\n\nCurrent conversation:\n{history}\nLast line:\nHuman: {input}\nYou:`;\nconst ENTITY_MEMORY_CONVERSATION_TEMPLATE = \n// eslint-disable-next-line spaced-comment\n/*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"entities\", \"history\", \"input\"],\n    template: _DEFAULT_ENTITY_MEMORY_CONVERSATION_TEMPLATE,\n});\nconst _DEFAULT_ENTITY_EXTRACTION_TEMPLATE = `You are an AI assistant reading the transcript of a conversation between an AI and a human. Extract all of the proper nouns from the last line of conversation. As a guideline, a proper noun is generally capitalized. You should definitely extract all names and places.\n\nThe conversation history is provided just in case of a coreference (e.g. \"What do you know about him\" where \"him\" is defined in a previous line) -- ignore items mentioned there that are not in the last line.\n\nReturn the output as a single comma-separated list, or NONE if there is nothing of note to return (e.g. the user is just issuing a greeting or having a simple conversation).\n\nEXAMPLE\nConversation history:\nPerson #1: my name is Jacob. how's it going today?\nAI: \"It's going great! How about you?\"\nPerson #1: good! busy working on Langchain. lots to do.\nAI: \"That sounds like a lot of work! What kind of things are you doing to make Langchain better?\"\nLast line:\nPerson #1: i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff.\nOutput: Jacob,Langchain\nEND OF EXAMPLE\n\nEXAMPLE\nConversation history:\nPerson #1: how's it going today?\nAI: \"It's going great! How about you?\"\nPerson #1: good! busy working on Langchain. lots to do.\nAI: \"That sounds like a lot of work! What kind of things are you doing to make Langchain better?\"\nLast line:\nPerson #1: i'm trying to improve Langchain's interfaces, the UX, its integrations with various products the user might want ... a lot of stuff. I'm working with Person #2.\nOutput: Langchain, Person #2\nEND OF EXAMPLE\n\nConversation history (for reference only):\n{history}\nLast line of conversation (for extraction):\nHuman: {input}\n\nOutput:`;\n// eslint-disable-next-line spaced-comment\nconst ENTITY_EXTRACTION_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"history\", \"input\"],\n    template: _DEFAULT_ENTITY_EXTRACTION_TEMPLATE,\n});\nconst _DEFAULT_ENTITY_SUMMARIZATION_TEMPLATE = `You are an AI assistant helping a human keep track of facts about relevant people, places, and concepts in their life. Update and add to the summary of the provided entity in the \"Entity\" section based on the last line of your conversation with the human. If you are writing the summary for the first time, return a single sentence.\nThe update should only include facts that are relayed in the last line of conversation about the provided entity, and should only contain facts about the provided entity.\n\nIf there is no new information about the provided entity or the information is not worth noting (not an important or relevant fact to remember long-term), output the exact string \"UNCHANGED\" below.\n\nFull conversation history (for context):\n{history}\n\nEntity to summarize:\n{entity}\n\nExisting summary of {entity}:\n{summary}\n\nLast line of conversation:\nHuman: {input}\nUpdated summary (or the exact string \"UNCHANGED\" if there is no new information about {entity} above):`;\n// eslint-disable-next-line spaced-comment\nconst ENTITY_SUMMARIZATION_PROMPT = /*#__PURE__*/ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({\n    inputVariables: [\"entity\", \"summary\", \"history\", \"input\"],\n    template: _DEFAULT_ENTITY_SUMMARIZATION_TEMPLATE,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/prompt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/stores/entity/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/stores/entity/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseEntityStore: () => (/* binding */ BaseEntityStore)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_load_serializable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/load/serializable */ \"(rsc)/./node_modules/@langchain/core/load/serializable.js\");\n\n/**\n * Base class for all entity stores. All entity stores should extend this\n * class.\n */\nclass BaseEntityStore extends _langchain_core_load_serializable__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L3N0b3Jlcy9lbnRpdHkvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDhCQUE4QiwyRUFBWTtBQUNqRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9tZW1vcnkvc3RvcmVzL2VudGl0eS9iYXNlLmpzP2U3M2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VyaWFsaXphYmxlIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9sb2FkL3NlcmlhbGl6YWJsZVwiO1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgZW50aXR5IHN0b3Jlcy4gQWxsIGVudGl0eSBzdG9yZXMgc2hvdWxkIGV4dGVuZCB0aGlzXG4gKiBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VFbnRpdHlTdG9yZSBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/stores/entity/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/stores/entity/in_memory.js":
/*!***********************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/stores/entity/in_memory.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryEntityStore: () => (/* binding */ InMemoryEntityStore)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/memory/stores/entity/base.js\");\n\n/**\n * An entity store that keeps data in memory. It extends from the\n * `BaseEntityStore` class and is used to store and manage entities.\n */\nclass InMemoryEntityStore extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseEntityStore {\n    constructor() {\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"stores\", \"entity\", \"in_memory\"]\n        });\n        Object.defineProperty(this, \"store\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.store = Object.create(null);\n    }\n    /**\n     * Retrieves the value associated with the given key from the store. If\n     * the key does not exist in the store, it returns the provided default\n     * value.\n     * @param key The key to retrieve the value for.\n     * @param defaultValue The default value to return if the key does not exist in the store.\n     * @returns The value associated with the key, or the default value if the key does not exist in the store.\n     */\n    async get(key, defaultValue) {\n        return key in this.store ? this.store[key] : defaultValue;\n    }\n    /**\n     * Sets the value associated with the given key in the store.\n     * @param key The key to set the value for.\n     * @param value The value to set.\n     */\n    async set(key, value) {\n        this.store[key] = value;\n    }\n    /**\n     * Removes the key and its associated value from the store.\n     * @param key The key to remove.\n     */\n    async delete(key) {\n        delete this.store[key];\n    }\n    /**\n     * Checks if a key exists in the store.\n     * @param key The key to check.\n     * @returns A boolean indicating whether the key exists in the store.\n     */\n    async exists(key) {\n        return key in this.store;\n    }\n    /**\n     * Removes all keys and their associated values from the store.\n     */\n    async clear() {\n        this.store = Object.create(null);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L3N0b3Jlcy9lbnRpdHkvaW5fbWVtb3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ08sa0NBQWtDLHFEQUFlO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L3N0b3Jlcy9lbnRpdHkvaW5fbWVtb3J5LmpzP2E5ZTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUVudGl0eVN0b3JlIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBBbiBlbnRpdHkgc3RvcmUgdGhhdCBrZWVwcyBkYXRhIGluIG1lbW9yeS4gSXQgZXh0ZW5kcyBmcm9tIHRoZVxuICogYEJhc2VFbnRpdHlTdG9yZWAgY2xhc3MgYW5kIGlzIHVzZWQgdG8gc3RvcmUgYW5kIG1hbmFnZSBlbnRpdGllcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEluTWVtb3J5RW50aXR5U3RvcmUgZXh0ZW5kcyBCYXNlRW50aXR5U3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpblwiLCBcInN0b3Jlc1wiLCBcImVudGl0eVwiLCBcImluX21lbW9yeVwiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3RvcmVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9yZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXkgZnJvbSB0aGUgc3RvcmUuIElmXG4gICAgICogdGhlIGtleSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgc3RvcmUsIGl0IHJldHVybnMgdGhlIHByb3ZpZGVkIGRlZmF1bHRcbiAgICAgKiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gcmV0cmlldmUgdGhlIHZhbHVlIGZvci5cbiAgICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlIHRvIHJldHVybiBpZiB0aGUga2V5IGRvZXMgbm90IGV4aXN0IGluIHRoZSBzdG9yZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXksIG9yIHRoZSBkZWZhdWx0IHZhbHVlIGlmIHRoZSBrZXkgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHN0b3JlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMuc3RvcmUgPyB0aGlzLnN0b3JlW2tleV0gOiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4ga2V5IGluIHRoZSBzdG9yZS5cbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gc2V0IHRoZSB2YWx1ZSBmb3IuXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICovXG4gICAgYXN5bmMgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdG9yZVtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGtleSBhbmQgaXRzIGFzc29jaWF0ZWQgdmFsdWUgZnJvbSB0aGUgc3RvcmUuXG4gICAgICogQHBhcmFtIGtleSBUaGUga2V5IHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICBhc3luYyBkZWxldGUoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnN0b3JlW2tleV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGtleSBleGlzdHMgaW4gdGhlIHN0b3JlLlxuICAgICAqIEBwYXJhbSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBrZXkgZXhpc3RzIGluIHRoZSBzdG9yZS5cbiAgICAgKi9cbiAgICBhc3luYyBleGlzdHMoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgaW4gdGhpcy5zdG9yZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5cyBhbmQgdGhlaXIgYXNzb2NpYXRlZCB2YWx1ZXMgZnJvbSB0aGUgc3RvcmUuXG4gICAgICovXG4gICAgYXN5bmMgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/stores/entity/in_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/summary.js":
/*!*******************************************************!*\
  !*** ./node_modules/langchain/dist/memory/summary.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConversationSummaryMemory: () => (/* binding */ BaseConversationSummaryMemory),\n/* harmony export */   ConversationSummaryMemory: () => (/* binding */ ConversationSummaryMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chains/llm_chain.js */ \"(rsc)/./node_modules/langchain/dist/chains/llm_chain.js\");\n/* harmony import */ var _prompt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompt.js */ \"(rsc)/./node_modules/langchain/dist/memory/prompt.js\");\n/* harmony import */ var _chat_memory_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chat_memory.js */ \"(rsc)/./node_modules/langchain/dist/memory/chat_memory.js\");\n\n\n\n\n/**\n * Abstract class that provides a structure for storing and managing the\n * memory of a conversation. It includes methods for predicting a new\n * summary for the conversation given the existing messages and summary.\n */\nclass BaseConversationSummaryMemory extends _chat_memory_js__WEBPACK_IMPORTED_MODULE_3__.BaseChatMemory {\n    constructor(fields) {\n        const { returnMessages, inputKey, outputKey, chatHistory, humanPrefix, aiPrefix, llm, prompt, summaryChatMessageClass, } = fields;\n        super({ returnMessages, inputKey, outputKey, chatHistory });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"history\"\n        });\n        Object.defineProperty(this, \"humanPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Human\"\n        });\n        Object.defineProperty(this, \"aiPrefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AI\"\n        });\n        Object.defineProperty(this, \"llm\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _prompt_js__WEBPACK_IMPORTED_MODULE_2__.SUMMARY_PROMPT\n        });\n        Object.defineProperty(this, \"summaryChatMessageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage\n        });\n        this.memoryKey = fields?.memoryKey ?? this.memoryKey;\n        this.humanPrefix = humanPrefix ?? this.humanPrefix;\n        this.aiPrefix = aiPrefix ?? this.aiPrefix;\n        this.llm = llm;\n        this.prompt = prompt ?? this.prompt;\n        this.summaryChatMessageClass =\n            summaryChatMessageClass ?? this.summaryChatMessageClass;\n    }\n    /**\n     * Predicts a new summary for the conversation given the existing messages\n     * and summary.\n     * @param messages Existing messages in the conversation.\n     * @param existingSummary Current summary of the conversation.\n     * @returns A promise that resolves to a new summary string.\n     */\n    async predictNewSummary(messages, existingSummary) {\n        const newLines = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(messages, this.humanPrefix, this.aiPrefix);\n        const chain = new _chains_llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({ llm: this.llm, prompt: this.prompt });\n        return await chain.predict({\n            summary: existingSummary,\n            new_lines: newLines,\n        });\n    }\n}\n/**\n * Class that provides a concrete implementation of the conversation\n * memory. It includes methods for loading memory variables, saving\n * context, and clearing the memory.\n * @example\n * ```typescript\n * const memory = new ConversationSummaryMemory({\n *   memoryKey: \"chat_history\",\n *   llm: new ChatOpenAI({ modelName: \"gpt-3.5-turbo\", temperature: 0 }),\n * });\n *\n * const model = new ChatOpenAI();\n * const prompt =\n *   PromptTemplate.fromTemplate(`The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n *\n * Current conversation:\n * {chat_history}\n * Human: {input}\n * AI:`);\n * const chain = new LLMChain({ llm: model, prompt, memory });\n *\n * const res1 = await chain.call({ input: \"Hi! I'm Jim.\" });\n * console.log({ res1, memory: await memory.loadMemoryVariables({}) });\n *\n * const res2 = await chain.call({ input: \"What's my name?\" });\n * console.log({ res2, memory: await memory.loadMemoryVariables({}) });\n *\n * ```\n */\nclass ConversationSummaryMemory extends BaseConversationSummaryMemory {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"buffer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Loads the memory variables for the conversation memory.\n     * @returns A promise that resolves to an object containing the memory variables.\n     */\n    async loadMemoryVariables(_) {\n        if (this.returnMessages) {\n            const result = {\n                [this.memoryKey]: [new this.summaryChatMessageClass(this.buffer)],\n            };\n            return result;\n        }\n        const result = { [this.memoryKey]: this.buffer };\n        return result;\n    }\n    /**\n     * Saves the context of the conversation memory.\n     * @param inputValues Input values for the conversation.\n     * @param outputValues Output values from the conversation.\n     * @returns A promise that resolves when the context has been saved.\n     */\n    async saveContext(inputValues, outputValues) {\n        await super.saveContext(inputValues, outputValues);\n        const messages = await this.chatHistory.getMessages();\n        this.buffer = await this.predictNewSummary(messages.slice(-2), this.buffer);\n    }\n    /**\n     * Clears the conversation memory.\n     * @returns A promise that resolves when the memory has been cleared.\n     */\n    async clear() {\n        await super.clear();\n        this.buffer = \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/summary.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/summary_buffer.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/summary_buffer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationSummaryBufferMemory: () => (/* binding */ ConversationSummaryBufferMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _summary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./summary.js */ \"(rsc)/./node_modules/langchain/dist/memory/summary.js\");\n\n\n/**\n * Class that extends BaseConversationSummaryMemory and implements\n * ConversationSummaryBufferMemoryInput. It manages the conversation\n * history in a LangChain application by maintaining a buffer of chat\n * messages and providing methods to load, save, prune, and clear the\n * memory.\n * @example\n * ```typescript\n * // Initialize the memory with a specific model and token limit\n * const memory = new ConversationSummaryBufferMemory({\n *   llm: new ChatOpenAI({ modelName: \"gpt-3.5-turbo-instruct\", temperature: 0 }),\n *   maxTokenLimit: 10,\n * });\n *\n * // Save conversation context to memory\n * await memory.saveContext({ input: \"hi\" }, { output: \"whats up\" });\n * await memory.saveContext({ input: \"not much you\" }, { output: \"not much\" });\n *\n * // Load the conversation history from memory\n * const history = await memory.loadMemoryVariables({});\n * console.log({ history });\n *\n * // Create a chat prompt using the conversation history\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   SystemMessagePromptTemplate.fromTemplate(\n *     \"The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\",\n *   ),\n *   new MessagesPlaceholder(\"history\"),\n *   HumanMessagePromptTemplate.fromTemplate(\"{input}\"),\n * ]);\n *\n * // Initialize the conversation chain with the model, memory, and prompt\n * const chain = new ConversationChain({\n *   llm: new ChatOpenAI({ temperature: 0.9, verbose: true }),\n *   memory: memory,\n *   prompt: chatPrompt,\n * });\n * ```\n */\nclass ConversationSummaryBufferMemory extends _summary_js__WEBPACK_IMPORTED_MODULE_1__.BaseConversationSummaryMemory {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"movingSummaryBuffer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"maxTokenLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 2000\n        });\n        this.maxTokenLimit = fields?.maxTokenLimit ?? this.maxTokenLimit;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Method that loads the chat messages from the memory and returns them as\n     * a string or as a list of messages, depending on the returnMessages\n     * property.\n     * @param _ InputValues object, not used in this method.\n     * @returns Promise that resolves with MemoryVariables object containing the loaded chat messages.\n     */\n    async loadMemoryVariables(_) {\n        let buffer = await this.chatHistory.getMessages();\n        if (this.movingSummaryBuffer) {\n            buffer = [\n                new this.summaryChatMessageClass(this.movingSummaryBuffer),\n                ...buffer,\n            ];\n        }\n        let finalBuffer;\n        if (this.returnMessages) {\n            finalBuffer = buffer;\n        }\n        else {\n            finalBuffer = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(buffer, this.humanPrefix, this.aiPrefix);\n        }\n        return { [this.memoryKey]: finalBuffer };\n    }\n    /**\n     * Method that saves the context of the conversation, including the input\n     * and output values, and prunes the memory if it exceeds the maximum\n     * token limit.\n     * @param inputValues InputValues object containing the input values of the conversation.\n     * @param outputValues OutputValues object containing the output values of the conversation.\n     * @returns Promise that resolves when the context is saved and the memory is pruned.\n     */\n    async saveContext(inputValues, outputValues) {\n        await super.saveContext(inputValues, outputValues);\n        await this.prune();\n    }\n    /**\n     * Method that prunes the memory if the total number of tokens in the\n     * buffer exceeds the maxTokenLimit. It removes messages from the\n     * beginning of the buffer until the total number of tokens is within the\n     * limit.\n     * @returns Promise that resolves when the memory is pruned.\n     */\n    async prune() {\n        // Prune buffer if it exceeds max token limit\n        let buffer = await this.chatHistory.getMessages();\n        if (this.movingSummaryBuffer) {\n            buffer = [\n                new this.summaryChatMessageClass(this.movingSummaryBuffer),\n                ...buffer,\n            ];\n        }\n        let currBufferLength = await this.llm.getNumTokens((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(buffer, this.humanPrefix, this.aiPrefix));\n        if (currBufferLength > this.maxTokenLimit) {\n            const prunedMemory = [];\n            while (currBufferLength > this.maxTokenLimit) {\n                const poppedMessage = buffer.shift();\n                if (poppedMessage) {\n                    prunedMemory.push(poppedMessage);\n                    currBufferLength = await this.llm.getNumTokens((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(buffer, this.humanPrefix, this.aiPrefix));\n                }\n            }\n            this.movingSummaryBuffer = await this.predictNewSummary(prunedMemory, this.movingSummaryBuffer);\n        }\n    }\n    /**\n     * Method that clears the memory and resets the movingSummaryBuffer.\n     * @returns Promise that resolves when the memory is cleared.\n     */\n    async clear() {\n        await super.clear();\n        this.movingSummaryBuffer = \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/summary_buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/vector_store.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/memory/vector_store.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VectorStoreRetrieverMemory: () => (/* binding */ VectorStoreRetrieverMemory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/documents */ \"(rsc)/./node_modules/@langchain/core/documents.js\");\n/* harmony import */ var _langchain_core_memory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/memory */ \"(rsc)/./node_modules/@langchain/core/memory.js\");\n/* harmony import */ var _util_document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/document.js */ \"(rsc)/./node_modules/langchain/dist/util/document.js\");\n\n\n\n/**\n * Class for managing long-term memory in Large Language Model (LLM)\n * applications. It provides a way to persist and retrieve relevant\n * documents from a vector store database, which can be useful for\n * maintaining conversation history or other types of memory in an LLM\n * application.\n * @example\n * ```typescript\n * const vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\n * const memory = new VectorStoreRetrieverMemory({\n *   vectorStoreRetriever: vectorStore.asRetriever(1),\n *   memoryKey: \"history\",\n * });\n *\n * // Saving context to memory\n * await memory.saveContext(\n *   { input: \"My favorite food is pizza\" },\n *   { output: \"thats good to know\" },\n * );\n * await memory.saveContext(\n *   { input: \"My favorite sport is soccer\" },\n *   { output: \"...\" },\n * );\n * await memory.saveContext({ input: \"I don't the Celtics\" }, { output: \"ok\" });\n *\n * // Loading memory variables\n * console.log(\n *   await memory.loadMemoryVariables({ prompt: \"what sport should i watch?\" }),\n * );\n * ```\n */\nclass VectorStoreRetrieverMemory extends _langchain_core_memory__WEBPACK_IMPORTED_MODULE_1__.BaseMemory {\n    constructor(fields) {\n        super();\n        Object.defineProperty(this, \"vectorStoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"memoryKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnDocs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStoreRetriever = fields.vectorStoreRetriever;\n        this.inputKey = fields.inputKey;\n        this.memoryKey = fields.memoryKey ?? \"memory\";\n        this.returnDocs = fields.returnDocs ?? false;\n        this.metadata = fields.metadata;\n    }\n    get memoryKeys() {\n        return [this.memoryKey];\n    }\n    /**\n     * Method to load memory variables. It uses the vectorStoreRetriever to\n     * get relevant documents based on the query obtained from the input\n     * values.\n     * @param values An InputValues object.\n     * @returns A Promise that resolves to a MemoryVariables object.\n     */\n    async loadMemoryVariables(values) {\n        const query = (0,_langchain_core_memory__WEBPACK_IMPORTED_MODULE_1__.getInputValue)(values, this.inputKey);\n        const results = await this.vectorStoreRetriever.getRelevantDocuments(query);\n        return {\n            [this.memoryKey]: this.returnDocs\n                ? results\n                : (0,_util_document_js__WEBPACK_IMPORTED_MODULE_2__.formatDocumentsAsString)(results),\n        };\n    }\n    /**\n     * Method to save context. It constructs a document from the input and\n     * output values (excluding the memory key) and adds it to the vector\n     * store database using the vectorStoreRetriever.\n     * @param inputValues An InputValues object.\n     * @param outputValues An OutputValues object.\n     * @returns A Promise that resolves to void.\n     */\n    async saveContext(inputValues, outputValues) {\n        const metadata = typeof this.metadata === \"function\"\n            ? this.metadata(inputValues, outputValues)\n            : this.metadata;\n        const text = Object.entries(inputValues)\n            .filter(([k]) => k !== this.memoryKey)\n            .concat(Object.entries(outputValues))\n            .map(([k, v]) => `${k}: ${v}`)\n            .join(\"\\n\");\n        await this.vectorStoreRetriever.addDocuments([\n            new _langchain_core_documents__WEBPACK_IMPORTED_MODULE_0__.Document({ pageContent: text, metadata }),\n        ]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L3ZlY3Rvcl9zdG9yZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXFEO0FBQ2U7QUFDTjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsT0FBTyxvQ0FBb0M7QUFDM0MsT0FBTyw4QkFBOEI7QUFDckM7QUFDQTtBQUNBLE9BQU8sc0NBQXNDO0FBQzdDLE9BQU8sZUFBZTtBQUN0QjtBQUNBLDhCQUE4Qiw4QkFBOEIsSUFBSSxjQUFjO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxzQ0FBc0M7QUFDOUU7QUFDQTtBQUNBO0FBQ08seUNBQXlDLDhEQUFVO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixxRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwRUFBdUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxFQUFFLElBQUksRUFBRTtBQUN4QztBQUNBO0FBQ0EsZ0JBQWdCLCtEQUFRLEdBQUcsNkJBQTZCO0FBQ3hEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9tZW1vcnkvdmVjdG9yX3N0b3JlLmpzPzk0MmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL2RvY3VtZW50c1wiO1xuaW1wb3J0IHsgQmFzZU1lbW9yeSwgZ2V0SW5wdXRWYWx1ZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL21lbW9yeVwiO1xuaW1wb3J0IHsgZm9ybWF0RG9jdW1lbnRzQXNTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbC9kb2N1bWVudC5qc1wiO1xuLyoqXG4gKiBDbGFzcyBmb3IgbWFuYWdpbmcgbG9uZy10ZXJtIG1lbW9yeSBpbiBMYXJnZSBMYW5ndWFnZSBNb2RlbCAoTExNKVxuICogYXBwbGljYXRpb25zLiBJdCBwcm92aWRlcyBhIHdheSB0byBwZXJzaXN0IGFuZCByZXRyaWV2ZSByZWxldmFudFxuICogZG9jdW1lbnRzIGZyb20gYSB2ZWN0b3Igc3RvcmUgZGF0YWJhc2UsIHdoaWNoIGNhbiBiZSB1c2VmdWwgZm9yXG4gKiBtYWludGFpbmluZyBjb252ZXJzYXRpb24gaGlzdG9yeSBvciBvdGhlciB0eXBlcyBvZiBtZW1vcnkgaW4gYW4gTExNXG4gKiBhcHBsaWNhdGlvbi5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCB2ZWN0b3JTdG9yZSA9IG5ldyBNZW1vcnlWZWN0b3JTdG9yZShuZXcgT3BlbkFJRW1iZWRkaW5ncygpKTtcbiAqIGNvbnN0IG1lbW9yeSA9IG5ldyBWZWN0b3JTdG9yZVJldHJpZXZlck1lbW9yeSh7XG4gKiAgIHZlY3RvclN0b3JlUmV0cmlldmVyOiB2ZWN0b3JTdG9yZS5hc1JldHJpZXZlcigxKSxcbiAqICAgbWVtb3J5S2V5OiBcImhpc3RvcnlcIixcbiAqIH0pO1xuICpcbiAqIC8vIFNhdmluZyBjb250ZXh0IHRvIG1lbW9yeVxuICogYXdhaXQgbWVtb3J5LnNhdmVDb250ZXh0KFxuICogICB7IGlucHV0OiBcIk15IGZhdm9yaXRlIGZvb2QgaXMgcGl6emFcIiB9LFxuICogICB7IG91dHB1dDogXCJ0aGF0cyBnb29kIHRvIGtub3dcIiB9LFxuICogKTtcbiAqIGF3YWl0IG1lbW9yeS5zYXZlQ29udGV4dChcbiAqICAgeyBpbnB1dDogXCJNeSBmYXZvcml0ZSBzcG9ydCBpcyBzb2NjZXJcIiB9LFxuICogICB7IG91dHB1dDogXCIuLi5cIiB9LFxuICogKTtcbiAqIGF3YWl0IG1lbW9yeS5zYXZlQ29udGV4dCh7IGlucHV0OiBcIkkgZG9uJ3QgdGhlIENlbHRpY3NcIiB9LCB7IG91dHB1dDogXCJva1wiIH0pO1xuICpcbiAqIC8vIExvYWRpbmcgbWVtb3J5IHZhcmlhYmxlc1xuICogY29uc29sZS5sb2coXG4gKiAgIGF3YWl0IG1lbW9yeS5sb2FkTWVtb3J5VmFyaWFibGVzKHsgcHJvbXB0OiBcIndoYXQgc3BvcnQgc2hvdWxkIGkgd2F0Y2g/XCIgfSksXG4gKiApO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3JTdG9yZVJldHJpZXZlck1lbW9yeSBleHRlbmRzIEJhc2VNZW1vcnkge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ2ZWN0b3JTdG9yZVJldHJpZXZlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbnB1dEtleVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZW1vcnlLZXlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmV0dXJuRG9jc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhZGF0YVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnZlY3RvclN0b3JlUmV0cmlldmVyID0gZmllbGRzLnZlY3RvclN0b3JlUmV0cmlldmVyO1xuICAgICAgICB0aGlzLmlucHV0S2V5ID0gZmllbGRzLmlucHV0S2V5O1xuICAgICAgICB0aGlzLm1lbW9yeUtleSA9IGZpZWxkcy5tZW1vcnlLZXkgPz8gXCJtZW1vcnlcIjtcbiAgICAgICAgdGhpcy5yZXR1cm5Eb2NzID0gZmllbGRzLnJldHVybkRvY3MgPz8gZmFsc2U7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBmaWVsZHMubWV0YWRhdGE7XG4gICAgfVxuICAgIGdldCBtZW1vcnlLZXlzKCkge1xuICAgICAgICByZXR1cm4gW3RoaXMubWVtb3J5S2V5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGxvYWQgbWVtb3J5IHZhcmlhYmxlcy4gSXQgdXNlcyB0aGUgdmVjdG9yU3RvcmVSZXRyaWV2ZXIgdG9cbiAgICAgKiBnZXQgcmVsZXZhbnQgZG9jdW1lbnRzIGJhc2VkIG9uIHRoZSBxdWVyeSBvYnRhaW5lZCBmcm9tIHRoZSBpbnB1dFxuICAgICAqIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gdmFsdWVzIEFuIElucHV0VmFsdWVzIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIE1lbW9yeVZhcmlhYmxlcyBvYmplY3QuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZE1lbW9yeVZhcmlhYmxlcyh2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgcXVlcnkgPSBnZXRJbnB1dFZhbHVlKHZhbHVlcywgdGhpcy5pbnB1dEtleSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLnZlY3RvclN0b3JlUmV0cmlldmVyLmdldFJlbGV2YW50RG9jdW1lbnRzKHF1ZXJ5KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFt0aGlzLm1lbW9yeUtleV06IHRoaXMucmV0dXJuRG9jc1xuICAgICAgICAgICAgICAgID8gcmVzdWx0c1xuICAgICAgICAgICAgICAgIDogZm9ybWF0RG9jdW1lbnRzQXNTdHJpbmcocmVzdWx0cyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0byBzYXZlIGNvbnRleHQuIEl0IGNvbnN0cnVjdHMgYSBkb2N1bWVudCBmcm9tIHRoZSBpbnB1dCBhbmRcbiAgICAgKiBvdXRwdXQgdmFsdWVzIChleGNsdWRpbmcgdGhlIG1lbW9yeSBrZXkpIGFuZCBhZGRzIGl0IHRvIHRoZSB2ZWN0b3JcbiAgICAgKiBzdG9yZSBkYXRhYmFzZSB1c2luZyB0aGUgdmVjdG9yU3RvcmVSZXRyaWV2ZXIuXG4gICAgICogQHBhcmFtIGlucHV0VmFsdWVzIEFuIElucHV0VmFsdWVzIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gb3V0cHV0VmFsdWVzIEFuIE91dHB1dFZhbHVlcyBvYmplY3QuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdm9pZC5cbiAgICAgKi9cbiAgICBhc3luYyBzYXZlQ29udGV4dChpbnB1dFZhbHVlcywgb3V0cHV0VmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdHlwZW9mIHRoaXMubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyB0aGlzLm1ldGFkYXRhKGlucHV0VmFsdWVzLCBvdXRwdXRWYWx1ZXMpXG4gICAgICAgICAgICA6IHRoaXMubWV0YWRhdGE7XG4gICAgICAgIGNvbnN0IHRleHQgPSBPYmplY3QuZW50cmllcyhpbnB1dFZhbHVlcylcbiAgICAgICAgICAgIC5maWx0ZXIoKFtrXSkgPT4gayAhPT0gdGhpcy5tZW1vcnlLZXkpXG4gICAgICAgICAgICAuY29uY2F0KE9iamVjdC5lbnRyaWVzKG91dHB1dFZhbHVlcykpXG4gICAgICAgICAgICAubWFwKChbaywgdl0pID0+IGAke2t9OiAke3Z9YClcbiAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgICBhd2FpdCB0aGlzLnZlY3RvclN0b3JlUmV0cmlldmVyLmFkZERvY3VtZW50cyhbXG4gICAgICAgICAgICBuZXcgRG9jdW1lbnQoeyBwYWdlQ29udGVudDogdGV4dCwgbWV0YWRhdGEgfSksXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/vector_store.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/noop.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/noop.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoOpOutputParser: () => (/* binding */ NoOpOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n/**\n * The NoOpOutputParser class is a type of output parser that does not\n * perform any operations on the output. It extends the BaseOutputParser\n * class and is part of the LangChain's output parsers module. This class\n * is useful in scenarios where the raw output of the Large Language\n * Models (LLMs) is required.\n */\nclass NoOpOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"default\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"NoOpOutputParser\";\n    }\n    /**\n     * This method takes a string as input and returns the same string as\n     * output. It does not perform any operations on the input string.\n     * @param text The input string to be parsed.\n     * @returns The same input string without any operations performed on it.\n     */\n    parse(text) {\n        return Promise.resolve(text);\n    }\n    /**\n     * This method returns an empty string. It does not provide any formatting\n     * instructions.\n     * @returns An empty string, indicating no formatting instructions.\n     */\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvbm9vcC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQiw0RUFBZ0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9vdXRwdXRfcGFyc2Vycy9ub29wLmpzPzViOTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU91dHB1dFBhcnNlciB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcbi8qKlxuICogVGhlIE5vT3BPdXRwdXRQYXJzZXIgY2xhc3MgaXMgYSB0eXBlIG9mIG91dHB1dCBwYXJzZXIgdGhhdCBkb2VzIG5vdFxuICogcGVyZm9ybSBhbnkgb3BlcmF0aW9ucyBvbiB0aGUgb3V0cHV0LiBJdCBleHRlbmRzIHRoZSBCYXNlT3V0cHV0UGFyc2VyXG4gKiBjbGFzcyBhbmQgaXMgcGFydCBvZiB0aGUgTGFuZ0NoYWluJ3Mgb3V0cHV0IHBhcnNlcnMgbW9kdWxlLiBUaGlzIGNsYXNzXG4gKiBpcyB1c2VmdWwgaW4gc2NlbmFyaW9zIHdoZXJlIHRoZSByYXcgb3V0cHV0IG9mIHRoZSBMYXJnZSBMYW5ndWFnZVxuICogTW9kZWxzIChMTE1zKSBpcyByZXF1aXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vT3BPdXRwdXRQYXJzZXIgZXh0ZW5kcyBCYXNlT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcImRlZmF1bHRcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIk5vT3BPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgdGFrZXMgYSBzdHJpbmcgYXMgaW5wdXQgYW5kIHJldHVybnMgdGhlIHNhbWUgc3RyaW5nIGFzXG4gICAgICogb3V0cHV0LiBJdCBkb2VzIG5vdCBwZXJmb3JtIGFueSBvcGVyYXRpb25zIG9uIHRoZSBpbnB1dCBzdHJpbmcuXG4gICAgICogQHBhcmFtIHRleHQgVGhlIGlucHV0IHN0cmluZyB0byBiZSBwYXJzZWQuXG4gICAgICogQHJldHVybnMgVGhlIHNhbWUgaW5wdXQgc3RyaW5nIHdpdGhvdXQgYW55IG9wZXJhdGlvbnMgcGVyZm9ybWVkIG9uIGl0LlxuICAgICAqL1xuICAgIHBhcnNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0ZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuIEl0IGRvZXMgbm90IHByb3ZpZGUgYW55IGZvcm1hdHRpbmdcbiAgICAgKiBpbnN0cnVjdGlvbnMuXG4gICAgICogQHJldHVybnMgQW4gZW1wdHkgc3RyaW5nLCBpbmRpY2F0aW5nIG5vIGZvcm1hdHRpbmcgaW5zdHJ1Y3Rpb25zLlxuICAgICAqL1xuICAgIGdldEZvcm1hdEluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/noop.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/openai_functions.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonKeyOutputFunctionsParser: () => (/* binding */ JsonKeyOutputFunctionsParser),\n/* harmony export */   JsonOutputFunctionsParser: () => (/* binding */ JsonOutputFunctionsParser),\n/* harmony export */   OutputFunctionsParser: () => (/* binding */ OutputFunctionsParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_json_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/json_patch */ \"(rsc)/./node_modules/@langchain/core/utils/json_patch.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n\n\n/**\n * Class for parsing the output of an LLM. Can be configured to return\n * only the arguments of the function call in the output.\n */\nclass OutputFunctionsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseLLMOutputParser {\n    static lc_name() {\n        return \"OutputFunctionsParser\";\n    }\n    constructor(config) {\n        super();\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"openai_functions\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"argsOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.argsOnly = config?.argsOnly ?? this.argsOnly;\n    }\n    /**\n     * Parses the output and returns a string representation of the function\n     * call or its arguments.\n     * @param generations The output of the LLM to parse.\n     * @returns A string representation of the function call or its arguments.\n     */\n    async parseResult(generations) {\n        if (\"message\" in generations[0]) {\n            const gen = generations[0];\n            const functionCall = gen.message.additional_kwargs.function_call;\n            if (!functionCall) {\n                throw new Error(`No function_call in message ${JSON.stringify(generations)}`);\n            }\n            if (!functionCall.arguments) {\n                throw new Error(`No arguments in function_call ${JSON.stringify(generations)}`);\n            }\n            if (this.argsOnly) {\n                return functionCall.arguments;\n            }\n            return JSON.stringify(functionCall);\n        }\n        else {\n            throw new Error(`No message in generations ${JSON.stringify(generations)}`);\n        }\n    }\n}\n/**\n * Class for parsing the output of an LLM into a JSON object. Uses an\n * instance of `OutputFunctionsParser` to parse the output.\n */\nclass JsonOutputFunctionsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseCumulativeTransformOutputParser {\n    static lc_name() {\n        return \"JsonOutputFunctionsParser\";\n    }\n    constructor(config) {\n        super(config);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"openai_functions\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argsOnly\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.argsOnly = config?.argsOnly ?? this.argsOnly;\n        this.outputParser = new OutputFunctionsParser(config);\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        const ops = (0,_langchain_core_utils_json_patch__WEBPACK_IMPORTED_MODULE_0__.compare)(prev ?? {}, next);\n        return ops;\n    }\n    async parsePartialResult(generations) {\n        const generation = generations[0];\n        if (!generation.message) {\n            return undefined;\n        }\n        const { message } = generation;\n        const functionCall = message.additional_kwargs.function_call;\n        if (!functionCall) {\n            return undefined;\n        }\n        if (this.argsOnly) {\n            return (0,_langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.parsePartialJson)(functionCall.arguments);\n        }\n        return {\n            ...functionCall,\n            arguments: (0,_langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.parsePartialJson)(functionCall.arguments),\n        };\n    }\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */\n    async parseResult(generations) {\n        const result = await this.outputParser.parseResult(generations);\n        if (!result) {\n            throw new Error(`No result from \"OutputFunctionsParser\" ${JSON.stringify(generations)}`);\n        }\n        return this.parse(result);\n    }\n    async parse(text) {\n        const parsedResult = JSON.parse(text);\n        if (this.argsOnly) {\n            return parsedResult;\n        }\n        parsedResult.arguments = JSON.parse(parsedResult.arguments);\n        return parsedResult;\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n/**\n * Class for parsing the output of an LLM into a JSON object and returning\n * a specific attribute. Uses an instance of `JsonOutputFunctionsParser`\n * to parse the output.\n */\nclass JsonKeyOutputFunctionsParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseLLMOutputParser {\n    static lc_name() {\n        return \"JsonKeyOutputFunctionsParser\";\n    }\n    get lc_aliases() {\n        return {\n            attrName: \"key_name\",\n        };\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"openai_functions\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"outputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new JsonOutputFunctionsParser()\n        });\n        Object.defineProperty(this, \"attrName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.attrName = fields.attrName;\n    }\n    /**\n     * Parses the output and returns a specific attribute of the parsed JSON\n     * object.\n     * @param generations The output of the LLM to parse.\n     * @returns The value of a specific attribute of the parsed JSON object.\n     */\n    async parseResult(generations) {\n        const result = await this.outputParser.parseResult(generations);\n        return result[this.attrName];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX2Z1bmN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RDtBQUMrQztBQUN6QztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9DQUFvQywrRUFBbUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELDRCQUE0QjtBQUMzRjtBQUNBO0FBQ0EsaUVBQWlFLDRCQUE0QjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCw0QkFBNEI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx3Q0FBd0MsK0ZBQW1DO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlFQUFPLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdGQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsZ0ZBQWdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsNEJBQTRCO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQ0FBMkMsK0VBQW1CO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9vdXRwdXRfcGFyc2Vycy9vcGVuYWlfZnVuY3Rpb25zLmpzP2FmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFyZSwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2pzb25fcGF0Y2hcIjtcbmltcG9ydCB7IEJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyLCBCYXNlTExNT3V0cHV0UGFyc2VyLCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcbmltcG9ydCB7IHBhcnNlUGFydGlhbEpzb24gfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzXCI7XG4vKipcbiAqIENsYXNzIGZvciBwYXJzaW5nIHRoZSBvdXRwdXQgb2YgYW4gTExNLiBDYW4gYmUgY29uZmlndXJlZCB0byByZXR1cm5cbiAqIG9ubHkgdGhlIGFyZ3VtZW50cyBvZiB0aGUgZnVuY3Rpb24gY2FsbCBpbiB0aGUgb3V0cHV0LlxuICovXG5leHBvcnQgY2xhc3MgT3V0cHV0RnVuY3Rpb25zUGFyc2VyIGV4dGVuZHMgQmFzZUxMTU91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIk91dHB1dEZ1bmN0aW9uc1BhcnNlclwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcIm9wZW5haV9mdW5jdGlvbnNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnc09ubHlcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXJnc09ubHkgPSBjb25maWc/LmFyZ3NPbmx5ID8/IHRoaXMuYXJnc09ubHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgb3V0cHV0IGFuZCByZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBmdW5jdGlvblxuICAgICAqIGNhbGwgb3IgaXRzIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0gZ2VuZXJhdGlvbnMgVGhlIG91dHB1dCBvZiB0aGUgTExNIHRvIHBhcnNlLlxuICAgICAqIEByZXR1cm5zIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBmdW5jdGlvbiBjYWxsIG9yIGl0cyBhcmd1bWVudHMuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2VSZXN1bHQoZ2VuZXJhdGlvbnMpIHtcbiAgICAgICAgaWYgKFwibWVzc2FnZVwiIGluIGdlbmVyYXRpb25zWzBdKSB7XG4gICAgICAgICAgICBjb25zdCBnZW4gPSBnZW5lcmF0aW9uc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbCA9IGdlbi5tZXNzYWdlLmFkZGl0aW9uYWxfa3dhcmdzLmZ1bmN0aW9uX2NhbGw7XG4gICAgICAgICAgICBpZiAoIWZ1bmN0aW9uQ2FsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gZnVuY3Rpb25fY2FsbCBpbiBtZXNzYWdlICR7SlNPTi5zdHJpbmdpZnkoZ2VuZXJhdGlvbnMpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFmdW5jdGlvbkNhbGwuYXJndW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBhcmd1bWVudHMgaW4gZnVuY3Rpb25fY2FsbCAke0pTT04uc3RyaW5naWZ5KGdlbmVyYXRpb25zKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmFyZ3NPbmx5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uQ2FsbC5hcmd1bWVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZnVuY3Rpb25DYWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbWVzc2FnZSBpbiBnZW5lcmF0aW9ucyAke0pTT04uc3RyaW5naWZ5KGdlbmVyYXRpb25zKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQ2xhc3MgZm9yIHBhcnNpbmcgdGhlIG91dHB1dCBvZiBhbiBMTE0gaW50byBhIEpTT04gb2JqZWN0LiBVc2VzIGFuXG4gKiBpbnN0YW5jZSBvZiBgT3V0cHV0RnVuY3Rpb25zUGFyc2VyYCB0byBwYXJzZSB0aGUgb3V0cHV0LlxuICovXG5leHBvcnQgY2xhc3MgSnNvbk91dHB1dEZ1bmN0aW9uc1BhcnNlciBleHRlbmRzIEJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSnNvbk91dHB1dEZ1bmN0aW9uc1BhcnNlclwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoY29uZmlnKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcIm9wZW5haV9mdW5jdGlvbnNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3V0cHV0UGFyc2VyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFyZ3NPbmx5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFyZ3NPbmx5ID0gY29uZmlnPy5hcmdzT25seSA/PyB0aGlzLmFyZ3NPbmx5O1xuICAgICAgICB0aGlzLm91dHB1dFBhcnNlciA9IG5ldyBPdXRwdXRGdW5jdGlvbnNQYXJzZXIoY29uZmlnKTtcbiAgICB9XG4gICAgX2RpZmYocHJldiwgbmV4dCkge1xuICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3BzID0gY29tcGFyZShwcmV2ID8/IHt9LCBuZXh0KTtcbiAgICAgICAgcmV0dXJuIG9wcztcbiAgICB9XG4gICAgYXN5bmMgcGFyc2VQYXJ0aWFsUmVzdWx0KGdlbmVyYXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRpb24gPSBnZW5lcmF0aW9uc1swXTtcbiAgICAgICAgaWYgKCFnZW5lcmF0aW9uLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBtZXNzYWdlIH0gPSBnZW5lcmF0aW9uO1xuICAgICAgICBjb25zdCBmdW5jdGlvbkNhbGwgPSBtZXNzYWdlLmFkZGl0aW9uYWxfa3dhcmdzLmZ1bmN0aW9uX2NhbGw7XG4gICAgICAgIGlmICghZnVuY3Rpb25DYWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFyZ3NPbmx5KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VQYXJ0aWFsSnNvbihmdW5jdGlvbkNhbGwuYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZnVuY3Rpb25DYWxsLFxuICAgICAgICAgICAgYXJndW1lbnRzOiBwYXJzZVBhcnRpYWxKc29uKGZ1bmN0aW9uQ2FsbC5hcmd1bWVudHMpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIG91dHB1dCBhbmQgcmV0dXJucyBhIEpTT04gb2JqZWN0LiBJZiBgYXJnc09ubHlgIGlzIHRydWUsXG4gICAgICogb25seSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbiBjYWxsIGFyZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0gZ2VuZXJhdGlvbnMgVGhlIG91dHB1dCBvZiB0aGUgTExNIHRvIHBhcnNlLlxuICAgICAqIEByZXR1cm5zIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhlIGZ1bmN0aW9uIGNhbGwgb3IgaXRzIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBhc3luYyBwYXJzZVJlc3VsdChnZW5lcmF0aW9ucykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm91dHB1dFBhcnNlci5wYXJzZVJlc3VsdChnZW5lcmF0aW9ucyk7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHJlc3VsdCBmcm9tIFwiT3V0cHV0RnVuY3Rpb25zUGFyc2VyXCIgJHtKU09OLnN0cmluZ2lmeShnZW5lcmF0aW9ucyl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UocmVzdWx0KTtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UodGV4dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRSZXN1bHQgPSBKU09OLnBhcnNlKHRleHQpO1xuICAgICAgICBpZiAodGhpcy5hcmdzT25seSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWRSZXN1bHQuYXJndW1lbnRzID0gSlNPTi5wYXJzZShwYXJzZWRSZXN1bHQuYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZFJlc3VsdDtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG4vKipcbiAqIENsYXNzIGZvciBwYXJzaW5nIHRoZSBvdXRwdXQgb2YgYW4gTExNIGludG8gYSBKU09OIG9iamVjdCBhbmQgcmV0dXJuaW5nXG4gKiBhIHNwZWNpZmljIGF0dHJpYnV0ZS4gVXNlcyBhbiBpbnN0YW5jZSBvZiBgSnNvbk91dHB1dEZ1bmN0aW9uc1BhcnNlcmBcbiAqIHRvIHBhcnNlIHRoZSBvdXRwdXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uS2V5T3V0cHV0RnVuY3Rpb25zUGFyc2VyIGV4dGVuZHMgQmFzZUxMTU91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkpzb25LZXlPdXRwdXRGdW5jdGlvbnNQYXJzZXJcIjtcbiAgICB9XG4gICAgZ2V0IGxjX2FsaWFzZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdHRyTmFtZTogXCJrZXlfbmFtZVwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcIm9wZW5haV9mdW5jdGlvbnNcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib3V0cHV0UGFyc2VyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgSnNvbk91dHB1dEZ1bmN0aW9uc1BhcnNlcigpXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhdHRyTmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmF0dHJOYW1lID0gZmllbGRzLmF0dHJOYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIG91dHB1dCBhbmQgcmV0dXJucyBhIHNwZWNpZmljIGF0dHJpYnV0ZSBvZiB0aGUgcGFyc2VkIEpTT05cbiAgICAgKiBvYmplY3QuXG4gICAgICogQHBhcmFtIGdlbmVyYXRpb25zIFRoZSBvdXRwdXQgb2YgdGhlIExMTSB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgdmFsdWUgb2YgYSBzcGVjaWZpYyBhdHRyaWJ1dGUgb2YgdGhlIHBhcnNlZCBKU09OIG9iamVjdC5cbiAgICAgKi9cbiAgICBhc3luYyBwYXJzZVJlc3VsdChnZW5lcmF0aW9ucykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm91dHB1dFBhcnNlci5wYXJzZVJlc3VsdChnZW5lcmF0aW9ucyk7XG4gICAgICAgIHJldHVybiByZXN1bHRbdGhpcy5hdHRyTmFtZV07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/openai_functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/router.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/router.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterOutputParser: () => (/* binding */ RouterOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var _structured_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./structured.js */ \"(rsc)/./node_modules/langchain/dist/output_parsers/structured.js\");\n\n\n/**\n * A type of output parser that extends the\n * JsonMarkdownStructuredOutputParser. It is used to parse the output of a\n * router in LangChain. The class takes a schema and an optional\n * RouterOutputParserInput object as parameters.\n */\nclass RouterOutputParser extends _structured_js__WEBPACK_IMPORTED_MODULE_1__.JsonMarkdownStructuredOutputParser {\n    constructor(schema, options) {\n        super(schema);\n        Object.defineProperty(this, \"defaultDestination\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"DEFAULT\"\n        });\n        this.defaultDestination =\n            options?.defaultDestination ?? this.defaultDestination;\n    }\n    /**\n     * Overrides the parse method from JsonMarkdownStructuredOutputParser.\n     * This method takes a string as input, attempts to parse it, and returns\n     * the parsed text. If the destination of the parsed text matches the\n     * defaultDestination, the destination is set to null. If the parsing\n     * fails, an OutputParserException is thrown.\n     * @param text The text to be parsed.\n     * @returns The parsed text as a Promise.\n     */\n    async parse(text) {\n        try {\n            const parsedText = await super.parse(text);\n            if (parsedText.destination?.toLowerCase() ===\n                this.defaultDestination.toLowerCase()) {\n                parsedText.destination = null;\n            }\n            return parsedText;\n        }\n        catch (e) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvcm91dGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1RTtBQUNGO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLGlDQUFpQyw4RUFBa0M7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsaUZBQXFCLDRCQUE0QixLQUFLLFlBQVksRUFBRTtBQUMxRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvcm91dGVyLmpzP2ZiOGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3V0cHV0UGFyc2VyRXhjZXB0aW9uIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9vdXRwdXRfcGFyc2Vyc1wiO1xuaW1wb3J0IHsgSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlciB9IGZyb20gXCIuL3N0cnVjdHVyZWQuanNcIjtcbi8qKlxuICogQSB0eXBlIG9mIG91dHB1dCBwYXJzZXIgdGhhdCBleHRlbmRzIHRoZVxuICogSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlci4gSXQgaXMgdXNlZCB0byBwYXJzZSB0aGUgb3V0cHV0IG9mIGFcbiAqIHJvdXRlciBpbiBMYW5nQ2hhaW4uIFRoZSBjbGFzcyB0YWtlcyBhIHNjaGVtYSBhbmQgYW4gb3B0aW9uYWxcbiAqIFJvdXRlck91dHB1dFBhcnNlcklucHV0IG9iamVjdCBhcyBwYXJhbWV0ZXJzLlxuICovXG5leHBvcnQgY2xhc3MgUm91dGVyT3V0cHV0UGFyc2VyIGV4dGVuZHMgSnNvbk1hcmtkb3duU3RydWN0dXJlZE91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHNjaGVtYSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRlZmF1bHREZXN0aW5hdGlvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJERUZBVUxUXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVmYXVsdERlc3RpbmF0aW9uID1cbiAgICAgICAgICAgIG9wdGlvbnM/LmRlZmF1bHREZXN0aW5hdGlvbiA/PyB0aGlzLmRlZmF1bHREZXN0aW5hdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGVzIHRoZSBwYXJzZSBtZXRob2QgZnJvbSBKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyLlxuICAgICAqIFRoaXMgbWV0aG9kIHRha2VzIGEgc3RyaW5nIGFzIGlucHV0LCBhdHRlbXB0cyB0byBwYXJzZSBpdCwgYW5kIHJldHVybnNcbiAgICAgKiB0aGUgcGFyc2VkIHRleHQuIElmIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcGFyc2VkIHRleHQgbWF0Y2hlcyB0aGVcbiAgICAgKiBkZWZhdWx0RGVzdGluYXRpb24sIHRoZSBkZXN0aW5hdGlvbiBpcyBzZXQgdG8gbnVsbC4gSWYgdGhlIHBhcnNpbmdcbiAgICAgKiBmYWlscywgYW4gT3V0cHV0UGFyc2VyRXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICAgKiBAcGFyYW0gdGV4dCBUaGUgdGV4dCB0byBiZSBwYXJzZWQuXG4gICAgICogQHJldHVybnMgVGhlIHBhcnNlZCB0ZXh0IGFzIGEgUHJvbWlzZS5cbiAgICAgKi9cbiAgICBhc3luYyBwYXJzZSh0ZXh0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRUZXh0ID0gYXdhaXQgc3VwZXIucGFyc2UodGV4dCk7XG4gICAgICAgICAgICBpZiAocGFyc2VkVGV4dC5kZXN0aW5hdGlvbj8udG9Mb3dlckNhc2UoKSA9PT1cbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHREZXN0aW5hdGlvbi50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkVGV4dC5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE91dHB1dFBhcnNlckV4Y2VwdGlvbihgRmFpbGVkIHRvIHBhcnNlLiBUZXh0OiBcIiR7dGV4dH1cIi4gRXJyb3I6ICR7ZX1gLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/output_parsers/structured.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/output_parsers/structured.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* binding */ AsymmetricStructuredOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* binding */ JsonMarkdownStructuredOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* binding */ StructuredOutputParser)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n\n\n\nclass StructuredOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    static lc_name() {\n        return \"StructuredOutputParser\";\n    }\n    toJSON() {\n        return this.toJSONNotImplemented();\n    }\n    constructor(schema) {\n        super(schema);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: schema\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"output_parsers\", \"structured\"]\n        });\n    }\n    /**\n     * Creates a new StructuredOutputParser from a Zod schema.\n     * @param schema The Zod schema which the output should match\n     * @returns A new instance of StructuredOutputParser.\n     */\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    /**\n     * Creates a new StructuredOutputParser from a set of names and\n     * descriptions.\n     * @param schemas An object where each key is a name and each value is a description\n     * @returns A new instance of StructuredOutputParser.\n     */\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description]) => [name, zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)])));\n        return new this(zodSchema);\n    }\n    /**\n     * Returns a markdown code snippet with a JSON object formatted according\n     * to the schema.\n     * @param options Optional. The options for formatting the instructions\n     * @returns A markdown code snippet with a JSON object formatted according to the schema.\n     */\n    getFormatInstructions() {\n        return `You must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n\\`\\`\\`json\n${JSON.stringify((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema))}\n\\`\\`\\`\n`;\n    }\n    /**\n     * Parses the given text according to the schema.\n     * @param text The text to parse\n     * @returns The parsed output.\n     */\n    async parse(text) {\n        try {\n            const json = text.includes(\"```\")\n                ? text.trim().split(/```(?:json)?/)[1]\n                : text.trim();\n            return await this.schema.parseAsync(JSON.parse(json));\n        }\n        catch (e) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n/**\n * A specific type of `StructuredOutputParser` that parses JSON data\n * formatted as a markdown code snippet.\n */\nclass JsonMarkdownStructuredOutputParser extends StructuredOutputParser {\n    static lc_name() {\n        return \"JsonMarkdownStructuredOutputParser\";\n    }\n    getFormatInstructions(options) {\n        const interpolationDepth = options?.interpolationDepth ?? 1;\n        if (interpolationDepth < 1) {\n            throw new Error(\"f string interpolation depth must be at least 1\");\n        }\n        return `Return a markdown code snippet with a JSON object formatted to look like:\\n\\`\\`\\`json\\n${this._schemaToInstruction((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema))\n            .replaceAll(\"{\", \"{\".repeat(interpolationDepth))\n            .replaceAll(\"}\", \"}\".repeat(interpolationDepth))}\\n\\`\\`\\``;\n    }\n    _schemaToInstruction(schemaInput, indent = 2) {\n        const schema = schemaInput;\n        if (\"type\" in schema) {\n            let nullable = false;\n            let type;\n            if (Array.isArray(schema.type)) {\n                const nullIdx = schema.type.findIndex((type) => type === \"null\");\n                if (nullIdx !== -1) {\n                    nullable = true;\n                    schema.type.splice(nullIdx, 1);\n                }\n                type = schema.type.join(\" | \");\n            }\n            else {\n                type = schema.type;\n            }\n            if (schema.type === \"object\" && schema.properties) {\n                const description = schema.description\n                    ? ` // ${schema.description}`\n                    : \"\";\n                const properties = Object.entries(schema.properties)\n                    .map(([key, value]) => {\n                    const isOptional = schema.required?.includes(key)\n                        ? \"\"\n                        : \" (optional)\";\n                    return `${\" \".repeat(indent)}\"${key}\": ${this._schemaToInstruction(value, indent + 2)}${isOptional}`;\n                })\n                    .join(\"\\n\");\n                return `{\\n${properties}\\n${\" \".repeat(indent - 2)}}${description}`;\n            }\n            if (schema.type === \"array\" && schema.items) {\n                const description = schema.description\n                    ? ` // ${schema.description}`\n                    : \"\";\n                return `array[\\n${\" \".repeat(indent)}${this._schemaToInstruction(schema.items, indent + 2)}\\n${\" \".repeat(indent - 2)}] ${description}`;\n            }\n            const isNullable = nullable ? \" (nullable)\" : \"\";\n            const description = schema.description ? ` // ${schema.description}` : \"\";\n            return `${type}${description}${isNullable}`;\n        }\n        if (\"anyOf\" in schema) {\n            return schema.anyOf\n                .map((s) => this._schemaToInstruction(s, indent))\n                .join(`\\n${\" \".repeat(indent - 2)}`);\n        }\n        throw new Error(\"unsupported schema type\");\n    }\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description]) => [name, zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)])));\n        return new this(zodSchema);\n    }\n}\n/**\n * A type of `StructuredOutputParser` that handles asymmetric input and\n * output schemas.\n */\nclass AsymmetricStructuredOutputParser extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    constructor({ inputSchema }) {\n        super(...arguments);\n        Object.defineProperty(this, \"structuredInputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.structuredInputParser = new JsonMarkdownStructuredOutputParser(inputSchema);\n    }\n    async parse(text) {\n        let parsedInput;\n        try {\n            parsedInput = await this.structuredInputParser.parse(text);\n        }\n        catch (e) {\n            throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n        return this.outputProcessor(parsedInput);\n    }\n    getFormatInstructions() {\n        return this.structuredInputParser.getFormatInstructions();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/output_parsers/structured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/retrievers/time_weighted.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/retrievers/time_weighted.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUFFER_IDX: () => (/* binding */ BUFFER_IDX),\n/* harmony export */   LAST_ACCESSED_AT_KEY: () => (/* binding */ LAST_ACCESSED_AT_KEY),\n/* harmony export */   TimeWeightedVectorStoreRetriever: () => (/* binding */ TimeWeightedVectorStoreRetriever)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_retrievers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/retrievers */ \"(rsc)/./node_modules/@langchain/core/retrievers.js\");\n\nconst LAST_ACCESSED_AT_KEY = \"last_accessed_at\";\nconst BUFFER_IDX = \"buffer_idx\";\n/**\n * TimeWeightedVectorStoreRetriever retrieves documents based on their time-weighted relevance.\n * ref: https://github.com/langchain-ai/langchain/blob/master/libs/langchain/langchain/retrievers/time_weighted_retriever.py\n * @example\n * ```typescript\n * const retriever = new TimeWeightedVectorStoreRetriever({\n *   vectorStore: new MemoryVectorStore(new OpenAIEmbeddings()),\n *   memoryStream: [],\n *   searchKwargs: 2,\n * });\n * await retriever.addDocuments([\n *   { pageContent: \"My name is John.\", metadata: {} },\n *   { pageContent: \"My favourite food is pizza.\", metadata: {} },\n *\n * ]);\n * const results = await retriever.getRelevantDocuments(\n *   \"What is my favourite food?\",\n * );\n * ```\n */\nclass TimeWeightedVectorStoreRetriever extends _langchain_core_retrievers__WEBPACK_IMPORTED_MODULE_0__.BaseRetriever {\n    static lc_name() {\n        return \"TimeWeightedVectorStoreRetriever\";\n    }\n    get lc_namespace() {\n        return [\"langchain\", \"retrievers\", \"time_weighted\"];\n    }\n    /**\n     * Constructor to initialize the required fields\n     * @param fields - The fields required for initializing the TimeWeightedVectorStoreRetriever\n     */\n    constructor(fields) {\n        super(fields);\n        /**\n         * The vectorstore to store documents and determine salience.\n         */\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The number of top K most relevant documents to consider when searching.\n         */\n        Object.defineProperty(this, \"searchKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The memory_stream of documents to search through.\n         */\n        Object.defineProperty(this, \"memoryStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The exponential decay factor used as (1.0-decay_rate)**(hrs_passed).\n         */\n        Object.defineProperty(this, \"decayRate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The maximum number of documents to retrieve in a given call.\n         */\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Other keys in the metadata to factor into the score, e.g. 'importance'.\n         */\n        Object.defineProperty(this, \"otherScoreKeys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * The salience to assign memories not retrieved from the vector store.\n         */\n        Object.defineProperty(this, \"defaultSalience\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = fields.vectorStore;\n        this.searchKwargs = fields.searchKwargs ?? 100;\n        this.memoryStream = fields.memoryStream ?? [];\n        this.decayRate = fields.decayRate ?? 0.01;\n        this.k = fields.k ?? 4;\n        this.otherScoreKeys = fields.otherScoreKeys ?? [];\n        this.defaultSalience = fields.defaultSalience ?? null;\n    }\n    /**\n     * Get the memory stream of documents.\n     * @returns The memory stream of documents.\n     */\n    getMemoryStream() {\n        return this.memoryStream;\n    }\n    /**\n     * Set the memory stream of documents.\n     * @param memoryStream The new memory stream of documents.\n     */\n    setMemoryStream(memoryStream) {\n        this.memoryStream = memoryStream;\n    }\n    /**\n     * Get relevant documents based on time-weighted relevance\n     * @param query - The query to search for\n     * @returns The relevant documents\n     */\n    async _getRelevantDocuments(query, runManager) {\n        const now = Math.floor(Date.now() / 1000);\n        const memoryDocsAndScores = this.getMemoryDocsAndScores();\n        const salientDocsAndScores = await this.getSalientDocuments(query, runManager);\n        const docsAndScores = { ...memoryDocsAndScores, ...salientDocsAndScores };\n        return this.computeResults(docsAndScores, now);\n    }\n    /**\n     * NOTE: When adding documents to a vector store, use addDocuments\n     * via retriever instead of directly to the vector store.\n     * This is because it is necessary to process the document\n     * in prepareDocuments.\n     *\n     * @param docs - The documents to add to vector store in the retriever\n     */\n    async addDocuments(docs) {\n        const now = Math.floor(Date.now() / 1000);\n        const savedDocs = this.prepareDocuments(docs, now);\n        this.memoryStream.push(...savedDocs);\n        await this.vectorStore.addDocuments(savedDocs);\n    }\n    /**\n     * Get memory documents and their scores\n     * @returns An object containing memory documents and their scores\n     */\n    getMemoryDocsAndScores() {\n        const memoryDocsAndScores = {};\n        for (const doc of this.memoryStream.slice(-this.k)) {\n            const bufferIdx = doc.metadata[BUFFER_IDX];\n            if (bufferIdx === undefined) {\n                throw new Error(`Found a document in the vector store that is missing required metadata. This retriever only supports vector stores with documents that have been added through the \"addDocuments\" method on a TimeWeightedVectorStoreRetriever, not directly added or loaded into the backing vector store.`);\n            }\n            memoryDocsAndScores[bufferIdx] = {\n                doc,\n                score: this.defaultSalience ?? 0,\n            };\n        }\n        return memoryDocsAndScores;\n    }\n    /**\n     * Get salient documents and their scores based on the query\n     * @param query - The query to search for\n     * @returns An object containing salient documents and their scores\n     */\n    async getSalientDocuments(query, runManager) {\n        const docAndScores = await this.vectorStore.similaritySearchWithScore(query, this.searchKwargs, undefined, runManager?.getChild());\n        const results = {};\n        for (const [fetchedDoc, score] of docAndScores) {\n            const bufferIdx = fetchedDoc.metadata[BUFFER_IDX];\n            if (bufferIdx === undefined) {\n                throw new Error(`Found a document in the vector store that is missing required metadata. This retriever only supports vector stores with documents that have been added through the \"addDocuments\" method on a TimeWeightedVectorStoreRetriever, not directly added or loaded into the backing vector store.`);\n            }\n            const doc = this.memoryStream[bufferIdx];\n            results[bufferIdx] = { doc, score };\n        }\n        return results;\n    }\n    /**\n     * Compute the final result set of documents based on the combined scores\n     * @param docsAndScores - An object containing documents and their scores\n     * @param now - The current timestamp\n     * @returns The final set of documents\n     */\n    computeResults(docsAndScores, now) {\n        const recordedDocs = Object.values(docsAndScores)\n            .map(({ doc, score }) => ({\n            doc,\n            score: this.getCombinedScore(doc, score, now),\n        }))\n            .sort((a, b) => b.score - a.score);\n        const results = [];\n        for (const { doc } of recordedDocs) {\n            const bufferedDoc = this.memoryStream[doc.metadata[BUFFER_IDX]];\n            bufferedDoc.metadata[LAST_ACCESSED_AT_KEY] = now;\n            results.push(bufferedDoc);\n            if (results.length > this.k) {\n                break;\n            }\n        }\n        return results;\n    }\n    /**\n     * Prepare documents with necessary metadata before saving\n     * @param docs - The documents to prepare\n     * @param now - The current timestamp\n     * @returns The prepared documents\n     */\n    prepareDocuments(docs, now) {\n        return docs.map((doc, i) => ({\n            ...doc,\n            metadata: {\n                ...doc.metadata,\n                [LAST_ACCESSED_AT_KEY]: doc.metadata[LAST_ACCESSED_AT_KEY] ?? now,\n                created_at: doc.metadata.created_at ?? now,\n                [BUFFER_IDX]: this.memoryStream.length + i,\n            },\n        }));\n    }\n    /**\n     * Calculate the combined score based on vector relevance and other factors\n     * @param doc - The document to calculate the score for\n     * @param vectorRelevance - The relevance score from the vector store\n     * @param nowMsec - The current timestamp in milliseconds\n     * @returns The combined score for the document\n     */\n    getCombinedScore(doc, vectorRelevance, nowMsec) {\n        const hoursPassed = this.getHoursPassed(nowMsec, doc.metadata[LAST_ACCESSED_AT_KEY]);\n        let score = (1.0 - this.decayRate) ** hoursPassed;\n        for (const key of this.otherScoreKeys) {\n            score += doc.metadata[key];\n        }\n        if (vectorRelevance !== null) {\n            score += vectorRelevance;\n        }\n        return score;\n    }\n    /**\n     * Calculate the hours passed between two time points\n     * @param time - The current time in seconds\n     * @param refTime - The reference time in seconds\n     * @returns The number of hours passed between the two time points\n     */\n    getHoursPassed(time, refTime) {\n        return (time - refTime) / 3600;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/retrievers/time_weighted.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/stores/doc/base.js":
/*!********************************************************!*\
  !*** ./node_modules/langchain/dist/stores/doc/base.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Docstore: () => (/* binding */ Docstore)\n/* harmony export */ });\n/**\n * Abstract class for a document store. All document stores should extend\n * this class.\n */\nclass Docstore {\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc3RvcmVzL2RvYy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc3RvcmVzL2RvYy9iYXNlLmpzP2Y4ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBYnN0cmFjdCBjbGFzcyBmb3IgYSBkb2N1bWVudCBzdG9yZS4gQWxsIGRvY3VtZW50IHN0b3JlcyBzaG91bGQgZXh0ZW5kXG4gKiB0aGlzIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgRG9jc3RvcmUge1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/stores/doc/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/stores/doc/in_memory.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/stores/doc/in_memory.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemoryDocstore: () => (/* binding */ InMemoryDocstore),\n/* harmony export */   SynchronousInMemoryDocstore: () => (/* binding */ SynchronousInMemoryDocstore)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/stores/doc/base.js\");\n\n/**\n * Class for storing and retrieving documents in memory asynchronously.\n * Extends the Docstore class.\n */\nclass InMemoryDocstore extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Docstore {\n    constructor(docs) {\n        super();\n        Object.defineProperty(this, \"_docs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._docs = docs ?? new Map();\n    }\n    /**\n     * Searches for a document in the store based on its ID.\n     * @param search The ID of the document to search for.\n     * @returns The document with the given ID.\n     */\n    async search(search) {\n        const result = this._docs.get(search);\n        if (!result) {\n            throw new Error(`ID ${search} not found.`);\n        }\n        else {\n            return result;\n        }\n    }\n    /**\n     * Adds new documents to the store.\n     * @param texts An object where the keys are document IDs and the values are the documents themselves.\n     * @returns Void\n     */\n    async add(texts) {\n        const keys = [...this._docs.keys()];\n        const overlapping = Object.keys(texts).filter((x) => keys.includes(x));\n        if (overlapping.length > 0) {\n            throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n        }\n        for (const [key, value] of Object.entries(texts)) {\n            this._docs.set(key, value);\n        }\n    }\n    async mget(keys) {\n        return Promise.all(keys.map((key) => this.search(key)));\n    }\n    async mset(keyValuePairs) {\n        await Promise.all(keyValuePairs.map(([key, value]) => this.add({ [key]: value })));\n    }\n    async mdelete(_keys) {\n        throw new Error(\"Not implemented.\");\n    }\n    // eslint-disable-next-line require-yield\n    async *yieldKeys(_prefix) {\n        throw new Error(\"Not implemented\");\n    }\n}\n/**\n * Class for storing and retrieving documents in memory synchronously.\n */\nclass SynchronousInMemoryDocstore {\n    constructor(docs) {\n        Object.defineProperty(this, \"_docs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._docs = docs ?? new Map();\n    }\n    /**\n     * Searches for a document in the store based on its ID.\n     * @param search The ID of the document to search for.\n     * @returns The document with the given ID.\n     */\n    search(search) {\n        const result = this._docs.get(search);\n        if (!result) {\n            throw new Error(`ID ${search} not found.`);\n        }\n        else {\n            return result;\n        }\n    }\n    /**\n     * Adds new documents to the store.\n     * @param texts An object where the keys are document IDs and the values are the documents themselves.\n     * @returns Void\n     */\n    add(texts) {\n        const keys = [...this._docs.keys()];\n        const overlapping = Object.keys(texts).filter((x) => keys.includes(x));\n        if (overlapping.length > 0) {\n            throw new Error(`Tried to add ids that already exist: ${overlapping}`);\n        }\n        for (const [key, value] of Object.entries(texts)) {\n            this._docs.set(key, value);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc3RvcmVzL2RvYy9pbl9tZW1vcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLDhDQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxZQUFZO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxjQUFjO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxZQUFZO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9zdG9yZXMvZG9jL2luX21lbW9yeS5qcz9jNGRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvY3N0b3JlIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBDbGFzcyBmb3Igc3RvcmluZyBhbmQgcmV0cmlldmluZyBkb2N1bWVudHMgaW4gbWVtb3J5IGFzeW5jaHJvbm91c2x5LlxuICogRXh0ZW5kcyB0aGUgRG9jc3RvcmUgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbk1lbW9yeURvY3N0b3JlIGV4dGVuZHMgRG9jc3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKGRvY3MpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2RvY3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZG9jcyA9IGRvY3MgPz8gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyBmb3IgYSBkb2N1bWVudCBpbiB0aGUgc3RvcmUgYmFzZWQgb24gaXRzIElELlxuICAgICAqIEBwYXJhbSBzZWFyY2ggVGhlIElEIG9mIHRoZSBkb2N1bWVudCB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIFRoZSBkb2N1bWVudCB3aXRoIHRoZSBnaXZlbiBJRC5cbiAgICAgKi9cbiAgICBhc3luYyBzZWFyY2goc2VhcmNoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RvY3MuZ2V0KHNlYXJjaCk7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYElEICR7c2VhcmNofSBub3QgZm91bmQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgbmV3IGRvY3VtZW50cyB0byB0aGUgc3RvcmUuXG4gICAgICogQHBhcmFtIHRleHRzIEFuIG9iamVjdCB3aGVyZSB0aGUga2V5cyBhcmUgZG9jdW1lbnQgSURzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZG9jdW1lbnRzIHRoZW1zZWx2ZXMuXG4gICAgICogQHJldHVybnMgVm9pZFxuICAgICAqL1xuICAgIGFzeW5jIGFkZCh0ZXh0cykge1xuICAgICAgICBjb25zdCBrZXlzID0gWy4uLnRoaXMuX2RvY3Mua2V5cygpXTtcbiAgICAgICAgY29uc3Qgb3ZlcmxhcHBpbmcgPSBPYmplY3Qua2V5cyh0ZXh0cykuZmlsdGVyKCh4KSA9PiBrZXlzLmluY2x1ZGVzKHgpKTtcbiAgICAgICAgaWYgKG92ZXJsYXBwaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gYWRkIGlkcyB0aGF0IGFscmVhZHkgZXhpc3Q6ICR7b3ZlcmxhcHBpbmd9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGV4dHMpKSB7XG4gICAgICAgICAgICB0aGlzLl9kb2NzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBtZ2V0KGtleXMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGtleXMubWFwKChrZXkpID0+IHRoaXMuc2VhcmNoKGtleSkpKTtcbiAgICB9XG4gICAgYXN5bmMgbXNldChrZXlWYWx1ZVBhaXJzKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGtleVZhbHVlUGFpcnMubWFwKChba2V5LCB2YWx1ZV0pID0+IHRoaXMuYWRkKHsgW2tleV06IHZhbHVlIH0pKSk7XG4gICAgfVxuICAgIGFzeW5jIG1kZWxldGUoX2tleXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUteWllbGRcbiAgICBhc3luYyAqeWllbGRLZXlzKF9wcmVmaXgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cbn1cbi8qKlxuICogQ2xhc3MgZm9yIHN0b3JpbmcgYW5kIHJldHJpZXZpbmcgZG9jdW1lbnRzIGluIG1lbW9yeSBzeW5jaHJvbm91c2x5LlxuICovXG5leHBvcnQgY2xhc3MgU3luY2hyb25vdXNJbk1lbW9yeURvY3N0b3JlIHtcbiAgICBjb25zdHJ1Y3Rvcihkb2NzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9kb2NzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RvY3MgPSBkb2NzID8/IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VhcmNoZXMgZm9yIGEgZG9jdW1lbnQgaW4gdGhlIHN0b3JlIGJhc2VkIG9uIGl0cyBJRC5cbiAgICAgKiBAcGFyYW0gc2VhcmNoIFRoZSBJRCBvZiB0aGUgZG9jdW1lbnQgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyBUaGUgZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gICAgICovXG4gICAgc2VhcmNoKHNlYXJjaCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kb2NzLmdldChzZWFyY2gpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJRCAke3NlYXJjaH0gbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIG5ldyBkb2N1bWVudHMgdG8gdGhlIHN0b3JlLlxuICAgICAqIEBwYXJhbSB0ZXh0cyBBbiBvYmplY3Qgd2hlcmUgdGhlIGtleXMgYXJlIGRvY3VtZW50IElEcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGRvY3VtZW50cyB0aGVtc2VsdmVzLlxuICAgICAqIEByZXR1cm5zIFZvaWRcbiAgICAgKi9cbiAgICBhZGQodGV4dHMpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IFsuLi50aGlzLl9kb2NzLmtleXMoKV07XG4gICAgICAgIGNvbnN0IG92ZXJsYXBwaW5nID0gT2JqZWN0LmtleXModGV4dHMpLmZpbHRlcigoeCkgPT4ga2V5cy5pbmNsdWRlcyh4KSk7XG4gICAgICAgIGlmIChvdmVybGFwcGluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyaWVkIHRvIGFkZCBpZHMgdGhhdCBhbHJlYWR5IGV4aXN0OiAke292ZXJsYXBwaW5nfWApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRleHRzKSkge1xuICAgICAgICAgICAgdGhpcy5fZG9jcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/stores/doc/in_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/stores/message/in_memory.js":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/dist/stores/message/in_memory.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatMessageHistory: () => (/* reexport safe */ _langchain_core_chat_history__WEBPACK_IMPORTED_MODULE_0__.InMemoryChatMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_chat_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/chat_history */ \"(rsc)/./node_modules/@langchain/core/chat_history.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc3RvcmVzL21lc3NhZ2UvaW5fbWVtb3J5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3N0b3Jlcy9tZXNzYWdlL2luX21lbW9yeS5qcz9hNGE0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEluTWVtb3J5Q2hhdE1lc3NhZ2VIaXN0b3J5IGFzIENoYXRNZXNzYWdlSGlzdG9yeSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvY2hhdF9oaXN0b3J5XCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/stores/message/in_memory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/text_splitter.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/text_splitter.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterTextSplitter: () => (/* reexport safe */ _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__.CharacterTextSplitter),\n/* harmony export */   LatexTextSplitter: () => (/* reexport safe */ _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__.LatexTextSplitter),\n/* harmony export */   MarkdownTextSplitter: () => (/* reexport safe */ _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__.MarkdownTextSplitter),\n/* harmony export */   RecursiveCharacterTextSplitter: () => (/* reexport safe */ _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter),\n/* harmony export */   SupportedTextSplitterLanguages: () => (/* reexport safe */ _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__.SupportedTextSplitterLanguages),\n/* harmony export */   TextSplitter: () => (/* reexport safe */ _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__.TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* reexport safe */ _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__.TokenTextSplitter)\n/* harmony export */ });\n/* harmony import */ var _langchain_textsplitters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/textsplitters */ \"(rsc)/./node_modules/@langchain/textsplitters/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdGV4dF9zcGxpdHRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC90ZXh0X3NwbGl0dGVyLmpzPzBiMDIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkBsYW5nY2hhaW4vdGV4dHNwbGl0dGVyc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/text_splitter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/document.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/util/document.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatDocumentsAsString: () => (/* binding */ formatDocumentsAsString)\n/* harmony export */ });\n/**\n * Given a list of documents, this util formats their contents\n * into a string, separated by newlines.\n *\n * @param documents\n * @returns A string of the documents page content, separated by newlines.\n */\nconst formatDocumentsAsString = (documents) => documents.map((doc) => doc.pageContent).join(\"\\n\\n\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9kb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC91dGlsL2RvY3VtZW50LmpzP2FlOTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHaXZlbiBhIGxpc3Qgb2YgZG9jdW1lbnRzLCB0aGlzIHV0aWwgZm9ybWF0cyB0aGVpciBjb250ZW50c1xuICogaW50byBhIHN0cmluZywgc2VwYXJhdGVkIGJ5IG5ld2xpbmVzLlxuICpcbiAqIEBwYXJhbSBkb2N1bWVudHNcbiAqIEByZXR1cm5zIEEgc3RyaW5nIG9mIHRoZSBkb2N1bWVudHMgcGFnZSBjb250ZW50LCBzZXBhcmF0ZWQgYnkgbmV3bGluZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JtYXREb2N1bWVudHNBc1N0cmluZyA9IChkb2N1bWVudHMpID0+IGRvY3VtZW50cy5tYXAoKGRvYykgPT4gZG9jLnBhZ2VDb250ZW50KS5qb2luKFwiXFxuXFxuXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/openapi.js":
/*!*****************************************************!*\
  !*** ./node_modules/langchain/dist/util/openapi.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAPISpec: () => (/* binding */ OpenAPISpec)\n/* harmony export */ });\n/* harmony import */ var js_yaml__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/js-yaml/dist/js-yaml.mjs\");\n\nclass OpenAPISpec {\n    constructor(document) {\n        Object.defineProperty(this, \"document\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: document\n        });\n    }\n    get baseUrl() {\n        return this.document.servers ? this.document.servers[0].url : undefined;\n    }\n    getPathsStrict() {\n        if (!this.document.paths) {\n            throw new Error(\"No paths found in spec\");\n        }\n        return this.document.paths;\n    }\n    getParametersStrict() {\n        if (!this.document.components?.parameters) {\n            throw new Error(\"No parameters found in spec\");\n        }\n        return this.document.components.parameters;\n    }\n    getSchemasStrict() {\n        if (!this.document.components?.schemas) {\n            throw new Error(\"No schemas found in spec.\");\n        }\n        return this.document.components.schemas;\n    }\n    getRequestBodiesStrict() {\n        if (!this.document.components?.requestBodies) {\n            throw new Error(\"No request body found in spec.\");\n        }\n        return this.document.components.requestBodies;\n    }\n    getPathStrict(path) {\n        const pathItem = this.getPathsStrict()[path];\n        if (pathItem === undefined) {\n            throw new Error(`No path found for \"${path}\".`);\n        }\n        return pathItem;\n    }\n    getReferencedParameter(ref) {\n        const refComponents = ref.$ref.split(\"/\");\n        const refName = refComponents[refComponents.length - 1];\n        if (this.getParametersStrict()[refName] === undefined) {\n            throw new Error(`No parameter found for \"${refName}\".`);\n        }\n        return this.getParametersStrict()[refName];\n    }\n    getRootReferencedParameter(ref) {\n        let parameter = this.getReferencedParameter(ref);\n        while (parameter.$ref !== undefined) {\n            parameter = this.getReferencedParameter(parameter);\n        }\n        return parameter;\n    }\n    getReferencedSchema(ref) {\n        const refComponents = ref.$ref.split(\"/\");\n        const refName = refComponents[refComponents.length - 1];\n        const schema = this.getSchemasStrict()[refName];\n        if (schema === undefined) {\n            throw new Error(`No schema found for \"${refName}\".`);\n        }\n        return schema;\n    }\n    getSchema(schema) {\n        if (schema.$ref !== undefined) {\n            return this.getReferencedSchema(schema);\n        }\n        return schema;\n    }\n    getRootReferencedSchema(ref) {\n        let schema = this.getReferencedSchema(ref);\n        while (schema.$ref !== undefined) {\n            schema = this.getReferencedSchema(schema);\n        }\n        return schema;\n    }\n    getReferencedRequestBody(ref) {\n        const refComponents = ref.$ref.split(\"/\");\n        const refName = refComponents[refComponents.length - 1];\n        const requestBodies = this.getRequestBodiesStrict();\n        if (requestBodies[refName] === undefined) {\n            throw new Error(`No request body found for \"${refName}\"`);\n        }\n        return requestBodies[refName];\n    }\n    getRootReferencedRequestBody(ref) {\n        let requestBody = this.getReferencedRequestBody(ref);\n        while (requestBody.$ref !== undefined) {\n            requestBody = this.getReferencedRequestBody(requestBody);\n        }\n        return requestBody;\n    }\n    getMethodsForPath(path) {\n        const pathItem = this.getPathStrict(path);\n        // This is an enum in the underlying package.\n        // Werestate here to allow \"import type\" above and not cause warnings in certain envs.\n        const possibleMethods = [\n            \"get\",\n            \"put\",\n            \"post\",\n            \"delete\",\n            \"options\",\n            \"head\",\n            \"patch\",\n            \"trace\",\n        ];\n        return possibleMethods.filter((possibleMethod) => pathItem[possibleMethod] !== undefined);\n    }\n    getParametersForPath(path) {\n        const pathItem = this.getPathStrict(path);\n        if (pathItem.parameters === undefined) {\n            return [];\n        }\n        return pathItem.parameters.map((parameter) => {\n            if (parameter.$ref !== undefined) {\n                return this.getRootReferencedParameter(parameter);\n            }\n            return parameter;\n        });\n    }\n    getOperation(path, method) {\n        const pathItem = this.getPathStrict(path);\n        if (pathItem[method] === undefined) {\n            throw new Error(`No ${method} method found for \"path\".`);\n        }\n        return pathItem[method];\n    }\n    getParametersForOperation(operation) {\n        if (operation.parameters === undefined) {\n            return [];\n        }\n        return operation.parameters.map((parameter) => {\n            if (parameter.$ref !== undefined) {\n                return this.getRootReferencedParameter(parameter);\n            }\n            return parameter;\n        });\n    }\n    getRequestBodyForOperation(operation) {\n        const { requestBody } = operation;\n        if (requestBody?.$ref !== undefined) {\n            return this.getRootReferencedRequestBody(requestBody);\n        }\n        return requestBody;\n    }\n    static getCleanedOperationId(operation, path, method) {\n        let { operationId } = operation;\n        if (operationId === undefined) {\n            const updatedPath = path.replaceAll(/[^a-zA-Z0-9]/, \"_\");\n            operationId = `${updatedPath.startsWith(\"/\") ? updatedPath.slice(1) : updatedPath}_${method}`;\n        }\n        return operationId\n            .replaceAll(\"-\", \"_\")\n            .replaceAll(\".\", \"_\")\n            .replaceAll(\"/\", \"_\");\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static alertUnsupportedSpec(document) {\n        const warningMessage = \"This may result in degraded performance. Convert your OpenAPI spec to 3.1.0 for better support.\";\n        const swaggerVersion = document.swagger;\n        const openAPIVersion = document.openapi;\n        if (openAPIVersion !== undefined && openAPIVersion !== \"3.1.0\") {\n            console.warn(`Attempting to load an OpenAPI ${openAPIVersion} spec. ${warningMessage}`);\n        }\n        else if (swaggerVersion !== undefined) {\n            console.warn(`Attempting to load a Swagger ${swaggerVersion} spec. ${warningMessage}`);\n        }\n        else {\n            throw new Error(`Attempting to load an unsupported spec:\\n\\n${JSON.stringify(document, null, 2)}.`);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromObject(document) {\n        OpenAPISpec.alertUnsupportedSpec(document);\n        return new OpenAPISpec(document);\n    }\n    static fromString(rawString) {\n        let document;\n        try {\n            document = JSON.parse(rawString);\n        }\n        catch (e) {\n            document = js_yaml__WEBPACK_IMPORTED_MODULE_0__.load(rawString);\n        }\n        return OpenAPISpec.fromObject(document);\n    }\n    static async fromURL(url) {\n        const response = await fetch(url);\n        const rawDocument = await response.text();\n        return OpenAPISpec.fromString(rawDocument);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/openapi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/set.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/util/set.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   union: () => (/* binding */ union)\n/* harmony export */ });\n/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */\n/**\n * returns intersection of two sets\n */\nfunction intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */\nfunction union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */\nfunction difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9zZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC91dGlsL3NldC5qcz8wOTZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU291cmNlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TZXQjaW1wbGVtZW50aW5nX2Jhc2ljX3NldF9vcGVyYXRpb25zXG4gKi9cbi8qKlxuICogcmV0dXJucyBpbnRlcnNlY3Rpb24gb2YgdHdvIHNldHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdGlvbihzZXRBLCBzZXRCKSB7XG4gICAgY29uc3QgX2ludGVyc2VjdGlvbiA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgICAgICBpZiAoc2V0QS5oYXMoZWxlbSkpIHtcbiAgICAgICAgICAgIF9pbnRlcnNlY3Rpb24uYWRkKGVsZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfaW50ZXJzZWN0aW9uO1xufVxuLyoqXG4gKiByZXR1cm5zIHVuaW9uIG9mIHR3byBzZXRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bmlvbihzZXRBLCBzZXRCKSB7XG4gICAgY29uc3QgX3VuaW9uID0gbmV3IFNldChzZXRBKTtcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgICAgICBfdW5pb24uYWRkKGVsZW0pO1xuICAgIH1cbiAgICByZXR1cm4gX3VuaW9uO1xufVxuLyoqXG4gKiByZXR1cm5zIGRpZmZlcmVuY2Ugb2YgdHdvIHNldHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2Uoc2V0QSwgc2V0Qikge1xuICAgIGNvbnN0IF9kaWZmZXJlbmNlID0gbmV3IFNldChzZXRBKTtcbiAgICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgICAgICBfZGlmZmVyZW5jZS5kZWxldGUoZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiBfZGlmZmVyZW5jZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/experimental/generative_agents.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/experimental/generative_agents.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GenerativeAgent: () => (/* reexport safe */ _dist_experimental_generative_agents_index_js__WEBPACK_IMPORTED_MODULE_0__.GenerativeAgent),
/* harmony export */   GenerativeAgentMemory: () => (/* reexport safe */ _dist_experimental_generative_agents_index_js__WEBPACK_IMPORTED_MODULE_0__.GenerativeAgentMemory)
/* harmony export */ });
/* harmony import */ var _dist_experimental_generative_agents_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/experimental/generative_agents/index.js */ "(rsc)/./node_modules/langchain/dist/experimental/generative_agents/index.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/memory.js":
/*!******************************************!*\
  !*** ./node_modules/langchain/memory.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseChatMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatMemory),
/* harmony export */   BaseConversationSummaryMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseConversationSummaryMemory),
/* harmony export */   BaseMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMemory),
/* harmony export */   BufferMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.BufferMemory),
/* harmony export */   BufferWindowMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.BufferWindowMemory),
/* harmony export */   ChatMessageHistory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessageHistory),
/* harmony export */   CombinedMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.CombinedMemory),
/* harmony export */   ConversationSummaryBufferMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.ConversationSummaryBufferMemory),
/* harmony export */   ConversationSummaryMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.ConversationSummaryMemory),
/* harmony export */   ConversationTokenBufferMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.ConversationTokenBufferMemory),
/* harmony export */   ENTITY_MEMORY_CONVERSATION_TEMPLATE: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.ENTITY_MEMORY_CONVERSATION_TEMPLATE),
/* harmony export */   EntityMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.EntityMemory),
/* harmony export */   VectorStoreRetrieverMemory: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.VectorStoreRetrieverMemory),
/* harmony export */   getBufferString: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString),
/* harmony export */   getInputValue: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.getInputValue),
/* harmony export */   getOutputValue: () => (/* reexport safe */ _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__.getOutputValue)
/* harmony export */ });
/* harmony import */ var _dist_memory_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/memory/index.js */ "(rsc)/./node_modules/langchain/dist/memory/index.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/chat_models.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/azure/chat_models.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* binding */ AzureChatOpenAI)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chat_models.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/chat_models.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n\n\n\nclass AzureChatOpenAI extends _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI {\n    _llmType() {\n        return \"azure_openai\";\n    }\n    get lc_aliases() {\n        return {\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\",\n        };\n    }\n    constructor(fields) {\n        const newFields = fields ? { ...fields } : fields;\n        if (newFields) {\n            // don't rewrite the fields if they are already set\n            newFields.azureOpenAIApiDeploymentName =\n                newFields.azureOpenAIApiDeploymentName ?? newFields.deploymentName;\n            newFields.azureOpenAIApiKey =\n                newFields.azureOpenAIApiKey ?? newFields.openAIApiKey;\n            newFields.azureOpenAIApiVersion =\n                newFields.azureOpenAIApiVersion ?? newFields.openAIApiVersion;\n        }\n        super(newFields);\n    }\n    getLsParams(options) {\n        const params = super.getLsParams(options);\n        params.ls_provider = \"azure\";\n        return params;\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"]\n                    ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2`\n                    : `langchainjs-azure-openai-v2`,\n            };\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_2__.AzureOpenAI({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                deployment: this.azureOpenAIApiDeploymentName,\n                ...params,\n            });\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return requestOptions;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n        }\n        return json;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L2F6dXJlL2NoYXRfbW9kZWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEQ7QUFDWDtBQUNDO0FBQ3pDLDhCQUE4Qix1REFBVTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFlBQVk7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0REFBVztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsb0NBQW9DO0FBQzdEO0FBQ0E7QUFDQSw4QkFBOEIsK0NBQWlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvY2hhdF9tb2RlbHMuanM/YjI2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBenVyZU9wZW5BSSBhcyBBenVyZU9wZW5BSUNsaWVudCB9IGZyb20gXCJvcGVuYWlcIjtcbmltcG9ydCB7IENoYXRPcGVuQUkgfSBmcm9tIFwiLi4vY2hhdF9tb2RlbHMuanNcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50IH0gZnJvbSBcIi4uL3V0aWxzL2F6dXJlLmpzXCI7XG5leHBvcnQgY2xhc3MgQXp1cmVDaGF0T3BlbkFJIGV4dGVuZHMgQ2hhdE9wZW5BSSB7XG4gICAgX2xsbVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImF6dXJlX29wZW5haVwiO1xuICAgIH1cbiAgICBnZXQgbGNfYWxpYXNlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wZW5BSUFwaUtleTogXCJvcGVuYWlfYXBpX2tleVwiLFxuICAgICAgICAgICAgb3BlbkFJQXBpVmVyc2lvbjogXCJvcGVuYWlfYXBpX3ZlcnNpb25cIixcbiAgICAgICAgICAgIG9wZW5BSUJhc2VQYXRoOiBcIm9wZW5haV9hcGlfYmFzZVwiLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgY29uc3QgbmV3RmllbGRzID0gZmllbGRzID8geyAuLi5maWVsZHMgfSA6IGZpZWxkcztcbiAgICAgICAgaWYgKG5ld0ZpZWxkcykge1xuICAgICAgICAgICAgLy8gZG9uJ3QgcmV3cml0ZSB0aGUgZmllbGRzIGlmIHRoZXkgYXJlIGFscmVhZHkgc2V0XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSA9XG4gICAgICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUgPz8gbmV3RmllbGRzLmRlcGxveW1lbnROYW1lO1xuICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpS2V5ID1cbiAgICAgICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlLZXkgPz8gbmV3RmllbGRzLm9wZW5BSUFwaUtleTtcbiAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaVZlcnNpb24gPVxuICAgICAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaVZlcnNpb24gPz8gbmV3RmllbGRzLm9wZW5BSUFwaVZlcnNpb247XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIobmV3RmllbGRzKTtcbiAgICB9XG4gICAgZ2V0THNQYXJhbXMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBzdXBlci5nZXRMc1BhcmFtcyhvcHRpb25zKTtcbiAgICAgICAgcGFyYW1zLmxzX3Byb3ZpZGVyID0gXCJhenVyZVwiO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cbiAgICBfZ2V0Q2xpZW50T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wZW5BSUVuZHBvaW50Q29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSxcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZTogdGhpcy5henVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSxcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUFwaUtleTogdGhpcy5henVyZU9wZW5BSUFwaUtleSxcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUJhc2VQYXRoOiB0aGlzLmF6dXJlT3BlbkFJQmFzZVBhdGgsXG4gICAgICAgICAgICAgICAgYXp1cmVBRFRva2VuUHJvdmlkZXI6IHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgYmFzZVVSTDogdGhpcy5jbGllbnRDb25maWcuYmFzZVVSTCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludCA9IGdldEVuZHBvaW50KG9wZW5BSUVuZHBvaW50Q29uZmlnKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmNsaWVudENvbmZpZyxcbiAgICAgICAgICAgICAgICBiYXNlVVJMOiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiB0aGlzLnRpbWVvdXQsXG4gICAgICAgICAgICAgICAgbWF4UmV0cmllczogMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMuYXBpS2V5ID0gb3BlbkFJRW5kcG9pbnRDb25maWcuYXp1cmVPcGVuQUlBcGlLZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXBhcmFtcy5iYXNlVVJMKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFtcy5iYXNlVVJMO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyYW1zLmRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgIC4uLnBhcmFtcy5kZWZhdWx0SGVhZGVycyxcbiAgICAgICAgICAgICAgICBcIlVzZXItQWdlbnRcIjogcGFyYW1zLmRlZmF1bHRIZWFkZXJzPy5bXCJVc2VyLUFnZW50XCJdXG4gICAgICAgICAgICAgICAgICAgID8gYCR7cGFyYW1zLmRlZmF1bHRIZWFkZXJzW1wiVXNlci1BZ2VudFwiXX06IGxhbmdjaGFpbmpzLWF6dXJlLW9wZW5haS12MmBcbiAgICAgICAgICAgICAgICAgICAgOiBgbGFuZ2NoYWluanMtYXp1cmUtb3BlbmFpLXYyYCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBBenVyZU9wZW5BSUNsaWVudCh7XG4gICAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24sXG4gICAgICAgICAgICAgICAgYXp1cmVBRFRva2VuUHJvdmlkZXI6IHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgZGVwbG95bWVudDogdGhpcy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lLFxuICAgICAgICAgICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4udGhpcy5jbGllbnRDb25maWcsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5henVyZU9wZW5BSUFwaUtleSkge1xuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICBcImFwaS1rZXlcIjogdGhpcy5henVyZU9wZW5BSUFwaUtleSxcbiAgICAgICAgICAgICAgICAuLi5yZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIFwiYXBpLXZlcnNpb25cIjogdGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24sXG4gICAgICAgICAgICAgICAgLi4ucmVxdWVzdE9wdGlvbnMucXVlcnksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXF1ZXN0T3B0aW9ucztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oKTtcbiAgICAgICAgZnVuY3Rpb24gaXNSZWNvcmQob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWNvcmQoanNvbikgJiYgaXNSZWNvcmQoanNvbi5rd2FyZ3MpKSB7XG4gICAgICAgICAgICBkZWxldGUganNvbi5rd2FyZ3MuYXp1cmVfb3BlbmFpX2Jhc2VfcGF0aDtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYXBpX2RlcGxveW1lbnRfbmFtZTtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYXBpX2tleTtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYXBpX3ZlcnNpb247XG4gICAgICAgICAgICBkZWxldGUganNvbi5rd2FyZ3MuYXp1cmVfb3Blbl9haV9iYXNlX3BhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpzb247XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/embeddings.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/azure/embeddings.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAIEmbeddings: () => (/* binding */ AzureOpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../embeddings.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/embeddings.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/openai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\nclass AzureOpenAIEmbeddings extends _embeddings_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbeddings {\n    constructor(fields, configuration) {\n        const newFields = { ...fields };\n        if (Object.entries(newFields).length) {\n            // don't rewrite the fields if they are already set\n            newFields.azureOpenAIApiDeploymentName =\n                newFields.azureOpenAIApiDeploymentName ?? newFields.deploymentName;\n            newFields.azureOpenAIApiKey =\n                newFields.azureOpenAIApiKey ?? newFields.apiKey;\n            newFields.azureOpenAIApiVersion =\n                newFields.azureOpenAIApiVersion ?? newFields.openAIApiVersion;\n        }\n        super(newFields, configuration);\n    }\n    async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"]\n                    ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2`\n                    : `langchainjs-azure-openai-v2`,\n            };\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_3__.AzureOpenAI({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                deployment: this.azureOpenAIApiDeploymentName,\n                ...params,\n            });\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_2__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L2F6dXJlL2VtYmVkZGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMkQ7QUFDUDtBQUNKO0FBQ1c7QUFDcEQsb0NBQW9DLDREQUFnQjtBQUMzRDtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNERBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG9DQUFvQztBQUM3RDtBQUNBO0FBQ0EsOEJBQThCLCtDQUFpQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsdUVBQXFCO0FBQ25EO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvZW1iZWRkaW5ncy5qcz83MTA3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF6dXJlT3BlbkFJIGFzIEF6dXJlT3BlbkFJQ2xpZW50LCB9IGZyb20gXCJvcGVuYWlcIjtcbmltcG9ydCB7IE9wZW5BSUVtYmVkZGluZ3MgfSBmcm9tIFwiLi4vZW1iZWRkaW5ncy5qc1wiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnQgfSBmcm9tIFwiLi4vdXRpbHMvYXp1cmUuanNcIjtcbmltcG9ydCB7IHdyYXBPcGVuQUlDbGllbnRFcnJvciB9IGZyb20gXCIuLi91dGlscy9vcGVuYWkuanNcIjtcbmV4cG9ydCBjbGFzcyBBenVyZU9wZW5BSUVtYmVkZGluZ3MgZXh0ZW5kcyBPcGVuQUlFbWJlZGRpbmdzIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgY29uc3QgbmV3RmllbGRzID0geyAuLi5maWVsZHMgfTtcbiAgICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKG5ld0ZpZWxkcykubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBkb24ndCByZXdyaXRlIHRoZSBmaWVsZHMgaWYgdGhleSBhcmUgYWxyZWFkeSBzZXRcbiAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lID1cbiAgICAgICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSA/PyBuZXdGaWVsZHMuZGVwbG95bWVudE5hbWU7XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlLZXkgPVxuICAgICAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaUtleSA/PyBuZXdGaWVsZHMuYXBpS2V5O1xuICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA9XG4gICAgICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA/PyBuZXdGaWVsZHMub3BlbkFJQXBpVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihuZXdGaWVsZHMsIGNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbiAgICBhc3luYyBlbWJlZGRpbmdXaXRoUmV0cnkocmVxdWVzdCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50KSB7XG4gICAgICAgICAgICBjb25zdCBvcGVuQUlFbmRwb2ludENvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lOiB0aGlzLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUsXG4gICAgICAgICAgICAgICAgYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUsXG4gICAgICAgICAgICAgICAgYXp1cmVPcGVuQUlBcGlLZXk6IHRoaXMuYXp1cmVPcGVuQUlBcGlLZXksXG4gICAgICAgICAgICAgICAgYXp1cmVPcGVuQUlCYXNlUGF0aDogdGhpcy5henVyZU9wZW5BSUJhc2VQYXRoLFxuICAgICAgICAgICAgICAgIGF6dXJlQURUb2tlblByb3ZpZGVyOiB0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyLFxuICAgICAgICAgICAgICAgIGJhc2VVUkw6IHRoaXMuY2xpZW50Q29uZmlnLmJhc2VVUkwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBnZXRFbmRwb2ludChvcGVuQUlFbmRwb2ludENvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5jbGllbnRDb25maWcsXG4gICAgICAgICAgICAgICAgYmFzZVVSTDogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgdGltZW91dDogdGhpcy50aW1lb3V0LFxuICAgICAgICAgICAgICAgIG1heFJldHJpZXM6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmFwaUtleSA9IG9wZW5BSUVuZHBvaW50Q29uZmlnLmF6dXJlT3BlbkFJQXBpS2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwYXJhbXMuYmFzZVVSTCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbXMuYmFzZVVSTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtcy5kZWZhdWx0SGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAuLi5wYXJhbXMuZGVmYXVsdEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgXCJVc2VyLUFnZW50XCI6IHBhcmFtcy5kZWZhdWx0SGVhZGVycz8uW1wiVXNlci1BZ2VudFwiXVxuICAgICAgICAgICAgICAgICAgICA/IGAke3BhcmFtcy5kZWZhdWx0SGVhZGVyc1tcIlVzZXItQWdlbnRcIl19OiBsYW5nY2hhaW5qcy1henVyZS1vcGVuYWktdjJgXG4gICAgICAgICAgICAgICAgICAgIDogYGxhbmdjaGFpbmpzLWF6dXJlLW9wZW5haS12MmAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQXp1cmVPcGVuQUlDbGllbnQoe1xuICAgICAgICAgICAgICAgIGFwaVZlcnNpb246IHRoaXMuYXp1cmVPcGVuQUlBcGlWZXJzaW9uLFxuICAgICAgICAgICAgICAgIGF6dXJlQURUb2tlblByb3ZpZGVyOiB0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyLFxuICAgICAgICAgICAgICAgIGRlcGxveW1lbnQ6IHRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSxcbiAgICAgICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5henVyZU9wZW5BSUFwaUtleSkge1xuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICBcImFwaS1rZXlcIjogdGhpcy5henVyZU9wZW5BSUFwaUtleSxcbiAgICAgICAgICAgICAgICAuLi5yZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIFwiYXBpLXZlcnNpb25cIjogdGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24sXG4gICAgICAgICAgICAgICAgLi4ucmVxdWVzdE9wdGlvbnMucXVlcnksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxlci5jYWxsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZW1iZWRkaW5ncy5jcmVhdGUocmVxdWVzdCwgcmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gd3JhcE9wZW5BSUNsaWVudEVycm9yKGUpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/llms.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/azure/llms.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAI: () => (/* binding */ AzureOpenAI)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../llms.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/llms.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n\n\n\nclass AzureOpenAI extends _llms_js__WEBPACK_IMPORTED_MODULE_0__.OpenAI {\n    get lc_aliases() {\n        return {\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\",\n        };\n    }\n    constructor(fields) {\n        const newFields = fields ? { ...fields } : fields;\n        if (newFields) {\n            // don't rewrite the fields if they are already set\n            newFields.azureOpenAIApiDeploymentName =\n                newFields.azureOpenAIApiDeploymentName ?? newFields.deploymentName;\n            newFields.azureOpenAIApiKey =\n                newFields.azureOpenAIApiKey ?? newFields.openAIApiKey;\n            newFields.azureOpenAIApiVersion =\n                newFields.azureOpenAIApiVersion ?? newFields.openAIApiVersion;\n        }\n        super(newFields);\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"]\n                    ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2`\n                    : `langchainjs-azure-openai-v2`,\n            };\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_2__.AzureOpenAI({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                ...params,\n            });\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return requestOptions;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n        }\n        return json;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L2F6dXJlL2xsbXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRDtBQUN0QjtBQUNZO0FBQ3pDLDBCQUEwQiw0Q0FBTTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFlBQVk7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDREQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixvQ0FBb0M7QUFDN0Q7QUFDQTtBQUNBLDhCQUE4QiwrQ0FBaUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvbGxtcy5qcz9lMDY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF6dXJlT3BlbkFJIGFzIEF6dXJlT3BlbkFJQ2xpZW50IH0gZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IHsgT3BlbkFJIH0gZnJvbSBcIi4uL2xsbXMuanNcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50IH0gZnJvbSBcIi4uL3V0aWxzL2F6dXJlLmpzXCI7XG5leHBvcnQgY2xhc3MgQXp1cmVPcGVuQUkgZXh0ZW5kcyBPcGVuQUkge1xuICAgIGdldCBsY19hbGlhc2VzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3BlbkFJQXBpS2V5OiBcIm9wZW5haV9hcGlfa2V5XCIsXG4gICAgICAgICAgICBvcGVuQUlBcGlWZXJzaW9uOiBcIm9wZW5haV9hcGlfdmVyc2lvblwiLFxuICAgICAgICAgICAgb3BlbkFJQmFzZVBhdGg6IFwib3BlbmFpX2FwaV9iYXNlXCIsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBjb25zdCBuZXdGaWVsZHMgPSBmaWVsZHMgPyB7IC4uLmZpZWxkcyB9IDogZmllbGRzO1xuICAgICAgICBpZiAobmV3RmllbGRzKSB7XG4gICAgICAgICAgICAvLyBkb24ndCByZXdyaXRlIHRoZSBmaWVsZHMgaWYgdGhleSBhcmUgYWxyZWFkeSBzZXRcbiAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lID1cbiAgICAgICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSA/PyBuZXdGaWVsZHMuZGVwbG95bWVudE5hbWU7XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlLZXkgPVxuICAgICAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaUtleSA/PyBuZXdGaWVsZHMub3BlbkFJQXBpS2V5O1xuICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA9XG4gICAgICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA/PyBuZXdGaWVsZHMub3BlbkFJQXBpVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihuZXdGaWVsZHMpO1xuICAgIH1cbiAgICBfZ2V0Q2xpZW50T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wZW5BSUVuZHBvaW50Q29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSxcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZTogdGhpcy5henVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSxcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUFwaUtleTogdGhpcy5henVyZU9wZW5BSUFwaUtleSxcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUJhc2VQYXRoOiB0aGlzLmF6dXJlT3BlbkFJQmFzZVBhdGgsXG4gICAgICAgICAgICAgICAgYXp1cmVBRFRva2VuUHJvdmlkZXI6IHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgYmFzZVVSTDogdGhpcy5jbGllbnRDb25maWcuYmFzZVVSTCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludCA9IGdldEVuZHBvaW50KG9wZW5BSUVuZHBvaW50Q29uZmlnKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmNsaWVudENvbmZpZyxcbiAgICAgICAgICAgICAgICBiYXNlVVJMOiBlbmRwb2ludCxcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiB0aGlzLnRpbWVvdXQsXG4gICAgICAgICAgICAgICAgbWF4UmV0cmllczogMCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMuYXBpS2V5ID0gb3BlbkFJRW5kcG9pbnRDb25maWcuYXp1cmVPcGVuQUlBcGlLZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXBhcmFtcy5iYXNlVVJMKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFtcy5iYXNlVVJMO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyYW1zLmRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgIC4uLnBhcmFtcy5kZWZhdWx0SGVhZGVycyxcbiAgICAgICAgICAgICAgICBcIlVzZXItQWdlbnRcIjogcGFyYW1zLmRlZmF1bHRIZWFkZXJzPy5bXCJVc2VyLUFnZW50XCJdXG4gICAgICAgICAgICAgICAgICAgID8gYCR7cGFyYW1zLmRlZmF1bHRIZWFkZXJzW1wiVXNlci1BZ2VudFwiXX06IGxhbmdjaGFpbmpzLWF6dXJlLW9wZW5haS12MmBcbiAgICAgICAgICAgICAgICAgICAgOiBgbGFuZ2NoYWluanMtYXp1cmUtb3BlbmFpLXYyYCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBBenVyZU9wZW5BSUNsaWVudCh7XG4gICAgICAgICAgICAgICAgYXBpVmVyc2lvbjogdGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24sXG4gICAgICAgICAgICAgICAgYXp1cmVBRFRva2VuUHJvdmlkZXI6IHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLmNsaWVudENvbmZpZyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmF6dXJlT3BlbkFJQXBpS2V5KSB7XG4gICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgIFwiYXBpLWtleVwiOiB0aGlzLmF6dXJlT3BlbkFJQXBpS2V5LFxuICAgICAgICAgICAgICAgIC4uLnJlcXVlc3RPcHRpb25zLmhlYWRlcnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMucXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgXCJhcGktdmVyc2lvblwiOiB0aGlzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbixcbiAgICAgICAgICAgICAgICAuLi5yZXF1ZXN0T3B0aW9ucy5xdWVyeSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcXVlc3RPcHRpb25zO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QganNvbiA9IHN1cGVyLnRvSlNPTigpO1xuICAgICAgICBmdW5jdGlvbiBpc1JlY29yZChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmIG9iaiAhPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlY29yZChqc29uKSAmJiBpc1JlY29yZChqc29uLmt3YXJncykpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYmFzZV9wYXRoO1xuICAgICAgICAgICAgZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5haV9hcGlfZGVwbG95bWVudF9uYW1lO1xuICAgICAgICAgICAgZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5haV9hcGlfa2V5O1xuICAgICAgICAgICAgZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5haV9hcGlfdmVyc2lvbjtcbiAgICAgICAgICAgIGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuX2FpX2Jhc2VfcGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/chat_models.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/chat_models.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOpenAI: () => (/* binding */ ChatOpenAI),\n/* harmony export */   messageToOpenAIRole: () => (/* binding */ messageToOpenAIRole)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/@langchain/core/language_models/chat_models.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/@langchain/core/output_parsers/openai_tools.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js\");\n/* harmony import */ var _utils_openai_format_fndef_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/openai-format-fndef.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai-format-fndef.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction extractGenericMessageCustomRole(message) {\n    if (message.role !== \"system\" &&\n        message.role !== \"assistant\" &&\n        message.role !== \"user\" &&\n        message.role !== \"function\" &&\n        message.role !== \"tool\") {\n        console.warn(`Unknown message role: ${message.role}`);\n    }\n    return message.role;\n}\nfunction messageToOpenAIRole(message) {\n    const type = message._getType();\n    switch (type) {\n        case \"system\":\n            return \"system\";\n        case \"ai\":\n            return \"assistant\";\n        case \"human\":\n            return \"user\";\n        case \"function\":\n            return \"function\";\n        case \"tool\":\n            return \"tool\";\n        case \"generic\": {\n            if (!_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage.isInstance(message))\n                throw new Error(\"Invalid generic chat message\");\n            return extractGenericMessageCustomRole(message);\n        }\n        default:\n            throw new Error(`Unknown message type: ${type}`);\n    }\n}\nfunction openAIResponseToChatMessage(message) {\n    const rawToolCalls = message.tool_calls;\n    switch (message.role) {\n        case \"assistant\": {\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const rawToolCall of rawToolCalls ?? []) {\n                try {\n                    toolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.parseToolCall)(rawToolCall, { returnId: true }));\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                }\n                catch (e) {\n                    invalidToolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.makeInvalidToolCall)(rawToolCall, e.message));\n                }\n            }\n            return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage({\n                content: message.content || \"\",\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls,\n                additional_kwargs: {\n                    function_call: message.function_call,\n                    tool_calls: rawToolCalls,\n                },\n            });\n        }\n        default:\n            return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage(message.content || \"\", message.role ?? \"unknown\");\n    }\n}\nfunction _convertDeltaToMessageChunk(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndelta, defaultRole) {\n    const role = delta.role ?? defaultRole;\n    const content = delta.content ?? \"\";\n    let additional_kwargs;\n    if (delta.function_call) {\n        additional_kwargs = {\n            function_call: delta.function_call,\n        };\n    }\n    else if (delta.tool_calls) {\n        additional_kwargs = {\n            tool_calls: delta.tool_calls,\n        };\n    }\n    else {\n        additional_kwargs = {};\n    }\n    if (role === \"user\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk({ content });\n    }\n    else if (role === \"assistant\") {\n        const toolCallChunks = [];\n        if (Array.isArray(delta.tool_calls)) {\n            for (const rawToolCall of delta.tool_calls) {\n                toolCallChunks.push({\n                    name: rawToolCall.function?.name,\n                    args: rawToolCall.function?.arguments,\n                    id: rawToolCall.id,\n                    index: rawToolCall.index,\n                });\n            }\n        }\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n            content,\n            tool_call_chunks: toolCallChunks,\n            additional_kwargs,\n        });\n    }\n    else if (role === \"system\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk({ content });\n    }\n    else if (role === \"function\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk({\n            content,\n            additional_kwargs,\n            name: delta.name,\n        });\n    }\n    else if (role === \"tool\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk({\n            content,\n            additional_kwargs,\n            tool_call_id: delta.tool_call_id,\n        });\n    }\n    else {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk({ content, role });\n    }\n}\nfunction convertMessagesToOpenAIParams(messages) {\n    // TODO: Function messages do not support array content, fix cast\n    return messages.map((message) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const completionParam = {\n            role: messageToOpenAIRole(message),\n            content: message.content,\n        };\n        if (message.name != null) {\n            completionParam.name = message.name;\n        }\n        if (message.additional_kwargs.function_call != null) {\n            completionParam.function_call = message.additional_kwargs.function_call;\n        }\n        if ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isAIMessage)(message) && !!message.tool_calls?.length) {\n            completionParam.tool_calls = message.tool_calls.map(_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.convertLangChainToolCallToOpenAI);\n        }\n        else {\n            if (message.additional_kwargs.tool_calls != null) {\n                completionParam.tool_calls = message.additional_kwargs.tool_calls;\n            }\n            if (message.tool_call_id != null) {\n                completionParam.tool_call_id = message.tool_call_id;\n            }\n        }\n        return completionParam;\n    });\n}\n/**\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n * `AZURE_OPENAI_BASE_PATH` is optional and will override `AZURE_OPENAI_API_INSTANCE_NAME` if you need to use a custom endpoint.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createChatCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * // Create a new instance of ChatOpenAI with specific temperature and model name settings\n * const model = new ChatOpenAI({\n *   temperature: 0.9,\n *   model: \"ft:gpt-3.5-turbo-0613:{ORG_NAME}::{MODEL_ID}\",\n * });\n *\n * // Invoke the model with a message and await the response\n * const message = await model.invoke(\"Hi there!\");\n *\n * // Log the response to the console\n * console.log(message);\n *\n * ```\n */\nclass ChatOpenAI extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_3__.BaseChatModel {\n    static lc_name() {\n        return \"ChatOpenAI\";\n    }\n    get callKeys() {\n        return [\n            ...super.callKeys,\n            \"options\",\n            \"function_call\",\n            \"functions\",\n            \"tools\",\n            \"tool_choice\",\n            \"promptIndex\",\n            \"response_format\",\n            \"seed\",\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            apiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            apiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    configuration) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topLogprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey =\n            fields?.apiKey ??\n                fields?.openAIApiKey ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.apiKey = this.openAIApiKey;\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        this.azureADTokenProvider = fields?.azureADTokenProvider ?? undefined;\n        if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n            throw new Error(\"OpenAI or Azure OpenAI API key or Token Provider not found\");\n        }\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            fields?.azureOpenAIApiDeploymentName ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fields?.azureOpenAIBasePath ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization =\n            fields?.configuration?.organization ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fields?.model ?? fields?.modelName ?? this.model;\n        this.model = this.modelName;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.maxTokens = fields?.maxTokens;\n        this.logprobs = fields?.logprobs;\n        this.topLogprobs = fields?.topLogprobs;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stopSequences ?? fields?.stop;\n        this.stopSequences = this?.stop;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.azureOpenAIApiKey || this.azureADTokenProvider) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.apiKey = this.apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ??\n                fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ??\n                fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    getLsParams(options) {\n        const params = this.invocationParams(options);\n        return {\n            ls_provider: \"openai\",\n            ls_model_name: this.model,\n            ls_model_type: \"chat\",\n            ls_temperature: params.temperature ?? undefined,\n            ls_max_tokens: params.max_tokens ?? undefined,\n            ls_stop: options.stop,\n        };\n    }\n    bindTools(tools, kwargs) {\n        return this.bind({\n            tools: tools.map(_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__.convertToOpenAITool),\n            ...kwargs,\n        });\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        function isStructuredToolArray(tools) {\n            return (tools !== undefined &&\n                tools.every((tool) => Array.isArray(tool.lc_namespace)));\n        }\n        const params = {\n            model: this.model,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            logprobs: this.logprobs,\n            top_logprobs: this.topLogprobs,\n            n: this.n,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stopSequences,\n            user: this.user,\n            stream: this.streaming,\n            functions: options?.functions,\n            function_call: options?.function_call,\n            tools: isStructuredToolArray(options?.tools)\n                ? options?.tools.map(_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_4__.convertToOpenAITool)\n                : options?.tools,\n            tool_choice: options?.tool_choice,\n            response_format: options?.response_format,\n            seed: options?.seed,\n            ...this.modelKwargs,\n        };\n        return params;\n    }\n    /** @ignore */\n    _identifyingParams() {\n        return {\n            model_name: this.model,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    async *_streamResponseChunks(messages, options, runManager) {\n        const messagesMapped = convertMessagesToOpenAIParams(messages);\n        const params = {\n            ...this.invocationParams(options),\n            messages: messagesMapped,\n            stream: true,\n        };\n        let defaultRole;\n        const streamIterable = await this.completionWithRetry(params, options);\n        for await (const data of streamIterable) {\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const { delta } = choice;\n            if (!delta) {\n                continue;\n            }\n            const chunk = _convertDeltaToMessageChunk(delta, defaultRole);\n            defaultRole = delta.role ?? defaultRole;\n            const newTokenIndices = {\n                prompt: options.promptIndex ?? 0,\n                completion: choice.index ?? 0,\n            };\n            if (typeof chunk.content !== \"string\") {\n                console.log(\"[WARNING]: Received non-string content from OpenAI. This is currently not supported.\");\n                continue;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const generationInfo = { ...newTokenIndices };\n            if (choice.finish_reason !== undefined) {\n                generationInfo.finish_reason = choice.finish_reason;\n            }\n            if (this.logprobs) {\n                generationInfo.logprobs = choice.logprobs;\n            }\n            const generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.ChatGenerationChunk({\n                message: chunk,\n                text: chunk.content,\n                generationInfo,\n            });\n            yield generationChunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices, undefined, undefined, undefined, { chunk: generationChunk });\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    /**\n     * Get the identifying parameters for the model\n     *\n     */\n    identifyingParams() {\n        return this._identifyingParams();\n    }\n    /** @ignore */\n    async _generate(messages, options, runManager) {\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        const messagesMapped = convertMessagesToOpenAIParams(messages);\n        if (params.stream) {\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            const finalChunks = {};\n            for await (const chunk of stream) {\n                chunk.message.response_metadata = {\n                    ...chunk.generationInfo,\n                    ...chunk.message.response_metadata,\n                };\n                const index = chunk.generationInfo?.completion ?? 0;\n                if (finalChunks[index] === undefined) {\n                    finalChunks[index] = chunk;\n                }\n                else {\n                    finalChunks[index] = finalChunks[index].concat(chunk);\n                }\n            }\n            const generations = Object.entries(finalChunks)\n                .sort(([aKey], [bKey]) => parseInt(aKey, 10) - parseInt(bKey, 10))\n                .map(([_, value]) => value);\n            const { functions, function_call } = this.invocationParams(options);\n            // OpenAI does not support token usage report under stream mode,\n            // fallback to estimation.\n            const promptTokenUsage = await this.getEstimatedTokenCountFromPrompt(messages, functions, function_call);\n            const completionTokenUsage = await this.getNumTokensFromGenerations(generations);\n            tokenUsage.promptTokens = promptTokenUsage;\n            tokenUsage.completionTokens = completionTokenUsage;\n            tokenUsage.totalTokens = promptTokenUsage + completionTokenUsage;\n            return { generations, llmOutput: { estimatedTokenUsage: tokenUsage } };\n        }\n        else {\n            const data = await this.completionWithRetry({\n                ...params,\n                stream: false,\n                messages: messagesMapped,\n            }, {\n                signal: options?.signal,\n                ...options?.options,\n            });\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, } = data?.usage ?? {};\n            if (completionTokens) {\n                tokenUsage.completionTokens =\n                    (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n            const generations = [];\n            for (const part of data?.choices ?? []) {\n                const text = part.message?.content ?? \"\";\n                const generation = {\n                    text,\n                    message: openAIResponseToChatMessage(part.message ?? { role: \"assistant\" }),\n                };\n                generation.generationInfo = {\n                    ...(part.finish_reason ? { finish_reason: part.finish_reason } : {}),\n                    ...(part.logprobs ? { logprobs: part.logprobs } : {}),\n                };\n                generations.push(generation);\n            }\n            return {\n                generations,\n                llmOutput: { tokenUsage },\n            };\n        }\n    }\n    /**\n     * Estimate the number of tokens a prompt will use.\n     * Modified from: https://github.com/hmarr/openai-chat-tokens/blob/main/src/index.ts\n     */\n    async getEstimatedTokenCountFromPrompt(messages, functions, function_call) {\n        // It appears that if functions are present, the first system message is padded with a trailing newline. This\n        // was inferred by trying lots of combinations of messages and functions and seeing what the token counts were.\n        let tokens = (await this.getNumTokensFromMessages(messages)).totalCount;\n        // If there are functions, add the function definitions as they count towards token usage\n        if (functions && function_call !== \"auto\") {\n            const promptDefinitions = (0,_utils_openai_format_fndef_js__WEBPACK_IMPORTED_MODULE_11__.formatFunctionDefinitions)(functions);\n            tokens += await this.getNumTokens(promptDefinitions);\n            tokens += 9; // Add nine per completion\n        }\n        // If there's a system message _and_ functions are present, subtract four tokens. I assume this is because\n        // functions typically add a system message, but reuse the first one if it's already there. This offsets\n        // the extra 9 tokens added by the function definitions.\n        if (functions && messages.find((m) => m._getType() === \"system\")) {\n            tokens -= 4;\n        }\n        // If function_call is 'none', add one token.\n        // If it's a FunctionCall object, add 4 + the number of tokens in the function name.\n        // If it's undefined or 'auto', don't add anything.\n        if (function_call === \"none\") {\n            tokens += 1;\n        }\n        else if (typeof function_call === \"object\") {\n            tokens += (await this.getNumTokens(function_call.name)) + 4;\n        }\n        return tokens;\n    }\n    /**\n     * Estimate the number of tokens an array of generations have used.\n     */\n    async getNumTokensFromGenerations(generations) {\n        const generationUsages = await Promise.all(generations.map(async (generation) => {\n            if (generation.message.additional_kwargs?.function_call) {\n                return (await this.getNumTokensFromMessages([generation.message]))\n                    .countPerMessage[0];\n            }\n            else {\n                return await this.getNumTokens(generation.message.content);\n            }\n        }));\n        return generationUsages.reduce((a, b) => a + b, 0);\n    }\n    async getNumTokensFromMessages(messages) {\n        let totalCount = 0;\n        let tokensPerMessage = 0;\n        let tokensPerName = 0;\n        // From: https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb\n        if (this.model === \"gpt-3.5-turbo-0301\") {\n            tokensPerMessage = 4;\n            tokensPerName = -1;\n        }\n        else {\n            tokensPerMessage = 3;\n            tokensPerName = 1;\n        }\n        const countPerMessage = await Promise.all(messages.map(async (message) => {\n            const textCount = await this.getNumTokens(message.content);\n            const roleCount = await this.getNumTokens(messageToOpenAIRole(message));\n            const nameCount = message.name !== undefined\n                ? tokensPerName + (await this.getNumTokens(message.name))\n                : 0;\n            let count = textCount + tokensPerMessage + roleCount + nameCount;\n            // From: https://github.com/hmarr/openai-chat-tokens/blob/main/src/index.ts messageTokenEstimate\n            const openAIMessage = message;\n            if (openAIMessage._getType() === \"function\") {\n                count -= 2;\n            }\n            if (openAIMessage.additional_kwargs?.function_call) {\n                count += 3;\n            }\n            if (openAIMessage?.additional_kwargs.function_call?.name) {\n                count += await this.getNumTokens(openAIMessage.additional_kwargs.function_call?.name);\n            }\n            if (openAIMessage.additional_kwargs.function_call?.arguments) {\n                try {\n                    count += await this.getNumTokens(\n                    // Remove newlines and spaces\n                    JSON.stringify(JSON.parse(openAIMessage.additional_kwargs.function_call?.arguments)));\n                }\n                catch (error) {\n                    console.error(\"Error parsing function arguments\", error, JSON.stringify(openAIMessage.additional_kwargs.function_call));\n                    count += await this.getNumTokens(openAIMessage.additional_kwargs.function_call?.arguments);\n                }\n            }\n            totalCount += count;\n            return count;\n        }));\n        totalCount += 3; // every reply is primed with <|start|>assistant<|message|>\n        return { totalCount, countPerMessage };\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.chat.completions.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_10__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_9__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_12__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n    /** @ignore */\n    _combineLLMOutput(...llmOutputs) {\n        return llmOutputs.reduce((acc, llmOutput) => {\n            if (llmOutput && llmOutput.tokenUsage) {\n                acc.tokenUsage.completionTokens +=\n                    llmOutput.tokenUsage.completionTokens ?? 0;\n                acc.tokenUsage.promptTokens += llmOutput.tokenUsage.promptTokens ?? 0;\n                acc.tokenUsage.totalTokens += llmOutput.tokenUsage.totalTokens ?? 0;\n            }\n            return acc;\n        }, {\n            tokenUsage: {\n                completionTokens: 0,\n                promptTokens: 0,\n                totalTokens: 0,\n            },\n        });\n    }\n    withStructuredOutput(outputSchema, config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let schema;\n        let name;\n        let method;\n        let includeRaw;\n        if (isStructuredOutputMethodParams(outputSchema)) {\n            schema = outputSchema.schema;\n            name = outputSchema.name;\n            method = outputSchema.method;\n            includeRaw = outputSchema.includeRaw;\n        }\n        else {\n            schema = outputSchema;\n            name = config?.name;\n            method = config?.method;\n            includeRaw = config?.includeRaw;\n        }\n        let llm;\n        let outputParser;\n        if (method === \"jsonMode\") {\n            llm = this.bind({\n                response_format: { type: \"json_object\" },\n            });\n            if (isZodSchema(schema)) {\n                outputParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__.StructuredOutputParser.fromZodSchema(schema);\n            }\n            else {\n                outputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__.JsonOutputParser();\n            }\n        }\n        else {\n            let functionName = name ?? \"extract\";\n            // Is function calling\n            if (isZodSchema(schema)) {\n                const asJsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_8__.zodToJsonSchema)(schema);\n                llm = this.bind({\n                    tools: [\n                        {\n                            type: \"function\",\n                            function: {\n                                name: functionName,\n                                description: asJsonSchema.description,\n                                parameters: asJsonSchema,\n                            },\n                        },\n                    ],\n                    tool_choice: {\n                        type: \"function\",\n                        function: {\n                            name: functionName,\n                        },\n                    },\n                });\n                outputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.JsonOutputKeyToolsParser({\n                    returnSingle: true,\n                    keyName: functionName,\n                    zodSchema: schema,\n                });\n            }\n            else {\n                let openAIFunctionDefinition;\n                if (typeof schema.name === \"string\" &&\n                    typeof schema.parameters === \"object\" &&\n                    schema.parameters != null) {\n                    openAIFunctionDefinition = schema;\n                    functionName = schema.name;\n                }\n                else {\n                    functionName = schema.title ?? functionName;\n                    openAIFunctionDefinition = {\n                        name: functionName,\n                        description: schema.description ?? \"\",\n                        parameters: schema,\n                    };\n                }\n                llm = this.bind({\n                    tools: [\n                        {\n                            type: \"function\",\n                            function: openAIFunctionDefinition,\n                        },\n                    ],\n                    tool_choice: {\n                        type: \"function\",\n                        function: {\n                            name: functionName,\n                        },\n                    },\n                });\n                outputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.JsonOutputKeyToolsParser({\n                    returnSingle: true,\n                    keyName: functionName,\n                });\n            }\n        }\n        if (!includeRaw) {\n            return llm.pipe(outputParser);\n        }\n        const parserAssign = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config) => outputParser.invoke(input.raw, config),\n        });\n        const parserNone = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__.RunnablePassthrough.assign({\n            parsed: () => null,\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [parserNone],\n        });\n        return _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__.RunnableSequence.from([\n            {\n                raw: llm,\n            },\n            parsedWithFallback,\n        ]);\n    }\n}\nfunction isZodSchema(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninput) {\n    // Check for a characteristic method of Zod schemas\n    return typeof input?.parse === \"function\";\n}\nfunction isStructuredOutputMethodParams(x\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    return (x !== undefined &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof x.schema ===\n            \"object\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/embeddings.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/embeddings.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIEmbeddings: () => (/* binding */ OpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/@langchain/core/embeddings.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n/**\n * Class for generating embeddings using the OpenAI API. Extends the\n * Embeddings class and implements OpenAIEmbeddingsParams and\n * AzureOpenAIInput.\n * @example\n * ```typescript\n * // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n * const model = new OpenAIEmbeddings();\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\",\n * );\n * console.log({ res });\n *\n * ```\n */\nclass OpenAIEmbeddings extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_1__.Embeddings {\n    constructor(fields, configuration) {\n        const fieldsWithDefaults = { maxConcurrency: 2, ...fields };\n        super(fieldsWithDefaults);\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        // TODO: Update to `false` on next minor release (see: https://github.com/langchain-ai/langchainjs/pull/3612)\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * The number of dimensions the resulting output embeddings should have.\n         * Only supported in `text-embedding-3` and later models.\n         */\n        Object.defineProperty(this, \"dimensions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        let apiKey = fieldsWithDefaults?.apiKey ??\n            fieldsWithDefaults?.openAIApiKey ??\n            (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        const azureApiKey = fieldsWithDefaults?.azureOpenAIApiKey ??\n            (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        this.azureADTokenProvider = fields?.azureADTokenProvider ?? undefined;\n        if (!azureApiKey && !apiKey && !this.azureADTokenProvider) {\n            throw new Error(\"OpenAI or Azure OpenAI API key or Token Provider not found\");\n        }\n        const azureApiInstanceName = fieldsWithDefaults?.azureOpenAIApiInstanceName ??\n            (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        const azureApiDeploymentName = (fieldsWithDefaults?.azureOpenAIApiEmbeddingsDeploymentName ||\n            fieldsWithDefaults?.azureOpenAIApiDeploymentName) ??\n            ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") ||\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        const azureApiVersion = fieldsWithDefaults?.azureOpenAIApiVersion ??\n            (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fieldsWithDefaults?.azureOpenAIBasePath ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization =\n            fieldsWithDefaults?.configuration?.organization ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName =\n            fieldsWithDefaults?.model ?? fieldsWithDefaults?.modelName ?? this.model;\n        this.model = this.modelName;\n        this.batchSize =\n            fieldsWithDefaults?.batchSize ?? (azureApiKey ? 1 : this.batchSize);\n        this.stripNewLines =\n            fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n        this.timeout = fieldsWithDefaults?.timeout;\n        this.dimensions = fieldsWithDefaults?.dimensions;\n        this.azureOpenAIApiVersion = azureApiVersion;\n        this.azureOpenAIApiKey = azureApiKey;\n        this.azureOpenAIApiInstanceName = azureApiInstanceName;\n        this.azureOpenAIApiDeploymentName = azureApiDeploymentName;\n        if (this.azureOpenAIApiKey || this.azureADTokenProvider) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            apiKey = apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the OpenAI API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */\n    async embedDocuments(texts) {\n        const batches = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_2__.chunkArray)(this.stripNewLines ? texts.map((t) => t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n        const batchRequests = batches.map((batch) => {\n            const params = {\n                model: this.model,\n                input: batch,\n            };\n            if (this.dimensions) {\n                params.dimensions = this.dimensions;\n            }\n            return this.embeddingWithRetry(params);\n        });\n        const batchResponses = await Promise.all(batchRequests);\n        const embeddings = [];\n        for (let i = 0; i < batchResponses.length; i += 1) {\n            const batch = batches[i];\n            const { data: batchResponse } = batchResponses[i];\n            for (let j = 0; j < batch.length; j += 1) {\n                embeddings.push(batchResponse[j].embedding);\n            }\n        }\n        return embeddings;\n    }\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param text Document to generate an embedding for.\n     * @returns Promise that resolves to an embedding for the document.\n     */\n    async embedQuery(text) {\n        const params = {\n            model: this.model,\n            input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text,\n        };\n        if (this.dimensions) {\n            params.dimensions = this.dimensions;\n        }\n        const { data } = await this.embeddingWithRetry(params);\n        return data[0].embedding;\n    }\n    /**\n     * Private method to make a request to the OpenAI API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param request Request to send to the OpenAI API.\n     * @returns Promise that resolves to the response from the API.\n     */\n    async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_3__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_5__.OpenAI(params);\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* reexport safe */ _azure_chat_models_js__WEBPACK_IMPORTED_MODULE_2__.AzureChatOpenAI),\n/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _azure_llms_js__WEBPACK_IMPORTED_MODULE_4__.AzureOpenAI),\n/* harmony export */   AzureOpenAIEmbeddings: () => (/* reexport safe */ _azure_embeddings_js__WEBPACK_IMPORTED_MODULE_5__.AzureOpenAIEmbeddings),\n/* harmony export */   ChatOpenAI: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_1__.ChatOpenAI),\n/* harmony export */   DallEAPIWrapper: () => (/* reexport safe */ _tools_index_js__WEBPACK_IMPORTED_MODULE_10__.DallEAPIWrapper),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_3__.OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_3__.OpenAIChat),\n/* harmony export */   OpenAIClient: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_6__.OpenAIEmbeddings),\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_8__.formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_8__.formatToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_8__.formatToOpenAITool),\n/* harmony export */   getEndpoint: () => (/* reexport safe */ _utils_azure_js__WEBPACK_IMPORTED_MODULE_9__.getEndpoint),\n/* harmony export */   messageToOpenAIRole: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_1__.messageToOpenAIRole),\n/* harmony export */   toFile: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_0__.toFile),\n/* harmony export */   wrapOpenAIClientError: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_8__.wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/chat_models.js\");\n/* harmony import */ var _azure_chat_models_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./azure/chat_models.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/chat_models.js\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./llms.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/llms.js\");\n/* harmony import */ var _azure_llms_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./azure/llms.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/llms.js\");\n/* harmony import */ var _azure_embeddings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./azure/embeddings.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/azure/embeddings.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/embeddings.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/types.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _tools_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./tools/index.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/tools/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RDtBQUN2QjtBQUNNO0FBQ2I7QUFDTTtBQUNNO0FBQ047QUFDTDtBQUNPO0FBQ0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvaW5kZXguanM/Yzc0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBPcGVuQUkgYXMgT3BlbkFJQ2xpZW50LCB0b0ZpbGUgfSBmcm9tIFwib3BlbmFpXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jaGF0X21vZGVscy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYXp1cmUvY2hhdF9tb2RlbHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xsbXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F6dXJlL2xsbXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F6dXJlL2VtYmVkZGluZ3MuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VtYmVkZGluZ3MuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9vcGVuYWkuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL2F6dXJlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b29scy9pbmRleC5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/legacy.js":
/*!******************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/legacy.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIChat: () => (/* binding */ OpenAIChat)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n/**\n * @deprecated For legacy compatibility. Use ChatOpenAI instead.\n *\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n *\n * @augments BaseLLM\n * @augments OpenAIInput\n * @augments AzureOpenAIChatInput\n * @example\n * ```typescript\n * const model = new OpenAIChat({\n *   prefixMessages: [\n *     {\n *       role: \"system\",\n *       content: \"You are a helpful assistant that answers in pirate language\",\n *     },\n *   ],\n *   maxTokens: 50,\n * });\n *\n * const res = await model.invoke(\n *   \"What would be a good company name for a company that makes colorful socks?\"\n * );\n * console.log({ res });\n * ```\n */\nclass OpenAIChat extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_2__.LLM {\n    static lc_name() {\n        return \"OpenAIChat\";\n    }\n    get callKeys() {\n        return [...super.callKeys, \"options\", \"promptIndex\"];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    configuration) {\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"prefixMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey =\n            fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            (fields?.azureOpenAIApiCompletionsDeploymentName ||\n                fields?.azureOpenAIApiDeploymentName) ??\n                ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") ||\n                    (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fields?.azureOpenAIBasePath ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization =\n            fields?.configuration?.organization ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.prefixMessages = fields?.prefixMessages ?? this.prefixMessages;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.maxTokens = fields?.maxTokens;\n        this.stop = fields?.stop;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.n > 1) {\n            throw new Error(\"Cannot use n > 1 in OpenAIChat LLM. Use ChatOpenAI Chat Model instead.\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.openAIApiKey = this.openAIApiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ??\n                fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ??\n                fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            logit_bias: this.logitBias,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            stop: options?.stop ?? this.stop,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs,\n        };\n    }\n    /** @ignore */\n    _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */\n    identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Formats the messages for the OpenAI API.\n     * @param prompt The prompt to be formatted.\n     * @returns Array of formatted messages.\n     */\n    formatMessages(prompt) {\n        const message = {\n            role: \"user\",\n            content: prompt,\n        };\n        return this.prefixMessages ? [...this.prefixMessages, message] : [message];\n    }\n    async *_streamResponseChunks(prompt, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            messages: this.formatMessages(prompt),\n            stream: true,\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream) {\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const { delta } = choice;\n            const generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk({\n                text: delta.content ?? \"\",\n            });\n            yield generationChunk;\n            const newTokenIndices = {\n                prompt: options.promptIndex ?? 0,\n                completion: choice.index ?? 0,\n            };\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices);\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    /** @ignore */\n    async _call(prompt, options, runManager) {\n        const params = this.invocationParams(options);\n        if (params.stream) {\n            const stream = await this._streamResponseChunks(prompt, options, runManager);\n            let finalChunk;\n            for await (const chunk of stream) {\n                if (finalChunk === undefined) {\n                    finalChunk = chunk;\n                }\n                else {\n                    finalChunk = finalChunk.concat(chunk);\n                }\n            }\n            return finalChunk?.text ?? \"\";\n        }\n        else {\n            const response = await this.completionWithRetry({\n                ...params,\n                stream: false,\n                messages: this.formatMessages(prompt),\n            }, {\n                signal: options.signal,\n                ...options.options,\n            });\n            return response?.choices[0]?.message?.content ?? \"\";\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.chat.completions.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    /** @ignore */\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_3__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_5__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/legacy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/llms.js":
/*!****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/llms.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_6__.OpenAIChat)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./legacy.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/legacy.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * const model = new OpenAI({\n *   modelName: \"gpt-4\",\n *   temperature: 0.7,\n *   maxTokens: 1000,\n *   maxRetries: 5,\n * });\n *\n * const res = await model.invoke(\n *   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n * );\n * console.log({ res });\n * ```\n */\nclass OpenAI extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_3__.BaseLLM {\n    static lc_name() {\n        return \"OpenAI\";\n    }\n    get callKeys() {\n        return [...super.callKeys, \"options\"];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            apiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            apiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    configuration) {\n        let model = fields?.model ?? fields?.modelName;\n        if ((model?.startsWith(\"gpt-3.5-turbo\") || model?.startsWith(\"gpt-4\")) &&\n            !model?.includes(\"-instruct\")) {\n            // eslint-disable-next-line no-constructor-return\n            return new _legacy_js__WEBPACK_IMPORTED_MODULE_6__.OpenAIChat(fields, configuration);\n        }\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 256\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"bestOf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo-instruct\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo-instruct\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 20\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        model = model ?? this.model;\n        this.openAIApiKey =\n            fields?.apiKey ??\n                fields?.openAIApiKey ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.apiKey = this.openAIApiKey;\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        this.azureADTokenProvider = fields?.azureADTokenProvider ?? undefined;\n        if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n            throw new Error(\"OpenAI or Azure OpenAI API key or Token Provider not found\");\n        }\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            (fields?.azureOpenAIApiCompletionsDeploymentName ||\n                fields?.azureOpenAIApiDeploymentName) ??\n                ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") ||\n                    (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fields?.azureOpenAIBasePath ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization =\n            fields?.configuration?.organization ??\n                (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = model;\n        this.model = model;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.bestOf = fields?.bestOf ?? this.bestOf;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stopSequences ?? fields?.stop;\n        this.stopSequences = fields?.stopSequences;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.bestOf && this.bestOf > 1) {\n            throw new Error(\"Cannot stream results when bestOf > 1\");\n        }\n        if (this.azureOpenAIApiKey || this.azureADTokenProvider) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.apiKey = this.apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ??\n                fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ??\n                fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        return {\n            model: this.model,\n            temperature: this.temperature,\n            max_tokens: this.maxTokens,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            best_of: this.bestOf,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stopSequences,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs,\n        };\n    }\n    /** @ignore */\n    _identifyingParams() {\n        return {\n            model_name: this.model,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */\n    identifyingParams() {\n        return this._identifyingParams();\n    }\n    /**\n     * Call out to OpenAI's endpoint with k unique prompts\n     *\n     * @param [prompts] - The prompts to pass into the model.\n     * @param [options] - Optional list of stop words to use when generating.\n     * @param [runManager] - Optional callback manager to use when generating.\n     *\n     * @returns The full LLM output.\n     *\n     * @example\n     * ```ts\n     * import { OpenAI } from \"langchain/llms/openai\";\n     * const openai = new OpenAI();\n     * const response = await openai.generate([\"Tell me a joke.\"]);\n     * ```\n     */\n    async _generate(prompts, options, runManager) {\n        const subPrompts = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__.chunkArray)(prompts, this.batchSize);\n        const choices = [];\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        if (params.max_tokens === -1) {\n            if (prompts.length !== 1) {\n                throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n            }\n            params.max_tokens = await (0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__.calculateMaxTokens)({\n                prompt: prompts[0],\n                // Cast here to allow for other models that may not fit the union\n                modelName: this.model,\n            });\n        }\n        for (let i = 0; i < subPrompts.length; i += 1) {\n            const data = params.stream\n                ? await (async () => {\n                    const choices = [];\n                    let response;\n                    const stream = await this.completionWithRetry({\n                        ...params,\n                        stream: true,\n                        prompt: subPrompts[i],\n                    }, options);\n                    for await (const message of stream) {\n                        // on the first message set the response properties\n                        if (!response) {\n                            response = {\n                                id: message.id,\n                                object: message.object,\n                                created: message.created,\n                                model: message.model,\n                            };\n                        }\n                        // on all messages, update choice\n                        for (const part of message.choices) {\n                            if (!choices[part.index]) {\n                                choices[part.index] = part;\n                            }\n                            else {\n                                const choice = choices[part.index];\n                                choice.text += part.text;\n                                choice.finish_reason = part.finish_reason;\n                                choice.logprobs = part.logprobs;\n                            }\n                            void runManager?.handleLLMNewToken(part.text, {\n                                prompt: Math.floor(part.index / this.n),\n                                completion: part.index % this.n,\n                            });\n                        }\n                    }\n                    if (options.signal?.aborted) {\n                        throw new Error(\"AbortError\");\n                    }\n                    return { ...response, choices };\n                })()\n                : await this.completionWithRetry({\n                    ...params,\n                    stream: false,\n                    prompt: subPrompts[i],\n                }, {\n                    signal: options.signal,\n                    ...options.options,\n                });\n            choices.push(...data.choices);\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, } = data.usage\n                ? data.usage\n                : {\n                    completion_tokens: undefined,\n                    prompt_tokens: undefined,\n                    total_tokens: undefined,\n                };\n            if (completionTokens) {\n                tokenUsage.completionTokens =\n                    (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n        }\n        const generations = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__.chunkArray)(choices, this.n).map((promptChoices) => promptChoices.map((choice) => ({\n            text: choice.text ?? \"\",\n            generationInfo: {\n                finishReason: choice.finish_reason,\n                logprobs: choice.logprobs,\n            },\n        })));\n        return {\n            generations,\n            llmOutput: { tokenUsage },\n        };\n    }\n    // TODO(jacoblee): Refactor with _generate(..., {stream: true}) implementation?\n    async *_streamResponseChunks(input, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            prompt: input,\n            stream: true,\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream) {\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const chunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.GenerationChunk({\n                text: choice.text,\n                generationInfo: {\n                    finishReason: choice.finish_reason,\n                },\n            });\n            yield chunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.completions.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_7__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    /**\n     * Calls the OpenAI API with retry logic in case of failures.\n     * @param request The request to send to the OpenAI API.\n     * @param options Optional configuration for the API call.\n     * @returns The response from the OpenAI API.\n     */\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_5__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_8__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/tools/dalle.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/tools/dalle.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DallEAPIWrapper: () => (/* binding */ DallEAPIWrapper)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/tools */ \"(rsc)/./node_modules/@langchain/core/tools.js\");\n\n\n\n/**\n * A tool for generating images with Open AIs Dall-E 2 or 3 API.\n */\nclass DallEAPIWrapper extends _langchain_core_tools__WEBPACK_IMPORTED_MODULE_1__.Tool {\n    static lc_name() {\n        return \"DallEAPIWrapper\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"dalle_api_wrapper\"\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"A wrapper around OpenAI DALL-E API. Useful for when you need to generate images from a text description. Input should be an image description.\"\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"dall-e-3\"\n        });\n        Object.defineProperty(this, \"style\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"vivid\"\n        });\n        Object.defineProperty(this, \"quality\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"standard\"\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"1024x1024\"\n        });\n        Object.defineProperty(this, \"responseFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"url\"\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const openAIApiKey = fields?.apiKey ??\n            fields?.openAIApiKey ??\n            (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        const organization = fields?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        const clientConfig = {\n            apiKey: openAIApiKey,\n            organization,\n            dangerouslyAllowBrowser: true,\n        };\n        this.client = new openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI(clientConfig);\n        this.model = fields?.model ?? fields?.modelName ?? this.model;\n        this.style = fields?.style ?? this.style;\n        this.quality = fields?.quality ?? this.quality;\n        this.n = fields?.n ?? this.n;\n        this.size = fields?.size ?? this.size;\n        this.responseFormat = fields?.responseFormat ?? this.responseFormat;\n        this.user = fields?.user;\n    }\n    /** @ignore */\n    async _call(input) {\n        const response = await this.client.images.generate({\n            model: this.model,\n            prompt: input,\n            n: this.n,\n            size: this.size,\n            response_format: this.responseFormat,\n            style: this.style,\n            quality: this.quality,\n            user: this.user,\n        });\n        let data = \"\";\n        if (this.responseFormat === \"url\") {\n            [data] = response.data\n                .map((item) => item.url)\n                .filter((url) => url !== \"undefined\");\n        }\n        else {\n            [data] = response.data\n                .map((item) => item.b64_json)\n                .filter((b64_json) => b64_json !== \"undefined\");\n        }\n        return data;\n    }\n}\nObject.defineProperty(DallEAPIWrapper, \"toolName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"dalle_api_wrapper\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3Rvb2xzL2RhbGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUU7QUFDbkI7QUFDSDtBQUM3QztBQUNBO0FBQ0E7QUFDTyw4QkFBOEIsdURBQUk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFlBQVksaUZBQXNCO0FBQ2xDLHFEQUFxRCxpRkFBc0I7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwwQ0FBWTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3Rvb2xzL2RhbGxlLmpzP2ZjZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvZW52XCI7XG5pbXBvcnQgeyBPcGVuQUkgYXMgT3BlbkFJQ2xpZW50IH0gZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IHsgVG9vbCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdG9vbHNcIjtcbi8qKlxuICogQSB0b29sIGZvciBnZW5lcmF0aW5nIGltYWdlcyB3aXRoIE9wZW4gQUlzIERhbGwtRSAyIG9yIDMgQVBJLlxuICovXG5leHBvcnQgY2xhc3MgRGFsbEVBUElXcmFwcGVyIGV4dGVuZHMgVG9vbCB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkRhbGxFQVBJV3JhcHBlclwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJkYWxsZV9hcGlfd3JhcHBlclwiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZXNjcmlwdGlvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJBIHdyYXBwZXIgYXJvdW5kIE9wZW5BSSBEQUxMLUUgQVBJLiBVc2VmdWwgZm9yIHdoZW4geW91IG5lZWQgdG8gZ2VuZXJhdGUgaW1hZ2VzIGZyb20gYSB0ZXh0IGRlc2NyaXB0aW9uLiBJbnB1dCBzaG91bGQgYmUgYW4gaW1hZ2UgZGVzY3JpcHRpb24uXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNsaWVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtb2RlbFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJkYWxsLWUtM1wiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdHlsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJ2aXZpZFwiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJxdWFsaXR5XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcInN0YW5kYXJkXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDFcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNpemVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwiMTAyNHgxMDI0XCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlc3BvbnNlRm9ybWF0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcInVybFwiXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1c2VyXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG9wZW5BSUFwaUtleSA9IGZpZWxkcz8uYXBpS2V5ID8/XG4gICAgICAgICAgICBmaWVsZHM/Lm9wZW5BSUFwaUtleSA/P1xuICAgICAgICAgICAgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIk9QRU5BSV9BUElfS0VZXCIpO1xuICAgICAgICBjb25zdCBvcmdhbml6YXRpb24gPSBmaWVsZHM/Lm9yZ2FuaXphdGlvbiA/PyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiT1BFTkFJX09SR0FOSVpBVElPTlwiKTtcbiAgICAgICAgY29uc3QgY2xpZW50Q29uZmlnID0ge1xuICAgICAgICAgICAgYXBpS2V5OiBvcGVuQUlBcGlLZXksXG4gICAgICAgICAgICBvcmdhbml6YXRpb24sXG4gICAgICAgICAgICBkYW5nZXJvdXNseUFsbG93QnJvd3NlcjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgT3BlbkFJQ2xpZW50KGNsaWVudENvbmZpZyk7XG4gICAgICAgIHRoaXMubW9kZWwgPSBmaWVsZHM/Lm1vZGVsID8/IGZpZWxkcz8ubW9kZWxOYW1lID8/IHRoaXMubW9kZWw7XG4gICAgICAgIHRoaXMuc3R5bGUgPSBmaWVsZHM/LnN0eWxlID8/IHRoaXMuc3R5bGU7XG4gICAgICAgIHRoaXMucXVhbGl0eSA9IGZpZWxkcz8ucXVhbGl0eSA/PyB0aGlzLnF1YWxpdHk7XG4gICAgICAgIHRoaXMubiA9IGZpZWxkcz8ubiA/PyB0aGlzLm47XG4gICAgICAgIHRoaXMuc2l6ZSA9IGZpZWxkcz8uc2l6ZSA/PyB0aGlzLnNpemU7XG4gICAgICAgIHRoaXMucmVzcG9uc2VGb3JtYXQgPSBmaWVsZHM/LnJlc3BvbnNlRm9ybWF0ID8/IHRoaXMucmVzcG9uc2VGb3JtYXQ7XG4gICAgICAgIHRoaXMudXNlciA9IGZpZWxkcz8udXNlcjtcbiAgICB9XG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICBhc3luYyBfY2FsbChpbnB1dCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmltYWdlcy5nZW5lcmF0ZSh7XG4gICAgICAgICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgICAgICAgIHByb21wdDogaW5wdXQsXG4gICAgICAgICAgICBuOiB0aGlzLm4sXG4gICAgICAgICAgICBzaXplOiB0aGlzLnNpemUsXG4gICAgICAgICAgICByZXNwb25zZV9mb3JtYXQ6IHRoaXMucmVzcG9uc2VGb3JtYXQsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5zdHlsZSxcbiAgICAgICAgICAgIHF1YWxpdHk6IHRoaXMucXVhbGl0eSxcbiAgICAgICAgICAgIHVzZXI6IHRoaXMudXNlcixcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBkYXRhID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMucmVzcG9uc2VGb3JtYXQgPT09IFwidXJsXCIpIHtcbiAgICAgICAgICAgIFtkYXRhXSA9IHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgICAgICAubWFwKChpdGVtKSA9PiBpdGVtLnVybClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh1cmwpID0+IHVybCAhPT0gXCJ1bmRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBbZGF0YV0gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5iNjRfanNvbilcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChiNjRfanNvbikgPT4gYjY0X2pzb24gIT09IFwidW5kZWZpbmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYWxsRUFQSVdyYXBwZXIsIFwidG9vbE5hbWVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBcImRhbGxlX2FwaV93cmFwcGVyXCJcbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/tools/dalle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/tools/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/tools/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DallEAPIWrapper: () => (/* reexport safe */ _dalle_js__WEBPACK_IMPORTED_MODULE_0__.DallEAPIWrapper)\n/* harmony export */ });\n/* harmony import */ var _dalle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dalle.js */ \"(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/tools/dalle.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3Rvb2xzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktY29tcGFuaW9uLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC90b29scy9pbmRleC5qcz8xNWY1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2RhbGxlLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/tools/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/types.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/types.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7QUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdHlwZXMuanM/YTU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge307XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEndpoint: () => (/* binding */ getEndpoint)\n/* harmony export */ });\n/**\n * This function generates an endpoint URL for (Azure) OpenAI\n * based on the configuration parameters provided.\n *\n * @param {OpenAIEndpointConfig} config - The configuration object for the (Azure) endpoint.\n *\n * @property {string} config.azureOpenAIApiDeploymentName - The deployment name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiInstanceName - The instance name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiKey - The API Key for Azure OpenAI.\n * @property {string} config.azureOpenAIBasePath - The base path for Azure OpenAI.\n * @property {string} config.baseURL - Some other custom base path URL.\n *\n * The function operates as follows:\n * - If both `azureOpenAIBasePath` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`).\n * - If `azureOpenAIApiKey` is provided, it checks for `azureOpenAIApiInstanceName` and `azureOpenAIApiDeploymentName` and throws an error if any of these is missing. If both are provided, it generates an URL incorporating these parameters.\n * - If none of the above conditions are met, return any custom `baseURL`.\n * - The function returns the generated URL as a string, or undefined if no custom paths are specified.\n *\n * @throws Will throw an error if the necessary parameters for generating the URL are missing.\n *\n * @returns {string | undefined} The generated (Azure) OpenAI endpoint URL.\n */\nfunction getEndpoint(config) {\n    const { azureOpenAIApiDeploymentName, azureOpenAIApiInstanceName, azureOpenAIApiKey, azureOpenAIBasePath, baseURL, azureADTokenProvider, } = config;\n    if ((azureOpenAIApiKey || azureADTokenProvider) &&\n        azureOpenAIBasePath &&\n        azureOpenAIApiDeploymentName) {\n        return `${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`;\n    }\n    if (azureOpenAIApiKey || azureADTokenProvider) {\n        if (!azureOpenAIApiInstanceName) {\n            throw new Error(\"azureOpenAIApiInstanceName is required when using azureOpenAIApiKey\");\n        }\n        if (!azureOpenAIApiDeploymentName) {\n            throw new Error(\"azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey\");\n        }\n        return `https://${azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${azureOpenAIApiDeploymentName}`;\n    }\n    return baseURL;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3V0aWxzL2F6dXJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0Esb0tBQW9LLG9CQUFvQixHQUFHLDZCQUE2QjtBQUN4TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9CQUFvQjtBQUNqQztBQUNPO0FBQ1AsWUFBWSxtSUFBbUk7QUFDL0k7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQixHQUFHLDZCQUE2QjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJCQUEyQix1Q0FBdUMsNkJBQTZCO0FBQ3pIO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvYXp1cmUuanM/ODE5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGFuIGVuZHBvaW50IFVSTCBmb3IgKEF6dXJlKSBPcGVuQUlcbiAqIGJhc2VkIG9uIHRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHtPcGVuQUlFbmRwb2ludENvbmZpZ30gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGUgKEF6dXJlKSBlbmRwb2ludC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUgLSBUaGUgZGVwbG95bWVudCBuYW1lIG9mIEF6dXJlIE9wZW5BSS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUgLSBUaGUgaW5zdGFuY2UgbmFtZSBvZiBBenVyZSBPcGVuQUkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQXBpS2V5IC0gVGhlIEFQSSBLZXkgZm9yIEF6dXJlIE9wZW5BSS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYXp1cmVPcGVuQUlCYXNlUGF0aCAtIFRoZSBiYXNlIHBhdGggZm9yIEF6dXJlIE9wZW5BSS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYmFzZVVSTCAtIFNvbWUgb3RoZXIgY3VzdG9tIGJhc2UgcGF0aCBVUkwuXG4gKlxuICogVGhlIGZ1bmN0aW9uIG9wZXJhdGVzIGFzIGZvbGxvd3M6XG4gKiAtIElmIGJvdGggYGF6dXJlT3BlbkFJQmFzZVBhdGhgIGFuZCBgYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZWAgKHBsdXMgYGF6dXJlT3BlbkFJQXBpS2V5YCkgYXJlIHByb3ZpZGVkLCBpdCByZXR1cm5zIGFuIFVSTCBjb21iaW5pbmcgdGhlc2UgdHdvIHBhcmFtZXRlcnMgKGAke2F6dXJlT3BlbkFJQmFzZVBhdGh9LyR7YXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZX1gKS5cbiAqIC0gSWYgYGF6dXJlT3BlbkFJQXBpS2V5YCBpcyBwcm92aWRlZCwgaXQgY2hlY2tzIGZvciBgYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWVgIGFuZCBgYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZWAgYW5kIHRocm93cyBhbiBlcnJvciBpZiBhbnkgb2YgdGhlc2UgaXMgbWlzc2luZy4gSWYgYm90aCBhcmUgcHJvdmlkZWQsIGl0IGdlbmVyYXRlcyBhbiBVUkwgaW5jb3Jwb3JhdGluZyB0aGVzZSBwYXJhbWV0ZXJzLlxuICogLSBJZiBub25lIG9mIHRoZSBhYm92ZSBjb25kaXRpb25zIGFyZSBtZXQsIHJldHVybiBhbnkgY3VzdG9tIGBiYXNlVVJMYC5cbiAqIC0gVGhlIGZ1bmN0aW9uIHJldHVybnMgdGhlIGdlbmVyYXRlZCBVUkwgYXMgYSBzdHJpbmcsIG9yIHVuZGVmaW5lZCBpZiBubyBjdXN0b20gcGF0aHMgYXJlIHNwZWNpZmllZC5cbiAqXG4gKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIG5lY2Vzc2FyeSBwYXJhbWV0ZXJzIGZvciBnZW5lcmF0aW5nIHRoZSBVUkwgYXJlIG1pc3NpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH0gVGhlIGdlbmVyYXRlZCAoQXp1cmUpIE9wZW5BSSBlbmRwb2ludCBVUkwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmRwb2ludChjb25maWcpIHtcbiAgICBjb25zdCB7IGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUsIGF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lLCBhenVyZU9wZW5BSUFwaUtleSwgYXp1cmVPcGVuQUlCYXNlUGF0aCwgYmFzZVVSTCwgYXp1cmVBRFRva2VuUHJvdmlkZXIsIH0gPSBjb25maWc7XG4gICAgaWYgKChhenVyZU9wZW5BSUFwaUtleSB8fCBhenVyZUFEVG9rZW5Qcm92aWRlcikgJiZcbiAgICAgICAgYXp1cmVPcGVuQUlCYXNlUGF0aCAmJlxuICAgICAgICBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBgJHthenVyZU9wZW5BSUJhc2VQYXRofS8ke2F6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWV9YDtcbiAgICB9XG4gICAgaWYgKGF6dXJlT3BlbkFJQXBpS2V5IHx8IGF6dXJlQURUb2tlblByb3ZpZGVyKSB7XG4gICAgICAgIGlmICghYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lIGlzIHJlcXVpcmVkIHdoZW4gdXNpbmcgYXp1cmVPcGVuQUlBcGlLZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyIHdoZW4gdXNpbmcgYXp1cmVPcGVuQUlBcGlLZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7YXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWV9Lm9wZW5haS5henVyZS5jb20vb3BlbmFpL2RlcGxveW1lbnRzLyR7YXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZX1gO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZVVSTDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/azure.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai-format-fndef.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai-format-fndef.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatFunctionDefinitions: () => (/* binding */ formatFunctionDefinitions)\n/* harmony export */ });\nfunction isAnyOfProp(prop) {\n    return (prop.anyOf !== undefined &&\n        Array.isArray(prop.anyOf));\n}\n// When OpenAI use functions in the prompt, they format them as TypeScript definitions rather than OpenAPI JSON schemas.\n// This function converts the JSON schemas into TypeScript definitions.\nfunction formatFunctionDefinitions(functions) {\n    const lines = [\"namespace functions {\", \"\"];\n    for (const f of functions) {\n        if (f.description) {\n            lines.push(`// ${f.description}`);\n        }\n        if (Object.keys(f.parameters.properties ?? {}).length > 0) {\n            lines.push(`type ${f.name} = (_: {`);\n            lines.push(formatObjectProperties(f.parameters, 0));\n            lines.push(\"}) => any;\");\n        }\n        else {\n            lines.push(`type ${f.name} = () => any;`);\n        }\n        lines.push(\"\");\n    }\n    lines.push(\"} // namespace functions\");\n    return lines.join(\"\\n\");\n}\n// Format just the properties of an object (not including the surrounding braces)\nfunction formatObjectProperties(obj, indent) {\n    const lines = [];\n    for (const [name, param] of Object.entries(obj.properties ?? {})) {\n        if (param.description && indent < 2) {\n            lines.push(`// ${param.description}`);\n        }\n        if (obj.required?.includes(name)) {\n            lines.push(`${name}: ${formatType(param, indent)},`);\n        }\n        else {\n            lines.push(`${name}?: ${formatType(param, indent)},`);\n        }\n    }\n    return lines.map((line) => \" \".repeat(indent) + line).join(\"\\n\");\n}\n// Format a single property type\nfunction formatType(param, indent) {\n    if (isAnyOfProp(param)) {\n        return param.anyOf.map((v) => formatType(v, indent)).join(\" | \");\n    }\n    switch (param.type) {\n        case \"string\":\n            if (param.enum) {\n                return param.enum.map((v) => `\"${v}\"`).join(\" | \");\n            }\n            return \"string\";\n        case \"number\":\n            if (param.enum) {\n                return param.enum.map((v) => `${v}`).join(\" | \");\n            }\n            return \"number\";\n        case \"integer\":\n            if (param.enum) {\n                return param.enum.map((v) => `${v}`).join(\" | \");\n            }\n            return \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"null\":\n            return \"null\";\n        case \"object\":\n            return [\"{\", formatObjectProperties(param, indent + 2), \"}\"].join(\"\\n\");\n        case \"array\":\n            if (param.items) {\n                return `${formatType(param.items, indent)}[]`;\n            }\n            return \"any[]\";\n        default:\n            return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3V0aWxzL29wZW5haS1mb3JtYXQtZm5kZWYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQSw2QkFBNkIsY0FBYztBQUMzQztBQUNBLHFEQUFxRDtBQUNyRCwrQkFBK0IsUUFBUSxPQUFPO0FBQzlDO0FBQ0EseUJBQXlCLFNBQVM7QUFDbEM7QUFDQTtBQUNBLCtCQUErQixRQUFRLFlBQVk7QUFDbkQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQSw2QkFBNkIsa0JBQWtCO0FBQy9DO0FBQ0E7QUFDQSwwQkFBMEIsS0FBSyxJQUFJLDBCQUEwQjtBQUM3RDtBQUNBO0FBQ0EsMEJBQTBCLEtBQUssS0FBSywwQkFBMEI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELEVBQUU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsRUFBRTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxFQUFFO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdEQUFnRDtBQUN0RTtBQUNBO0FBQ0EsMEJBQTBCLGdDQUFnQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1jb21wYW5pb24vLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3V0aWxzL29wZW5haS1mb3JtYXQtZm5kZWYuanM/MzVjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc0FueU9mUHJvcChwcm9wKSB7XG4gICAgcmV0dXJuIChwcm9wLmFueU9mICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShwcm9wLmFueU9mKSk7XG59XG4vLyBXaGVuIE9wZW5BSSB1c2UgZnVuY3Rpb25zIGluIHRoZSBwcm9tcHQsIHRoZXkgZm9ybWF0IHRoZW0gYXMgVHlwZVNjcmlwdCBkZWZpbml0aW9ucyByYXRoZXIgdGhhbiBPcGVuQVBJIEpTT04gc2NoZW1hcy5cbi8vIFRoaXMgZnVuY3Rpb24gY29udmVydHMgdGhlIEpTT04gc2NoZW1hcyBpbnRvIFR5cGVTY3JpcHQgZGVmaW5pdGlvbnMuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RnVuY3Rpb25EZWZpbml0aW9ucyhmdW5jdGlvbnMpIHtcbiAgICBjb25zdCBsaW5lcyA9IFtcIm5hbWVzcGFjZSBmdW5jdGlvbnMge1wiLCBcIlwiXTtcbiAgICBmb3IgKGNvbnN0IGYgb2YgZnVuY3Rpb25zKSB7XG4gICAgICAgIGlmIChmLmRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGAvLyAke2YuZGVzY3JpcHRpb259YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKGYucGFyYW1ldGVycy5wcm9wZXJ0aWVzID8/IHt9KS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGB0eXBlICR7Zi5uYW1lfSA9IChfOiB7YCk7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGZvcm1hdE9iamVjdFByb3BlcnRpZXMoZi5wYXJhbWV0ZXJzLCAwKSk7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKFwifSkgPT4gYW55O1wiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYHR5cGUgJHtmLm5hbWV9ID0gKCkgPT4gYW55O2ApO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVzLnB1c2goXCJcIik7XG4gICAgfVxuICAgIGxpbmVzLnB1c2goXCJ9IC8vIG5hbWVzcGFjZSBmdW5jdGlvbnNcIik7XG4gICAgcmV0dXJuIGxpbmVzLmpvaW4oXCJcXG5cIik7XG59XG4vLyBGb3JtYXQganVzdCB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgKG5vdCBpbmNsdWRpbmcgdGhlIHN1cnJvdW5kaW5nIGJyYWNlcylcbmZ1bmN0aW9uIGZvcm1hdE9iamVjdFByb3BlcnRpZXMob2JqLCBpbmRlbnQpIHtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGZvciAoY29uc3QgW25hbWUsIHBhcmFtXSBvZiBPYmplY3QuZW50cmllcyhvYmoucHJvcGVydGllcyA/PyB7fSkpIHtcbiAgICAgICAgaWYgKHBhcmFtLmRlc2NyaXB0aW9uICYmIGluZGVudCA8IDIpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYC8vICR7cGFyYW0uZGVzY3JpcHRpb259YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5yZXF1aXJlZD8uaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYCR7bmFtZX06ICR7Zm9ybWF0VHlwZShwYXJhbSwgaW5kZW50KX0sYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGAke25hbWV9PzogJHtmb3JtYXRUeXBlKHBhcmFtLCBpbmRlbnQpfSxgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGluZXMubWFwKChsaW5lKSA9PiBcIiBcIi5yZXBlYXQoaW5kZW50KSArIGxpbmUpLmpvaW4oXCJcXG5cIik7XG59XG4vLyBGb3JtYXQgYSBzaW5nbGUgcHJvcGVydHkgdHlwZVxuZnVuY3Rpb24gZm9ybWF0VHlwZShwYXJhbSwgaW5kZW50KSB7XG4gICAgaWYgKGlzQW55T2ZQcm9wKHBhcmFtKSkge1xuICAgICAgICByZXR1cm4gcGFyYW0uYW55T2YubWFwKCh2KSA9PiBmb3JtYXRUeXBlKHYsIGluZGVudCkpLmpvaW4oXCIgfCBcIik7XG4gICAgfVxuICAgIHN3aXRjaCAocGFyYW0udHlwZSkge1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICBpZiAocGFyYW0uZW51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbS5lbnVtLm1hcCgodikgPT4gYFwiJHt2fVwiYCkuam9pbihcIiB8IFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBpZiAocGFyYW0uZW51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbS5lbnVtLm1hcCgodikgPT4gYCR7dn1gKS5qb2luKFwiIHwgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgIGNhc2UgXCJpbnRlZ2VyXCI6XG4gICAgICAgICAgICBpZiAocGFyYW0uZW51bSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbS5lbnVtLm1hcCgodikgPT4gYCR7dn1gKS5qb2luKFwiIHwgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJib29sZWFuXCI7XG4gICAgICAgIGNhc2UgXCJudWxsXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgIHJldHVybiBbXCJ7XCIsIGZvcm1hdE9iamVjdFByb3BlcnRpZXMocGFyYW0sIGluZGVudCArIDIpLCBcIn1cIl0uam9pbihcIlxcblwiKTtcbiAgICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgICAgICBpZiAocGFyYW0uaXRlbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7Zm9ybWF0VHlwZShwYXJhbS5pdGVtcywgaW5kZW50KX1bXWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJhbnlbXVwiO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai-format-fndef.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* binding */ formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__.convertToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__.convertToOpenAITool),\n/* harmony export */   wrapOpenAIClientError: () => (/* binding */ wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapOpenAIClientError(e) {\n    let error;\n    if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_2__.APIConnectionTimeoutError.name) {\n        error = new Error(e.message);\n        error.name = \"TimeoutError\";\n    }\n    else if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError.name) {\n        error = new Error(e.message);\n        error.name = \"AbortError\";\n    }\n    else {\n        error = e;\n    }\n    return error;\n}\n\nfunction formatToOpenAIAssistantTool(tool) {\n    return {\n        type: \"function\",\n        function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(tool.schema),\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3V0aWxzL29wZW5haS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXNFO0FBQ2pCO0FBQ2tEO0FBQ3ZHO0FBQ087QUFDUDtBQUNBLCtCQUErQiw2REFBeUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHFEQUFpQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lHO0FBQ2xHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtRUFBZTtBQUN2QyxTQUFTO0FBQ1Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWNvbXBhbmlvbi8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvb3BlbmFpLmpzPzNjMDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciwgQVBJVXNlckFib3J0RXJyb3IgfSBmcm9tIFwib3BlbmFpXCI7XG5pbXBvcnQgeyB6b2RUb0pzb25TY2hlbWEgfSBmcm9tIFwiem9kLXRvLWpzb24tc2NoZW1hXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9PcGVuQUlGdW5jdGlvbiwgY29udmVydFRvT3BlbkFJVG9vbCwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmdcIjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgZnVuY3Rpb24gd3JhcE9wZW5BSUNsaWVudEVycm9yKGUpIHtcbiAgICBsZXQgZXJyb3I7XG4gICAgaWYgKGUuY29uc3RydWN0b3IubmFtZSA9PT0gQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvci5uYW1lKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEVycm9yKGUubWVzc2FnZSk7XG4gICAgICAgIGVycm9yLm5hbWUgPSBcIlRpbWVvdXRFcnJvclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChlLmNvbnN0cnVjdG9yLm5hbWUgPT09IEFQSVVzZXJBYm9ydEVycm9yLm5hbWUpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgZXJyb3IubmFtZSA9IFwiQWJvcnRFcnJvclwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXJyb3IgPSBlO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG59XG5leHBvcnQgeyBjb252ZXJ0VG9PcGVuQUlGdW5jdGlvbiBhcyBmb3JtYXRUb09wZW5BSUZ1bmN0aW9uLCBjb252ZXJ0VG9PcGVuQUlUb29sIGFzIGZvcm1hdFRvT3BlbkFJVG9vbCwgfTtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUb09wZW5BSUFzc2lzdGFudFRvb2wodG9vbCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgIG5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0b29sLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogem9kVG9Kc29uU2NoZW1hKHRvb2wuc2NoZW1hKSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/utils/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/@langchain/openai/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AzureChatOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureChatOpenAI),
/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureOpenAI),
/* harmony export */   AzureOpenAIEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureOpenAIEmbeddings),
/* harmony export */   ChatOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI),
/* harmony export */   DallEAPIWrapper: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DallEAPIWrapper),
/* harmony export */   OpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAI),
/* harmony export */   OpenAIChat: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIChat),
/* harmony export */   OpenAIClient: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIClient),
/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbeddings),
/* harmony export */   formatToOpenAIAssistantTool: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAIAssistantTool),
/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAIFunction),
/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAITool),
/* harmony export */   getEndpoint: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint),
/* harmony export */   messageToOpenAIRole: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole),
/* harmony export */   toFile: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.toFile),
/* harmony export */   wrapOpenAIClientError: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.wrapOpenAIClientError)
/* harmony export */ });
/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ "(rsc)/./node_modules/langchain/node_modules/@langchain/openai/dist/index.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/retrievers/time_weighted.js":
/*!************************************************************!*\
  !*** ./node_modules/langchain/retrievers/time_weighted.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BUFFER_IDX: () => (/* reexport safe */ _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__.BUFFER_IDX),
/* harmony export */   LAST_ACCESSED_AT_KEY: () => (/* reexport safe */ _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__.LAST_ACCESSED_AT_KEY),
/* harmony export */   TimeWeightedVectorStoreRetriever: () => (/* reexport safe */ _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__.TimeWeightedVectorStoreRetriever)
/* harmony export */ });
/* harmony import */ var _dist_retrievers_time_weighted_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/retrievers/time_weighted.js */ "(rsc)/./node_modules/langchain/dist/retrievers/time_weighted.js");


/***/ }),

/***/ "(rsc)/./node_modules/langchain/stores/doc/in_memory.js":
/*!********************************************************!*\
  !*** ./node_modules/langchain/stores/doc/in_memory.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InMemoryDocstore: () => (/* reexport safe */ _dist_stores_doc_in_memory_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryDocstore),
/* harmony export */   SynchronousInMemoryDocstore: () => (/* reexport safe */ _dist_stores_doc_in_memory_js__WEBPACK_IMPORTED_MODULE_0__.SynchronousInMemoryDocstore)
/* harmony export */ });
/* harmony import */ var _dist_stores_doc_in_memory_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/stores/doc/in_memory.js */ "(rsc)/./node_modules/langchain/dist/stores/doc/in_memory.js");


/***/ })

};
;